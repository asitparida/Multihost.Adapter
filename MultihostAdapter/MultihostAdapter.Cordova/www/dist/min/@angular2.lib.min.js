!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? t() : "function" == typeof define && define.amd ? define(t) : t() }(this, function () { "use strict"; function e(e, t) { for (var n = e.length - 1; n >= 0; n--) "function" == typeof e[n] && (e[n] = Zone.current.wrap(e[n], t + "_" + n)); return e } function t(t, n) { for (var r = t.constructor.name, o = function (o) { var a = n[o], i = t[a]; i && (t[a] = function (t) { return function () { return t.apply(this, e(arguments, r + "." + a)) } }(i)) }, a = 0; a < n.length; a++) o(a) } function n(e, t) { var n = Object.getOwnPropertyDescriptor(e, t) || { enumerable: !0, configurable: !0 }, r = Object.getOwnPropertyDescriptor(e, "original" + t); !r && n.get && Object.defineProperty(e, "original" + t, { enumerable: !1, configurable: !0, get: n.get }), delete n.writable, delete n.value; var o = t.substr(2), a = "_" + t; n.set = function (e) { if (this[a] && this.removeEventListener(o, this[a]), "function" == typeof e) { var t = function (t) { var n; n = e.apply(this, arguments), void 0 == n || n || t.preventDefault() }; this[a] = t, this.addEventListener(o, t, !1) } else this[a] = null }, n.get = function () { var r = this[a] || null; if (null === r) { var o = Object.getOwnPropertyDescriptor(e, "original" + t); o && o.get && (r = o.get.apply(this, arguments), r && (n.set.apply(this, [r]), this.removeAttribute(t))) } return this[a] || null }, Object.defineProperty(e, t, n) } function r(e, t) { var r = []; for (var o in e) "on" == o.substr(0, 2) && r.push(o); for (var a = 0; a < r.length; a++) n(e, r[a]); if (t) for (var i = 0; i < t.length; i++) n(e, "on" + t[i]) } function o(e, t, n, r, o) { var a = e[C]; if (a) for (var i = 0; i < a.length; i++) { var s = a[i], u = s.data, c = u.handler; if ((u.handler === t || c.listener === t) && u.useCapturing === r && u.eventName === n) return o && a.splice(i, 1), s } return null } function a(e, t, n) { var r = e[C]; r || (r = e[C] = []), n ? r.unshift(t) : r.push(t) } function i(e, t, n, r, i, s) { function u(e) { var t = e.data; return a(t.target, e, i), t.invokeAddFunc(l, e) } function c(e) { var t = e.data; return o(t.target, e.invoke, t.eventName, t.useCapturing, !0), t.invokeRemoveFunc(p, e) } void 0 === n && (n = !0), void 0 === r && (r = !1), void 0 === i && (i = !1), void 0 === s && (s = I); var l = E(e), p = E(t), f = !n && void 0; return function (t, n) { var a = s(t, n); a.useCapturing = a.useCapturing || f; var i = null; "function" == typeof a.handler ? i = a.handler : a.handler && a.handler.handleEvent && (i = function (e) { return a.handler.handleEvent(e) }); var p = !1; try { p = a.handler && "[object FunctionWrapper]" === a.handler.toString() } catch (h) { return } if (!i || p) return a.invokeAddFunc(l, a.handler); if (!r) { var d = o(a.target, a.handler, a.eventName, a.useCapturing, !1); if (d) return a.invokeAddFunc(l, d) } var k = Zone.current, v = a.target.constructor.name + "." + e + ":" + a.eventName; k.scheduleEventTask(v, i, a, u, c) } } function s(e, t, n) { void 0 === t && (t = !0), void 0 === n && (n = I); var r = E(e), a = !t && void 0; return function (e, t) { var i = n(e, t); i.useCapturing = i.useCapturing || a; var s = o(i.target, i.handler, i.eventName, i.useCapturing, !0); s ? s.zone.cancelTask(s) : i.invokeRemoveFunc(r, i.handler) } } function u(e, t, n, r) { return void 0 === t && (t = z), void 0 === n && (n = j), void 0 === r && (r = I), !(!e || !e[t]) && (p(e, t, function () { return i(t, n, !0, !1, !1, r) }), p(e, n, function () { return s(n, !0, r) }), !0) } function c(t) { var n = D[t]; if (n) { D[t] = function () { var r = e(arguments, t); switch (r.length) { case 0: this[L] = new n; break; case 1: this[L] = new n(r[0]); break; case 2: this[L] = new n(r[0], r[1]); break; case 3: this[L] = new n(r[0], r[1], r[2]); break; case 4: this[L] = new n(r[0], r[1], r[2], r[3]); break; default: throw new Error("Arg list too long.") } }; var r, o = new n(function () { }); for (r in o) "XMLHttpRequest" === t && "responseBlob" === r || !function (e) { "function" == typeof o[e] ? D[t].prototype[e] = function () { return this[L][e].apply(this[L], arguments) } : Object.defineProperty(D[t].prototype, e, { set: function (n) { "function" == typeof n ? this[L][e] = Zone.current.wrap(n, t + "." + e) : this[L][e] = n }, get: function () { return this[L][e] } }) }(r); for (r in n) "prototype" !== r && n.hasOwnProperty(r) && (D[t][r] = n[r]) } } function l(e, t) { try { return Function("f", "return function " + e + "(){return f(this, arguments)}")(t) } catch (n) { return function () { return t(this, arguments) } } } function p(e, t, n) { for (var r = e; r && Object.getOwnPropertyNames(r).indexOf(t) === -1;) r = Object.getPrototypeOf(r); !r && e[t] && (r = e); var o, a = E(t); return r && !(o = r[a]) && (o = r[a] = r[t], r[t] = l(t, n(o, a, t))), o } function f(e, t, n, r) { function o(t) { var n = t.data; return n.args[0] = function () { t.invoke.apply(this, arguments), delete u[n.handleId] }, n.handleId = i.apply(e, n.args), u[n.handleId] = t, t } function a(e) { return delete u[e.data.handleId], s(e.data.handleId) } var i = null, s = null; t += r, n += r; var u = {}; i = p(e, t, function (n) { return function (i, s) { if ("function" == typeof s[0]) { var u = Zone.current, c = { handleId: null, isPeriodic: "Interval" === r, delay: "Timeout" === r || "Interval" === r ? s[1] || 0 : null, args: s }, l = u.scheduleMacroTask(t, s[0], c, o, a); if (!l) return l; var p = l.data.handleId; return p.ref && p.unref && (l.ref = p.ref.bind(p), l.unref = p.unref.bind(p)), l } return n.apply(e, s) } }), s = p(e, n, function (t) { return function (n, r) { var o = "number" == typeof r[0] ? u[r[0]] : r[0]; o && "string" == typeof o.type ? (o.cancelFn && o.data.isPeriodic || 0 === o.runCount) && o.zone.cancelTask(o) : t.apply(e, r) } }) } function h() { Object.defineProperty = function (e, t, n) { if (k(e, t)) throw new TypeError("Cannot assign to read only property '" + t + "' of " + e); var r = n.configurable; return "prototype" !== t && (n = v(e, t, n)), g(e, t, n, r) }, Object.defineProperties = function (e, t) { return Object.keys(t).forEach(function (n) { Object.defineProperty(e, n, t[n]) }), e }, Object.create = function (e, t) { return "object" != typeof t || Object.isFrozen(t) || Object.keys(t).forEach(function (n) { t[n] = v(e, n, t[n]) }), H(e, t) }, Object.getOwnPropertyDescriptor = function (e, t) { var n = M(e, t); return k(e, t) && (n.configurable = !1), n } } function d(e, t, n) { var r = n.configurable; return n = v(e, t, n), g(e, t, n, r) } function k(e, t) { return e && e[R] && e[R][t] } function v(e, t, n) { return n.configurable = !0, n.configurable || (e[R] || F(e, R, { writable: !0, value: {} }), e[R][t] = !0), n } function g(e, t, n, r) { try { return F(e, t, n) } catch (o) { if (!n.configurable) throw o; "undefined" == typeof r ? delete n.configurable : n.configurable = r; try { return F(e, t, n) } catch (o) { var a = null; try { a = JSON.stringify(n) } catch (o) { a = a.toString() } console.log("Attempting to configure '" + t + "' with descriptor '" + a + "' on object '" + e + "' and got error, giving up: " + o) } } } function y(e) { var t = [], n = e.wtf; n ? t = x.split(",").map(function (e) { return "HTML" + e + "Element" }).concat(q) : e[B] ? t.push(B) : t = q; for (var r = 0; r < t.length; r++) { var o = e[t[r]]; u(o && o.prototype) } } function m(e) { var t = e.WebSocket; e.EventTarget || u(t.prototype), e.WebSocket = function (e, n) { var o, a = arguments.length > 1 ? new t(e, n) : new t(e), i = Object.getOwnPropertyDescriptor(a, "onmessage"); return i && i.configurable === !1 ? (o = Object.create(a), ["addEventListener", "removeEventListener", "send", "close"].forEach(function (e) { o[e] = function () { return a[e].apply(a, arguments) } })) : o = a, r(o, ["close", "error", "message", "open"]), o }; for (var n in t) e.WebSocket[n] = t[n] } function b(e) { if (!Z) { var t = "undefined" != typeof WebSocket; T() ? (P && r(HTMLElement.prototype, A), r(XMLHttpRequest.prototype, null), "undefined" != typeof IDBIndex && (r(IDBIndex.prototype, null), r(IDBRequest.prototype, null), r(IDBOpenDBRequest.prototype, null), r(IDBDatabase.prototype, null), r(IDBTransaction.prototype, null), r(IDBCursor.prototype, null)), t && r(WebSocket.prototype, null)) : (_(), c("XMLHttpRequest"), t && m(e)) } } function T() { if (P && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, "onclick") && "undefined" != typeof Element) { var e = Object.getOwnPropertyDescriptor(Element.prototype, "onclick"); if (e && !e.configurable) return !1 } Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", { get: function () { return !0 } }); var t = new XMLHttpRequest, n = !!t.onreadystatechange; return Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {}), n } function _() { for (var e = function (e) { var t = A[e], n = "on" + t; self.addEventListener(t, function (e) { var t, r, o = e.target; for (r = o ? o.constructor.name + "." + n : "unknown." + n; o;) o[n] && !o[n][W] && (t = Zone.current.wrap(o[n], r), t[W] = o[n], o[n] = t), o = o.parentElement }, !0) }, t = 0; t < A.length; t++) e(t) } function w(e) { if (P && "registerElement" in e.document) { var t = document.registerElement, n = ["createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback"]; document.registerElement = function (e, r) { return r && r.prototype && n.forEach(function (e) { var t = "Document.registerElement::" + e; if (r.prototype.hasOwnProperty(e)) { var n = Object.getOwnPropertyDescriptor(r.prototype, e); n && n.value ? (n.value = Zone.current.wrap(n.value, t), d(r.prototype, e, n)) : r.prototype[e] = Zone.current.wrap(r.prototype[e], t) } else r.prototype[e] && (r.prototype[e] = Zone.current.wrap(r.prototype[e], t)) }), t.apply(document, [e, r]) } } } function S(e) { function t(e) { var t = e[J]; return t } function n(e) { self[$] = !1; var t = e.data, n = t.target[Y]; n && t.target.removeEventListener("readystatechange", n); var r = t.target[Y] = function () { t.target.readyState === t.target.DONE && !t.aborted && self[$] && e.invoke() }; t.target.addEventListener("readystatechange", r); var o = t.target[J]; return o || (t.target[J] = e), i.apply(t.target, t.args), self[$] = !0, e } function r() { } function o(e) { var t = e.data; return t.aborted = !0, s.apply(t.target, t.args) } var a = p(e.XMLHttpRequest.prototype, "open", function () { return function (e, t) { return e[Q] = 0 == t[2], a.apply(e, t) } }), i = p(e.XMLHttpRequest.prototype, "send", function () { return function (e, t) { var a = Zone.current; if (e[Q]) return i.apply(e, t); var s = { target: e, isPeriodic: !1, delay: null, args: t, aborted: !1 }; return a.scheduleMacroTask("XMLHttpRequest.send", r, s, n, o) } }), s = p(e.XMLHttpRequest.prototype, "abort", function (e) { return function (e, n) { var r = t(e); if (r && "string" == typeof r.type) { if (null == r.cancelFn) return; r.zone.cancelTask(r) } } }) } var E = (function (e) { function t(e) { return "__zone_symbol__" + e } function n() { 0 === O && 0 === S.length && (e[b] ? e[b].resolve(0)[T](a) : e[m](a, 0)) } function r(e) { n(), S.push(e) } function o(e) { var t = e && e.rejection; t && console.error("Unhandled Promise rejection:", t instanceof Error ? t.message : t, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", t, t instanceof Error ? t.stack : void 0), console.error(e) } function a() { if (!E) { for (E = !0; S.length;) { var e = S; S = []; for (var t = 0; t < e.length; t++) { var n = e[t]; try { n.zone.runTask(n, null, null) } catch (r) { o(r) } } } for (; D.length;) for (var a = function () { var e = D.shift(); try { e.zone.runGuarded(function () { throw e }) } catch (t) { o(t) } }; D.length;) a(); E = !1 } } function i(e) { return e && e.then } function s(e) { return e } function u(e) { return F.reject(e) } function c(e, t) { return function (n) { l(e, t, n) } } function l(e, t, r) { if (e[Z] === z) if (r instanceof F && r.hasOwnProperty(Z) && r.hasOwnProperty(P) && r[Z] !== z) p(r), l(e, r[Z], r[P]); else if (i(r)) r.then(c(e, t), c(e, !1)); else { e[Z] = t; var o = e[P]; e[P] = r; for (var a = 0; a < o.length;) f(e, o[a++], o[a++], o[a++], o[a++]); if (0 == o.length && t == I) { e[Z] = L; try { throw new Error("Uncaught (in promise): " + r + (r && r.stack ? "\n" + r.stack : "")) } catch (s) { var u = s; u.rejection = r, u.promise = e, u.zone = k.current, u.task = k.currentTask, D.push(u), n() } } } return e } function p(e) { if (e[Z] === L) { e[Z] = I; for (var t = 0; t < D.length; t++) if (e === D[t].promise) { D.splice(t, 1); break } } } function f(e, t, n, r, o) { p(e); var a = e[Z] ? r || s : o || u; t.scheduleMicroTask(C, function () { try { l(n, !0, t.run(a, null, [e[P]])) } catch (r) { l(n, !1, r) } }) } function h(e) { var n = e.prototype, r = n[t("then")] = n.then; n.then = function (e, t) { var n = this; return new F(function (e, t) { r.call(n, e, t) }).then(e, t) } } function d() { var e = B.apply(this, arguments); if (e.originalStack = e.stack, d[W] && e.originalStack) { for (var t = e.originalStack.split("\n"), n = _, r = 0; t[r] !== q && r < t.length;) r++; for (; r < t.length && n; r++) { var o = t[r]; if (o.trim()) { var a = A.hasOwnProperty(o) && A[o]; a === x.blackList ? (t.splice(r, 1), r--) : a === x.transition ? n.parent ? (t[r] += " [" + n.parent.zone.name + " => " + n.zone.name + "]", n = n.parent) : n = null : t[r] += " [" + n.zone.name + "]" } } e.stack = e.zoneAwareStack = t.join("\n") } return e } if (e.Zone) throw new Error("Zone already loaded."); var k = function () { function t(e, t) { this._properties = null, this._parent = e, this._name = t ? t.name || "unnamed" : "<root>", this._properties = t && t.properties || {}, this._zoneDelegate = new v(this, this._parent && this._parent._zoneDelegate, t) } return t.assertZonePatched = function () { if (e.Promise !== F) throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)") }, Object.defineProperty(t, "current", { get: function () { return _.zone }, enumerable: !0, configurable: !0 }), Object.defineProperty(t, "currentTask", { get: function () { return w }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "parent", { get: function () { return this._parent }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "name", { get: function () { return this._name }, enumerable: !0, configurable: !0 }), t.prototype.get = function (e) { var t = this.getZoneWith(e); if (t) return t._properties[e] }, t.prototype.getZoneWith = function (e) { for (var t = this; t;) { if (t._properties.hasOwnProperty(e)) return t; t = t._parent } return null }, t.prototype.fork = function (e) { if (!e) throw new Error("ZoneSpec required!"); return this._zoneDelegate.fork(this, e) }, t.prototype.wrap = function (e, t) { if ("function" != typeof e) throw new Error("Expecting function got: " + e); var n = this._zoneDelegate.intercept(this, e, t), r = this; return function () { return r.runGuarded(n, this, arguments, t) } }, t.prototype.run = function (e, t, n, r) { void 0 === t && (t = null), void 0 === n && (n = null), void 0 === r && (r = null), _ = new y(_, this); try { return this._zoneDelegate.invoke(this, e, t, n, r) } finally { _ = _.parent } }, t.prototype.runGuarded = function (e, t, n, r) { void 0 === t && (t = null), void 0 === n && (n = null), void 0 === r && (r = null), _ = new y(_, this); try { try { return this._zoneDelegate.invoke(this, e, t, n, r) } catch (o) { if (this._zoneDelegate.handleError(this, o)) throw o } } finally { _ = _.parent } }, t.prototype.runTask = function (e, t, n) { if (e.runCount++, e.zone != this) throw new Error("A task can only be run in the zone which created it! (Creation: " + e.zone.name + "; Execution: " + this.name + ")"); var r = w; w = e, _ = new y(_, this); try { "macroTask" == e.type && e.data && !e.data.isPeriodic && (e.cancelFn = null); try { return this._zoneDelegate.invokeTask(this, e, t, n) } catch (o) { if (this._zoneDelegate.handleError(this, o)) throw o } } finally { _ = _.parent, w = r } }, t.prototype.scheduleMicroTask = function (e, t, n, r) { return this._zoneDelegate.scheduleTask(this, new g("microTask", this, e, t, n, r, null)) }, t.prototype.scheduleMacroTask = function (e, t, n, r, o) { return this._zoneDelegate.scheduleTask(this, new g("macroTask", this, e, t, n, r, o)) }, t.prototype.scheduleEventTask = function (e, t, n, r, o) { return this._zoneDelegate.scheduleTask(this, new g("eventTask", this, e, t, n, r, o)) }, t.prototype.cancelTask = function (e) { var t = this._zoneDelegate.cancelTask(this, e); return e.runCount = -1, e.cancelFn = null, t }, t }(); k.__symbol__ = t; var v = function () { function e(e, t, n) { this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 }, this.zone = e, this._parentDelegate = t, this._forkZS = n && (n && n.onFork ? n : t._forkZS), this._forkDlgt = n && (n.onFork ? t : t._forkDlgt), this._forkCurrZone = n && (n.onFork ? this.zone : t.zone), this._interceptZS = n && (n.onIntercept ? n : t._interceptZS), this._interceptDlgt = n && (n.onIntercept ? t : t._interceptDlgt), this._interceptCurrZone = n && (n.onIntercept ? this.zone : t.zone), this._invokeZS = n && (n.onInvoke ? n : t._invokeZS), this._invokeDlgt = n && (n.onInvoke ? t : t._invokeDlgt), this._invokeCurrZone = n && (n.onInvoke ? this.zone : t.zone), this._handleErrorZS = n && (n.onHandleError ? n : t._handleErrorZS), this._handleErrorDlgt = n && (n.onHandleError ? t : t._handleErrorDlgt), this._handleErrorCurrZone = n && (n.onHandleError ? this.zone : t.zone), this._scheduleTaskZS = n && (n.onScheduleTask ? n : t._scheduleTaskZS), this._scheduleTaskDlgt = n && (n.onScheduleTask ? t : t._scheduleTaskDlgt), this._scheduleTaskCurrZone = n && (n.onScheduleTask ? this.zone : t.zone), this._invokeTaskZS = n && (n.onInvokeTask ? n : t._invokeTaskZS), this._invokeTaskDlgt = n && (n.onInvokeTask ? t : t._invokeTaskDlgt), this._invokeTaskCurrZone = n && (n.onInvokeTask ? this.zone : t.zone), this._cancelTaskZS = n && (n.onCancelTask ? n : t._cancelTaskZS), this._cancelTaskDlgt = n && (n.onCancelTask ? t : t._cancelTaskDlgt), this._cancelTaskCurrZone = n && (n.onCancelTask ? this.zone : t.zone), this._hasTaskZS = n && (n.onHasTask ? n : t._hasTaskZS), this._hasTaskDlgt = n && (n.onHasTask ? t : t._hasTaskDlgt), this._hasTaskCurrZone = n && (n.onHasTask ? this.zone : t.zone) } return e.prototype.fork = function (e, t) { return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, e, t) : new k(e, t) }, e.prototype.intercept = function (e, t, n) { return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, e, t, n) : t }, e.prototype.invoke = function (e, t, n, r, o) { return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, e, t, n, r, o) : t.apply(n, r) }, e.prototype.handleError = function (e, t) { return !this._handleErrorZS || this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, e, t) }, e.prototype.scheduleTask = function (e, t) { try { if (this._scheduleTaskZS) return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, e, t); if (t.scheduleFn) t.scheduleFn(t); else { if ("microTask" != t.type) throw new Error("Task is missing scheduleFn."); r(t) } return t } finally { e == this.zone && this._updateTaskCount(t.type, 1) } }, e.prototype.invokeTask = function (e, t, n, r) { try { return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, e, t, n, r) : t.callback.apply(n, r) } finally { e != this.zone || "eventTask" == t.type || t.data && t.data.isPeriodic || this._updateTaskCount(t.type, -1) } }, e.prototype.cancelTask = function (e, t) { var n; if (this._cancelTaskZS) n = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, e, t); else { if (!t.cancelFn) throw new Error("Task does not support cancellation, or is already canceled."); n = t.cancelFn(t) } return e == this.zone && this._updateTaskCount(t.type, -1), n }, e.prototype.hasTask = function (e, t) { return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, e, t) }, e.prototype._updateTaskCount = function (e, t) { var n = this._taskCounts, r = n[e], o = n[e] = r + t; if (o < 0) throw new Error("More tasks executed then were scheduled."); if (0 == r || 0 == o) { var a = { microTask: n.microTask > 0, macroTask: n.macroTask > 0, eventTask: n.eventTask > 0, change: e }; try { this.hasTask(this.zone, a) } finally { this._parentDelegate && this._parentDelegate._updateTaskCount(e, t) } } }, e }(), g = function () { function e(e, t, n, r, o, i, s) { this.runCount = 0, this.type = e, this.zone = t, this.source = n, this.data = o, this.scheduleFn = i, this.cancelFn = s, this.callback = r; var u = this; this.invoke = function () { O++; try { return t.runTask(u, this, arguments) } finally { 1 == O && a(), O-- } } } return e.prototype.toString = function () { return this.data && "undefined" != typeof this.data.handleId ? this.data.handleId : Object.prototype.toString.call(this) }, e }(), y = function () { function e(e, t) { this.parent = e, this.zone = t } return e }(), m = t("setTimeout"), b = t("Promise"), T = t("then"), _ = new y(null, new k(null, null)), w = null, S = [], E = !1, D = [], O = 0, Z = t("state"), P = t("value"), C = "Promise.then", z = null, j = !0, I = !1, L = 0, F = function () { function e(t) { var n = this; if (!(n instanceof e)) throw new Error("Must be an instanceof Promise."); n[Z] = z, n[P] = []; try { t && t(c(n, j), c(n, I)) } catch (r) { l(n, !1, r) } } return e.resolve = function (e) { return l(new this(null), j, e) }, e.reject = function (e) { return l(new this(null), I, e) }, e.race = function (e) { function t(e) { a && (a = r(e)) } function n(e) { a && (a = o(e)) } for (var r, o, a = new this(function (e, t) { n = [e, t], r = n[0], o = n[1]; var n }), s = 0, u = e; s < u.length; s++) { var c = u[s]; i(c) || (c = this.resolve(c)), c.then(t, n) } return a }, e.all = function (e) { for (var t, n, r = new this(function (e, r) { t = e, n = r }), o = 0, a = [], s = 0, u = e; s < u.length; s++) { var c = u[s]; i(c) || (c = this.resolve(c)), c.then(function (e) { return function (n) { a[e] = n, o--, o || t(a) } }(o), n), o++ } return o || t(a), r }, e.prototype.then = function (e, t) { var n = new this.constructor(null), r = k.current; return this[Z] == z ? this[P].push(r, n, e, t) : f(this, r, n, e, t), n }, e.prototype["catch"] = function (e) { return this.then(null, e) }, e }(); F.resolve = F.resolve, F.reject = F.reject, F.race = F.race, F.all = F.all; var M = e[t("Promise")] = e.Promise; if (e.Promise = F, M && (h(M), "undefined" != typeof e.fetch)) { var H = void 0; try { H = e.fetch() } catch (R) { H = e.fetch("about:blank") } H.then(function () { return null }, function () { return null }), H.constructor != M && H.constructor != F && h(H.constructor) } Promise[k.__symbol__("uncaughtPromiseErrors")] = D; var x; !function (e) { e[e.blackList = 0] = "blackList", e[e.transition = 1] = "transition" }(x || (x = {})); var q, B = e[t("Error")] = e.Error, A = {}; e.Error = d; var W = "stackRewrite"; d.prototype = B.prototype, d[k.__symbol__("blacklistedStackFrames")] = A, d[W] = !1, B.hasOwnProperty("stackTraceLimit") && (B.stackTraceLimit = Math.max(B.stackTraceLimit, 15), Object.defineProperty(d, "stackTraceLimit", { get: function () { return B.stackTraceLimit }, set: function (e) { return B.stackTraceLimit = e } })), B.hasOwnProperty("captureStackTrace") && Object.defineProperty(d, "captureStackTrace", { value: function (e, t) { B.captureStackTrace(e, t) } }), Object.defineProperty(d, "prepareStackTrace", { get: function () { return B.prepareStackTrace }, set: function (e) { return B.prepareStackTrace = e } }); var N = k.current.fork({ name: "detect", onInvoke: function (e, t, n, r, o, a, i) { return e.invoke(n, r, o, a, i) }, onHandleError: function (e, t, n, r) { if (r.originalStack && Error === d) for (var o = r.originalStack.split(/\n/), a = !1, i = !1, s = !1; o.length;) { var u = o.shift(); if (/:\d+:\d+/.test(u)) { var c = u.split("(")[0].split("@")[0], l = x.transition; if (c.indexOf("ZoneAwareError") !== -1 && (q = u), c.indexOf("runGuarded") !== -1 ? i = !0 : c.indexOf("runTask") !== -1 ? s = !0 : c.indexOf("run") !== -1 ? a = !0 : l = x.blackList, A[u] = l, a && i && s) { d[W] = !0; break } } } return !1 } }), X = function () { N.run(function () { N.runGuarded(function () { throw new Error("blacklistStackFrames") }) }) }; return N.runTask(N.scheduleMacroTask("detect", X, null, function () { return null }, null)), e.Zone = k }("object" == typeof window && window || "object" == typeof self && self || global), function (e) { return "__zone_symbol__" + e }), D = "object" == typeof window && window || "object" == typeof self && self || global, O = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope, Z = !("nw" in D) && "undefined" != typeof process && "[object process]" === {}.toString.call(process), P = !Z && !O && !("undefined" == typeof window || !window.HTMLElement), C = E("eventTasks"), z = "addEventListener", j = "removeEventListener", I = function (e, t) { return { useCapturing: t[2], eventName: t[0], handler: t[1], target: e || D, name: t[0], invokeAddFunc: function (e, t) { return t && t.invoke ? this.target[e](this.eventName, t.invoke, this.useCapturing) : this.target[e](this.eventName, t, this.useCapturing) }, invokeRemoveFunc: function (e, t) { return t && t.invoke ? this.target[e](this.eventName, t.invoke, this.useCapturing) : this.target[e](this.eventName, t, this.useCapturing) } } }, L = (i(z, j), s(j), E("originalInstance")), F = Object[E("defineProperty")] = Object.defineProperty, M = Object[E("getOwnPropertyDescriptor")] = Object.getOwnPropertyDescriptor, H = Object.create, R = E("unconfigurables"), x = "Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video", q = "ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket".split(","), B = "EventTarget", A = "copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror".split(" "), W = E("unbound"), N = "set", X = "clear", G = ["alert", "prompt", "confirm"], U = "object" == typeof window && window || "object" == typeof self && self || global; f(U, N, X, "Timeout"), f(U, N, X, "Interval"), f(U, N, X, "Immediate"), f(U, "request", "cancel", "AnimationFrame"), f(U, "mozRequest", "mozCancel", "AnimationFrame"), f(U, "webkitRequest", "webkitCancel", "AnimationFrame"); for (var K = 0; K < G.length; K++) { var V = G[K]; p(U, V, function (e, t, n) { return function (t, r) { return Zone.current.run(e, U, r, n) } }) } y(U), b(U), c("MutationObserver"), c("WebKitMutationObserver"), c("FileReader"), h(), w(U), S(U); var J = E("xhrTask"), Q = E("xhrSync"), Y = E("xhrListener"), $ = E("xhrScheduled"); U.navigator && U.navigator.geolocation && t(U.navigator.geolocation, ["getCurrentPosition", "watchPosition"]) });
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    // feature test for Object.create support
    var supportsCreate = typeof Object.create === "function";
    // feature test for __proto__ support
    var supportsProto = { __proto__: [] } instanceof Array;
    // feature test for Symbol support
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    // create an object in dictionary mode (a.k.a. "slow" mode in v8)
    var createDictionary = supportsCreate ? function () { return MakeDictionary(Object.create(null)); } :
        supportsProto ? function () { return MakeDictionary({ __proto__: null }); } :
            function () { return MakeDictionary({}); };
    var HashMap;
    (function (HashMap) {
        var downLevel = !supportsCreate && !supportsProto;
        HashMap.has = downLevel
            ? function (map, key) { return hasOwn.call(map, key); }
            : function (map, key) { return key in map; };
        HashMap.get = downLevel
            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
            : function (map, key) { return map[key]; };
    })(HashMap || (HashMap = {}));
    // Load global or shim versions of Map, Set, and WeakMap
    var functionPrototype = Object.getPrototypeOf(Function);
    var _Map = typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    // [[Metadata]] internal slot
    var Metadata = new _WeakMap();
    /**
      * Applies a set of decorators to a property of a target object.
      * @param decorators An array of decorators.
      * @param target The target object.
      * @param targetKey (Optional) The property key to decorate.
      * @param targetDescriptor (Optional) The property descriptor for the target key
      * @remarks Decorators are applied in reverse order.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Example = Reflect.decorate(decoratorsArray, Example);
      *
      *     // property (on constructor)
      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Object.defineProperty(Example, "staticMethod",
      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
      *
      *     // method (on prototype)
      *     Object.defineProperty(Example.prototype, "method",
      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
      *
      */
    function decorate(decorators, target, targetKey, targetDescriptor) {
        if (!IsUndefined(targetKey)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            if (!IsObject(targetDescriptor) && !IsUndefined(targetDescriptor) && !IsNull(targetDescriptor))
                throw new TypeError();
            if (IsNull(targetDescriptor))
                targetDescriptor = undefined;
            targetKey = ToPropertyKey(targetKey);
            return DecorateProperty(decorators, target, targetKey, targetDescriptor);
        }
        else {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsConstructor(target))
                throw new TypeError();
            return DecorateConstructor(decorators, target);
        }
    }
    Reflect.decorate = decorate;
    /**
      * A default metadata decorator factory that can be used on a class, class member, or parameter.
      * @param metadataKey The key for the metadata entry.
      * @param metadataValue The value for the metadata entry.
      * @returns A decorator function.
      * @remarks
      * If `metadataKey` is already defined for the target and target key, the
      * metadataValue for that key will be overwritten.
      * @example
      *
      *     // constructor
      *     @Reflect.metadata(key, value)
      *     class Example {
      *     }
      *
      *     // property (on constructor, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticProperty;
      *     }
      *
      *     // property (on prototype, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         property;
      *     }
      *
      *     // method (on constructor)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticMethod() { }
      *     }
      *
      *     // method (on prototype)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         method() { }
      *     }
      *
      */
    function metadata(metadataKey, metadataValue) {
        function decorator(target, targetKey) {
            if (!IsUndefined(targetKey)) {
                if (!IsObject(target))
                    throw new TypeError();
                targetKey = ToPropertyKey(targetKey);
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
            }
            else {
                if (!IsConstructor(target))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);
            }
        }
        return decorator;
    }
    Reflect.metadata = metadata;
    /**
      * Define a unique metadata entry on the target.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param metadataValue A value that contains attached metadata.
      * @param target The target object on which to define metadata.
      * @param targetKey (Optional) The property key for the target.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Reflect.defineMetadata("custom:annotation", options, Example);
      *
      *     // property (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
      *
      *     // method (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
      *
      *     // decorator factory as metadata-producing annotation.
      *     function MyAnnotation(options): Decorator {
      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
      *     }
      *
      */
    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
    }
    Reflect.defineMetadata = defineMetadata;
    /**
      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryHasMetadata(metadataKey, target, targetKey);
    }
    Reflect.hasMetadata = hasMetadata;
    /**
      * Gets a value indicating whether the target object has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasOwnMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
    }
    Reflect.hasOwnMetadata = hasOwnMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryGetMetadata(metadataKey, target, targetKey);
    }
    Reflect.getMetadata = getMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getOwnMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
    }
    Reflect.getOwnMetadata = getOwnMetadata;
    /**
      * Gets the metadata keys defined on the target object or its prototype chain.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
      *
      */
    function getMetadataKeys(target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryMetadataKeys(target, targetKey);
    }
    Reflect.getMetadataKeys = getMetadataKeys;
    /**
      * Gets the unique metadata keys defined on the target object.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
      *
      */
    function getOwnMetadataKeys(target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryOwnMetadataKeys(target, targetKey);
    }
    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
    /**
      * Deletes the metadata entry from the target object with the provided key.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.deleteMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function deleteMetadata(metadataKey, target, targetKey) {
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#deletemetadata-metadatakey-p-
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        if (!metadataMap.delete(metadataKey))
            return false;
        if (metadataMap.size > 0)
            return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(targetKey);
        if (targetMetadata.size > 0)
            return true;
        Metadata.delete(target);
        return true;
    }
    Reflect.deleteMetadata = deleteMetadata;
    function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsConstructor(decorated))
                    throw new TypeError();
                target = decorated;
            }
        }
        return target;
    }
    function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsObject(decorated))
                    throw new TypeError();
                descriptor = decorated;
            }
        }
        return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
            if (!Create)
                return undefined;
            targetMetadata = new _Map();
            Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
            if (!Create)
                return undefined;
            metadataMap = new _Map();
            targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
    }
    // Ordinary Object Internal Methods and Internal Slots
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinary-object-internal-methods-and-internal-slots
    // OrdinaryHasMetadata(MetadataKey, O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
    function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
    }
    // OrdinaryHasOwnMetadata(MetadataKey, O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        return ToBoolean(metadataMap.has(MetadataKey));
    }
    // OrdinaryGetMetadata(MetadataKey, O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetmetadata--metadatakey-o-p-
    function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
        return undefined;
    }
    // OrdinaryGetOwnMetadata(MetadataKey, O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
        if (IsUndefined(metadataMap))
            return undefined;
        return metadataMap.get(MetadataKey);
    }
    // OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);
        metadataMap.set(MetadataKey, MetadataValue);
    }
    // OrdinaryMetadataKeys(O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarymetadatakeys--o-p-
    function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
            return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
            return ownKeys;
        if (ownKeys.length <= 0)
            return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
            var key = ownKeys_1[_i];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
            var key = parentKeys_1[_a];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        return keys;
    }
    // OrdinaryOwnMetadataKeys(O, P)
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryownmetadatakeys--o-p-
    function OrdinaryOwnMetadataKeys(O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
        var keys = [];
        if (IsUndefined(metadataMap))
            return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        while (true) {
            var next = IteratorStep(iterator);
            try {
                if (!next)
                    return keys;
                var nextValue = IteratorValue(next);
                keys.push(nextValue);
            }
            catch (e) {
                try {
                    if (next) {
                        next = false;
                        IteratorClose(iterator);
                    }
                }
                finally {
                    throw e;
                }
            }
            finally {
                if (next)
                    IteratorClose(iterator);
            }
        }
    }
    // ECMAScript Specification
    // https://tc39.github.io/ecma262/
    // 6 ECMAScript Data Typ0es and Values
    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
    function Type(x) {
        if (x === null)
            return 1 /* Null */;
        switch (typeof x) {
            case "undefined": return 0 /* Undefined */;
            case "boolean": return 2 /* Boolean */;
            case "string": return 3 /* String */;
            case "symbol": return 4 /* Symbol */;
            case "number": return 5 /* Number */;
            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
            default: return 6 /* Object */;
        }
    }
    // 6.1.1 The Undefined Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
    function IsUndefined(x) {
        return x === undefined;
    }
    // 6.1.2 The Null Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
    function IsNull(x) {
        return x === null;
    }
    // 6.1.5 The Symbol Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
    function IsSymbol(x) {
        return typeof x === "symbol";
    }
    // 6.1.7 The Object Type
    // https://tc39.github.io/ecma262/#sec-object-type
    function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
    }
    // 7.1 Type Conversion
    // https://tc39.github.io/ecma262/#sec-type-conversion
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // https://tc39.github.io/ecma262/#sec-toprimitive
    function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
            case 0 /* Undefined */: return input;
            case 1 /* Null */: return input;
            case 2 /* Boolean */: return input;
            case 3 /* String */: return input;
            case 4 /* Symbol */: return input;
            case 5 /* Number */: return input;
        }
        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== undefined) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
                throw new TypeError();
            return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
    function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
                var result = toString_1.call(O);
                if (!IsObject(result))
                    return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
                var result = toString_2.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        throw new TypeError();
    }
    // 7.1.2 ToBoolean(argument)
    // https://tc39.github.io/ecma262/2016/#sec-toboolean
    function ToBoolean(argument) {
        return !!argument;
    }
    // 7.1.12 ToString(argument)
    // https://tc39.github.io/ecma262/#sec-tostring
    function ToString(argument) {
        return "" + argument;
    }
    // 7.1.14 ToPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-topropertykey
    function ToPropertyKey(argument) {
        var key = ToPrimitive(argument, 3 /* String */);
        if (IsSymbol(key))
            return key;
        return ToString(key);
    }
    // 7.2 Testing and Comparison Operations
    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
    // 7.2.2 IsArray(argument)
    // https://tc39.github.io/ecma262/#sec-isarray
    function IsArray(argument) {
        return Array.isArray
            ? Array.isArray(argument)
            : argument instanceof Object
                ? argument instanceof Array
                : Object.prototype.toString.call(argument) === "[object Array]";
    }
    // 7.2.3 IsCallable(argument)
    // https://tc39.github.io/ecma262/#sec-iscallable
    function IsCallable(argument) {
        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
        return typeof argument === "function";
    }
    // 7.2.4 IsConstructor(argument)
    // https://tc39.github.io/ecma262/#sec-isconstructor
    function IsConstructor(argument) {
        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
        return typeof argument === "function";
    }
    // 7.3 Operations on Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-objects
    // 7.3.9 GetMethod(V, P)
    // https://tc39.github.io/ecma262/#sec-getmethod
    function GetMethod(V, P) {
        var func = V[P];
        if (func === undefined || func === null)
            return undefined;
        if (!IsCallable(func))
            throw new TypeError();
        return func;
    }
    // 7.4 Operations on Iterator Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
    function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
            throw new TypeError(); // from Call
        var iterator = method.call(obj);
        if (!IsObject(iterator))
            throw new TypeError();
        return iterator;
    }
    // 7.4.4 IteratorValue(iterResult)
    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
    function IteratorValue(iterResult) {
        return iterResult.value;
    }
    // 7.4.5 IteratorStep(iterator)
    // https://tc39.github.io/ecma262/#sec-iteratorstep
    function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
    }
    // 7.4.6 IteratorClose(iterator, completion)
    // https://tc39.github.io/ecma262/#sec-iteratorclose
    function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
            f.call(iterator);
    }
    // 9.1 Ordinary Object Internal Methods and Internal Slots
    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
    function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
            return proto;
        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
        // Try to determine the superclass constructor. Compatible implementations
        // must either set __proto__ on a subclass constructor to the superclass constructor,
        // or ensure each class has a valid `constructor` property on its prototype that
        // points back to the constructor.
        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
        // This is the case when in ES6 or when using __proto__ in a compatible browser.
        if (proto !== functionPrototype)
            return proto;
        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
        // If the constructor was not a function, then we cannot determine the heritage.
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
            return proto;
        // If we have some kind of self-reference, then we cannot determine the heritage.
        if (constructor === O)
            return proto;
        // we have a pretty good guess at the heritage.
        return constructor;
    }
    // naive Map shim
    function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (function () {
            function MapIterator(keys, values, selector) {
                this._index = 0;
                this._keys = keys;
                this._values = values;
                this._selector = selector;
            }
            MapIterator.prototype["@@iterator"] = function () { return this; };
            MapIterator.prototype[iteratorSymbol] = function () { return this; };
            MapIterator.prototype.next = function () {
                var index = this._index;
                if (index >= 0 && index < this._keys.length) {
                    var result = this._selector(this._keys[index], this._values[index]);
                    if (index + 1 >= this._keys.length) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    else {
                        this._index++;
                    }
                    return { value: result, done: false };
                }
                return { value: undefined, done: true };
            };
            MapIterator.prototype.throw = function (error) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                throw error;
            };
            MapIterator.prototype.return = function (value) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                return { value: value, done: true };
            };
            return MapIterator;
        }());
        return (function () {
            function Map() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            }
            Object.defineProperty(Map.prototype, "size", {
                get: function () { return this._keys.length; },
                enumerable: true,
                configurable: true
            });
            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
            Map.prototype.get = function (key) {
                var index = this._find(key, /*insert*/ false);
                return index >= 0 ? this._values[index] : undefined;
            };
            Map.prototype.set = function (key, value) {
                var index = this._find(key, /*insert*/ true);
                this._values[index] = value;
                return this;
            };
            Map.prototype.delete = function (key) {
                var index = this._find(key, /*insert*/ false);
                if (index >= 0) {
                    var size = this._keys.length;
                    for (var i = index + 1; i < size; i++) {
                        this._keys[i - 1] = this._keys[i];
                        this._values[i - 1] = this._values[i];
                    }
                    this._keys.length--;
                    this._values.length--;
                    if (key === this._cacheKey) {
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    return true;
                }
                return false;
            };
            Map.prototype.clear = function () {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            };
            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
            Map.prototype["@@iterator"] = function () { return this.entries(); };
            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
            Map.prototype._find = function (key, insert) {
                if (this._cacheKey === key)
                    return this._cacheIndex;
                var index = this._keys.indexOf(key);
                if (index < 0 && insert) {
                    index = this._keys.length;
                    this._keys.push(key);
                    this._values.push(undefined);
                }
                return this._cacheKey = key, this._cacheIndex = index;
            };
            return Map;
        }());
        function getKey(key, _) {
            return key;
        }
        function getValue(_, value) {
            return value;
        }
        function getEntry(key, value) {
            return [key, value];
        }
    }
    // naive Set shim
    function CreateSetPolyfill() {
        return (function () {
            function Set() {
                this._map = new _Map();
            }
            Object.defineProperty(Set.prototype, "size", {
                get: function () { return this._map.size; },
                enumerable: true,
                configurable: true
            });
            Set.prototype.has = function (value) { return this._map.has(value); };
            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
            Set.prototype.delete = function (value) { return this._map.delete(value); };
            Set.prototype.clear = function () { this._map.clear(); };
            Set.prototype.keys = function () { return this._map.keys(); };
            Set.prototype.values = function () { return this._map.values(); };
            Set.prototype.entries = function () { return this._map.entries(); };
            Set.prototype["@@iterator"] = function () { return this.keys(); };
            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
            return Set;
        }());
    }
    // naive WeakMap shim
    function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = createDictionary();
        var rootKey = CreateUniqueKey();
        return (function () {
            function WeakMap() {
                this._key = CreateUniqueKey();
            }
            WeakMap.prototype.has = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.has(table, this._key) : false;
            };
            WeakMap.prototype.get = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.get(table, this._key) : undefined;
            };
            WeakMap.prototype.set = function (target, value) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                table[this._key] = value;
                return this;
            };
            WeakMap.prototype.delete = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? delete table[this._key] : false;
            };
            WeakMap.prototype.clear = function () {
                // NOTE: not a real clear, just makes the previous data unreachable
                this._key = CreateUniqueKey();
            };
            return WeakMap;
        }());
        function CreateUniqueKey() {
            var key;
            do
                key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
                if (!create)
                    return undefined;
                Object.defineProperty(target, rootKey, { value: createDictionary() });
            }
            return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
                buffer[i] = Math.random() * 0xff | 0;
            return buffer;
        }
        function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
                if (typeof crypto !== "undefined")
                    return crypto.getRandomValues(new Uint8Array(size));
                if (typeof msCrypto !== "undefined")
                    return msCrypto.getRandomValues(new Uint8Array(size));
                return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            // mark as random - RFC 4122 § 4.4
            data[6] = data[6] & 0x4f | 0x40;
            data[8] = data[8] & 0xbf | 0x80;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
                var byte = data[offset];
                if (offset === 4 || offset === 6 || offset === 8)
                    result += "-";
                if (byte < 16)
                    result += "0";
                result += byte.toString(16).toLowerCase();
            }
            return result;
        }
    }
    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
    function MakeDictionary(obj) {
        obj.__ = undefined;
        delete obj.__;
        return obj;
    }
    // patch global Reflect
    (function (__global) {
        if (typeof __global.Reflect !== "undefined") {
            if (__global.Reflect !== Reflect) {
                for (var p in Reflect) {
                    if (hasOwn.call(Reflect, p)) {
                        __global.Reflect[p] = Reflect[p];
                    }
                }
            }
        }
        else {
            __global.Reflect = Reflect;
        }
    })(typeof global !== "undefined" ? global :
        typeof self !== "undefined" ? self :
            Function("return this;")());
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map
/**
  @license
  Apache License 2.0 https://github.com/ReactiveX/RxJS/blob/master/LICENSE.txt
 **/
var __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator;
(function (l) {
    function m(k, l) { return function (m, u) { return k[m] = l ? l(m, u) : u } } var u = "object" === typeof global ? global : "object" === typeof self ? self : "object" === typeof this ? this : {}; "object" === typeof System && "function" === typeof System.register ? System.register("tslib", [], function (k) { l(m(u, k)); return { setters: [], execute: function () { } } }) : "function" === typeof define && define.amd ? define("tslib", ["exports"], function (k) { l(m(u, m(k))) }) : "object" === typeof module && "object" === typeof module.exports ? l(m(u, m(module.exports))) :
    l(m(u))
})(function (l) {
    __extends = function (l, u) { function k() { this.constructor = l } for (var m in u) u.hasOwnProperty(m) && (l[m] = u[m]); l.prototype = null === u ? Object.create(u) : (k.prototype = u.prototype, new k) }; __assign = Object.assign || function (l) { for (var m, k = 1, E = arguments.length; k < E; k++) { m = arguments[k]; for (var w in m) Object.prototype.hasOwnProperty.call(m, w) && (l[w] = m[w]) } return l }; __rest = function (l, u) {
        var k = {}, m; for (m in l) Object.prototype.hasOwnProperty.call(l, m) && 0 > u.indexOf(m) && (k[m] = l[m]); if (null != l && "function" ===
        typeof Object.getOwnPropertySymbols) { var w = 0; for (m = Object.getOwnPropertySymbols(l) ; w < m.length; w++) 0 > u.indexOf(m[w]) && (k[m[w]] = l[m[w]]) } return k
    }; __decorate = function (l, u, k, E) { var m = arguments.length, A = 3 > m ? u : null === E ? E = Object.getOwnPropertyDescriptor(u, k) : E, F; if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) A = Reflect.decorate(l, u, k, E); else for (var v = l.length - 1; 0 <= v; v--) if (F = l[v]) A = (3 > m ? F(A) : 3 < m ? F(u, k, A) : F(u, k)) || A; return 3 < m && A && Object.defineProperty(u, k, A), A }; __param = function (l, u) {
        return function (k,
        m) { u(k, m, l) }
    }; __metadata = function (l, u) { if ("object" === typeof Reflect && "function" === typeof Reflect.metadata) return Reflect.metadata(l, u) }; __awaiter = function (l, u, k, E) { return new (k || (k = Promise))(function (m, A) { function w(l) { try { G(E.next(l)) } catch (q) { A(q) } } function v(l) { try { G(E["throw"](l)) } catch (q) { A(q) } } function G(l) { l.done ? m(l.value) : (new k(function (k) { k(l.value) })).then(w, v) } G((E = E.apply(l, u)).next()) }) }; __generator = function (l, u) {
        function k(l) { return function (k) { return m([l, k]) } } function m(k) {
            if (A) throw new TypeError("Generator is already executing.");
            for (; w;) try {
                if (A = 1, F && (v = F[k[0] & 2 ? "return" : k[0] ? "throw" : "next"]) && !(v = v.call(F, k[1])).done) return v; if (F = 0, v) k = [0, v.value]; switch (k[0]) {
                    case 0: case 1: v = k; break; case 4: return w.label++, { value: k[1], done: !1 }; case 5: w.label++; F = k[1]; k = [0]; continue; case 7: k = w.ops.pop(); w.trys.pop(); continue; default: if (!(v = w.trys, v = 0 < v.length && v[v.length - 1]) && (6 === k[0] || 2 === k[0])) { w = 0; continue } if (3 === k[0] && (!v || k[1] > v[0] && k[1] < v[3])) w.label = k[1]; else if (6 === k[0] && w.label < v[1]) w.label = v[1], v = k; else if (v && w.label < v[2]) w.label =
                    v[2], w.ops.push(k); else { v[2] && w.ops.pop(); w.trys.pop(); continue }
                } k = u.call(l, w)
            } catch (Z) { k = [6, Z], F = 0 } finally { A = v = 0 } if (k[0] & 5) throw k[1]; return { value: k[0] ? k[1] : void 0, done: !0 }
        } var w = { label: 0, sent: function () { if (v[0] & 1) throw v[1]; return v[1] }, trys: [], ops: [] }, A, F, v; return { next: k(0), "throw": k(1), "return": k(2) }
    }; l("__extends", __extends); l("__assign", __assign); l("__rest", __rest); l("__decorate", __decorate); l("__param", __param); l("__metadata", __metadata); l("__awaiter", __awaiter); l("__generator", __generator)
});
(function (l, m) { "object" === typeof exports && "undefined" !== typeof module ? m(exports) : "function" === typeof define && define.amd ? define(["exports"], m) : m(l.Rx = l.Rx || {}) })(this, function (l) {
    function m(b) { return "function" === typeof b } function u() { try { return qa.apply(this, arguments) } catch (b) { return n.e = b, n } } function k(b) { qa = b; return u } function E(b) { var a = b.subject; a.next(b.value); a.complete() } function w(b) { b.subject.error(b.err) } function A(b) {
        var a = this, c = b.source; b = b.subscriber; var e = c.callbackFunc, d = c.args, f =
        c.scheduler, h = c.subject; if (!h) { var h = c.subject = new P, g = function J() { for (var c = [], b = 0; b < arguments.length; b++) c[b - 0] = arguments[b]; var e = J.source, b = e.selector, e = e.subject, d = c.shift(); d ? e.error(d) : b ? (c = k(b).apply(this, c), c === n ? a.add(f.schedule(v, 0, { err: n.e, subject: e })) : a.add(f.schedule(F, 0, { value: c, subject: e }))) : a.add(f.schedule(F, 0, { value: 1 === c.length ? c[0] : c, subject: e })) }; g.source = c; k(e).apply(this, d.concat(g)) === n && h.error(n.e) } a.add(h.subscribe(b))
    } function F(b) { var a = b.subject; a.next(b.value); a.complete() }
    function v(b) { b.subject.error(b.err) } function G(b) { return b && "function" === typeof b.schedule } function Z(b) { return b && "function" !== typeof b.subscribe && "function" === typeof b.then } function q(b, a, c, e) {
        var d = new ra(b, c, e); if (d.closed) return null; if (a instanceof g) if (a._isScalar) d.next(a.value), d.complete(); else return a.subscribe(d); else if (H(a)) { b = 0; for (c = a.length; b < c && !d.closed; b++) d.next(a[b]); d.closed || d.complete() } else {
            if (Z(a)) return a.then(function (c) { d.closed || (d.next(c), d.complete()) }, function (c) { return d.error(c) }).then(null,
            function (c) { r.setTimeout(function () { throw c; }) }), d; if (a && "function" === typeof a[I]) { a = a[I](); do { b = a.next(); if (b.done) { d.complete(); break } d.next(b.value); if (d.closed) break } while (1) } else if (a && "function" === typeof a[M]) if (a = a[M](), "function" !== typeof a.subscribe) d.error(new TypeError("Provided object does not correctly implement Symbol.observable")); else return a.subscribe(new ra(b, c, e)); else d.error(new TypeError("You provided " + (null != a && "object" === typeof a ? "an invalid object" : "'" + a + "'") + " where a stream was expected. You can provide an Observable, Promise, Array, or Iterable."))
        } return null
    }
    function S() { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; a = null; G(b[b.length - 1]) && (a = b.pop()); return null === a && 1 === b.length ? b[0] : (new K(b, a)).lift(new aa(1)) } function sa(b) { var a = b.value; b = b.subscriber; b.closed || (b.next(a), b.complete()) } function ob(b) { var a = b.err; b = b.subscriber; b.closed || b.error(a) } function ga(b) { return !H(b) && 0 <= b - parseFloat(b) + 1 } function ta() {
        for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; var a = Number.POSITIVE_INFINITY, c = null, e = b[b.length - 1]; G(e) ? (c =
        b.pop(), 1 < b.length && "number" === typeof b[b.length - 1] && (a = b.pop())) : "number" === typeof e && (a = b.pop()); return null === c && 1 === b.length ? b[0] : (new K(b, c)).lift(new aa(a))
    } function ua() { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; if (1 === b.length) if (H(b[0])) b = b[0]; else return b[0]; return (new K(b)).lift(new pb) } function qb(b) { var a = b.obj, c = b.keys, e = b.index, d = b.subscriber; e === b.length ? d.complete() : (c = c[e], d.next([c, a[c]]), b.index = e + 1, this.schedule(b)) } function ba(b) {
        return b instanceof Date &&
        !isNaN(+b)
    } function va() { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; a = b[b.length - 1]; "function" === typeof a && b.pop(); return (new K(b)).lift(new wa(a)) } function xa(b, a) { if ("function" !== typeof b) throw new TypeError("argument is not a function. Are you looking for `mapTo()`?"); return this.lift(new ya(b, a)) } function rb(b, a) { void 0 === a && (a = null); return new Q({ method: "GET", url: b, headers: a }) } function sb(b, a, c) { return new Q({ method: "POST", url: b, body: a, headers: c }) } function tb(b, a) {
        return new Q({
            method: "DELETE",
            url: b, headers: a
        })
    } function ub(b, a, c) { return new Q({ method: "PUT", url: b, body: a, headers: c }) } function vb(b, a) { return (new Q({ method: "GET", url: b, responseType: "json", headers: a })).lift(new ya(function (c, a) { return c.response }, null)) } function wb(b) { for (var a = [], c = 1; c < arguments.length; c++) a[c - 1] = arguments[c]; for (var c = a.length, e = 0; e < c; e++) { var d = a[e], f; for (f in d) d.hasOwnProperty(f) && (b[f] = d[f]) } return b } function za(b) {
        var a = b.subscriber, c = b.context; c && a.closeContext(c); a.closed || (b.context = a.openContext(),
        b.context.closeAction = this.schedule(b, b.bufferTimeSpan))
    } function xb(b) { var a = b.bufferCreationInterval, c = b.bufferTimeSpan, e = b.subscriber, d = b.scheduler, f = e.openContext(); e.closed || (e.add(f.closeAction = d.schedule(Aa, c, { subscriber: e, context: f })), this.schedule(b, a)) } function Aa(b) { b.subscriber.closeContext(b.context) } function Ba(b) { b = new yb(b); var a = this.lift(b); return b.caught = a } function Ca(b, a, c) {
        void 0 === c && (c = Number.POSITIVE_INFINITY); "number" === typeof a && (c = a, a = null); return this.lift(new Da(b, a,
        c))
    } function Ea(b, a, c) { void 0 === c && (c = Number.POSITIVE_INFINITY); "number" === typeof a && (c = a, a = null); return this.lift(new Fa(b, a, c)) } function zb(b) { b.debouncedNext() } function Ab() {
        return function () {
            function b() { this._values = [] } b.prototype.add = function (a) { this.has(a) || this._values.push(a) }; b.prototype.has = function (a) { return -1 !== this._values.indexOf(a) }; Object.defineProperty(b.prototype, "size", { get: function () { return this._values.length }, enumerable: !0, configurable: !0 }); b.prototype.clear = function () {
                this._values.length =
                0
            }; return b
        }()
    } function Ga(b, a) { return this.lift(new Bb(b, a)) } function Ha(b, a, c) { return this.lift(new Cb(b, a, c)) } function ha(b, a) { return this.lift(new Db(b, a)) } function Ia(b) { return this.lift(new Eb(b)) } function Fb(b) { b.clearThrottle() } function Ja(b) { return b(this) } function N(b, a) { var c; c = "function" === typeof b ? b : function () { return b }; if ("function" === typeof a) return this.lift(new Gb(c, a)); a = Object.create(this, Hb); a.source = this; a.subjectFactory = c; return a } function Ib(b, a) {
        function c() {
            return !c.pred.apply(c.thisArg,
            arguments)
        } c.pred = b; c.thisArg = a; return c
    } function Jb(b, a) { return function (c) { var e = c; for (c = 0; c < a; c++) if (e = e[b[c]], "undefined" === typeof e) return; return e } } function Kb(b) { var a = b.period; b.subscriber.notifyNext(); this.schedule(b, a) } function Lb() { return new y } function Ka() { return this.lift(new Mb) } function Nb(b) { b.subscriber.clearThrottle() } function Ob(b) { var a = b.subscriber, c = b.windowTimeSpan, e = b.window; e && e.complete(); b.window = a.openWindow(); this.schedule(b, c) } function Pb(b) {
        var a = b.windowTimeSpan, c =
        b.subscriber, e = b.scheduler, d = b.windowCreationInterval, f = c.openWindow(), h = { action: this, subscription: null }; h.subscription = e.schedule(La, a, { subscriber: c, window: f, context: h }); this.add(h.subscription); this.schedule(b, d)
    } function La(b) { var a = b.subscriber, c = b.window; (b = b.context) && b.action && b.subscription && b.action.remove(b.subscription); a.closeWindow(c) } function Ma(b, a) {
        for (var c = 0, e = a.length; c < e; c++) for (var d = a[c], f = Object.getOwnPropertyNames(d.prototype), h = 0, g = f.length; h < g; h++) {
            var k = f[h]; b.prototype[k] =
            d.prototype[k]
        }
    } var r = "object" == typeof window && window.window === window && window || "object" == typeof self && self.self === self && self || "object" == typeof global && global.global === global && global; if (!r) throw Error("RxJS could not find any global context (window, self, global)"); var H = Array.isArray || function (b) { return b && "number" === typeof b.length }, n = { e: {} }, qa, ia = function (b) {
        function a(c) {
            b.call(this); this.errors = c; c = Error.call(this, c ? c.length + " errors occurred during unsubscription:\n  " + c.map(function (c, a) {
                return a +
                1 + ") " + c.toString()
            }).join("\n  ") : ""); this.name = c.name = "UnsubscriptionError"; this.stack = c.stack; this.message = c.message
        } __extends(a, b); return a
    }(Error), x = function () {
        function b(a) { this.closed = !1; a && (this._unsubscribe = a) } b.prototype.unsubscribe = function () {
            var a = !1, c; if (!this.closed) {
                this.closed = !0; var b = this._unsubscribe, d = this._subscriptions; this._subscriptions = null; if (m(b)) { var f = k(b).call(this); f === n && (a = !0, (c = c || []).push(n.e)) } if (H(d)) for (var b = -1, h = d.length; ++b < h;) f = d[b], null != f && "object" === typeof f &&
                (f = k(f.unsubscribe).call(f), f === n && (a = !0, c = c || [], f = n.e, f instanceof ia ? c = c.concat(f.errors) : c.push(f))); if (a) throw new ia(c);
            }
        }; b.prototype.add = function (a) { if (!a || a === b.EMPTY) return b.EMPTY; if (a === this) return this; var c = a; switch (typeof a) { case "function": c = new b(a); case "object": c.closed || "function" !== typeof c.unsubscribe || (this.closed ? c.unsubscribe() : (this._subscriptions || (this._subscriptions = [])).push(c)); break; default: throw Error("unrecognized teardown " + a + " added to Subscription."); } return c };
        b.prototype.remove = function (a) { if (null != a && a !== this && a !== b.EMPTY) { var c = this._subscriptions; c && (a = c.indexOf(a), -1 !== a && c.splice(a, 1)) } }; b.EMPTY = function (a) { a.closed = !0; return a }(new b); return b
    }(), ja = { closed: !0, next: function (b) { }, error: function (b) { throw b; }, complete: function () { } }, ka = r.Symbol, T = "function" === typeof ka && "function" === typeof ka.for ? ka.for("rxSubscriber") : "@@rxSubscriber", p = function (b) {
        function a(c, e, d) {
            b.call(this); this.syncErrorValue = null; this.isStopped = this.syncErrorThrowable = this.syncErrorThrown =
            !1; switch (arguments.length) { case 0: this.destination = ja; break; case 1: if (!c) { this.destination = ja; break } if ("object" === typeof c) { c instanceof a ? (this.destination = c, this.destination.add(this)) : (this.syncErrorThrowable = !0, this.destination = new Na(this, c)); break } default: this.syncErrorThrowable = !0, this.destination = new Na(this, c, e, d) }
        } __extends(a, b); a.prototype[T] = function () { return this }; a.create = function (c, b, d) { c = new a(c, b, d); c.syncErrorThrowable = !1; return c }; a.prototype.next = function (c) { this.isStopped || this._next(c) };
        a.prototype.error = function (c) { this.isStopped || (this.isStopped = !0, this._error(c)) }; a.prototype.complete = function () { this.isStopped || (this.isStopped = !0, this._complete()) }; a.prototype.unsubscribe = function () { this.closed || (this.isStopped = !0, b.prototype.unsubscribe.call(this)) }; a.prototype._next = function (c) { this.destination.next(c) }; a.prototype._error = function (c) { this.destination.error(c); this.unsubscribe() }; a.prototype._complete = function () { this.destination.complete(); this.unsubscribe() }; return a
    }(x), Na =
    function (b) {
        function a(c, a, d, f) { b.call(this); this._parent = c; var e; c = this; m(a) ? e = a : a && (c = a, e = a.next, d = a.error, f = a.complete, m(c.unsubscribe) && this.add(c.unsubscribe.bind(c)), c.unsubscribe = this.unsubscribe.bind(this)); this._context = c; this._next = e; this._error = d; this._complete = f } __extends(a, b); a.prototype.next = function (c) { if (!this.isStopped && this._next) { var a = this._parent; a.syncErrorThrowable ? this.__tryOrSetError(a, this._next, c) && this.unsubscribe() : this.__tryOrUnsub(this._next, c) } }; a.prototype.error = function (c) {
            if (!this.isStopped) {
                var a =
                this._parent; if (this._error) a.syncErrorThrowable ? this.__tryOrSetError(a, this._error, c) : this.__tryOrUnsub(this._error, c), this.unsubscribe(); else if (a.syncErrorThrowable) a.syncErrorValue = c, a.syncErrorThrown = !0, this.unsubscribe(); else throw this.unsubscribe(), c;
            }
        }; a.prototype.complete = function () { if (!this.isStopped) { var c = this._parent; this._complete && (c.syncErrorThrowable ? this.__tryOrSetError(c, this._complete) : this.__tryOrUnsub(this._complete)); this.unsubscribe() } }; a.prototype.__tryOrUnsub = function (c,
        a) { try { c.call(this._context, a) } catch (d) { throw this.unsubscribe(), d; } }; a.prototype.__tryOrSetError = function (c, a, b) { try { a.call(this._context, b) } catch (f) { return c.syncErrorValue = f, c.syncErrorThrown = !0 } return !1 }; a.prototype._unsubscribe = function () { var c = this._parent; this._parent = this._context = null; c.unsubscribe() }; return a
    }(p), M = function (b) { var a = b.Symbol; "function" === typeof a ? a.observable ? b = a.observable : (b = a("observable"), a.observable = b) : b = "@@observable"; return b }(r), g = function () {
        function b(a) {
            this._isScalar =
            !1; a && (this._subscribe = a)
        } b.prototype.lift = function (a) { var c = new b; c.source = this; c.operator = a; return c }; b.prototype.subscribe = function (a, c, b) { var e = this.operator; a: { if (a) { if (a instanceof p) break a; if (a[T]) { a = a[T](); break a } } a = a || c || b ? new p(a, c, b) : new p(ja) } e ? e.call(a, this.source) : a.add(this._subscribe(a)); if (a.syncErrorThrowable && (a.syncErrorThrowable = !1, a.syncErrorThrown)) throw a.syncErrorValue; return a }; b.prototype.forEach = function (a, c) {
            var b = this; c || (r.Rx && r.Rx.config && r.Rx.config.Promise ? c = r.Rx.config.Promise :
            r.Promise && (c = r.Promise)); if (!c) throw Error("no Promise impl found"); return new c(function (c, e) { var d = b.subscribe(function (c) { if (d) try { a(c) } catch (B) { e(B), d.unsubscribe() } else a(c) }, e, c) })
        }; b.prototype._subscribe = function (a) { return this.source.subscribe(a) }; b.prototype[M] = function () { return this }; b.create = function (a) { return new b(a) }; return b
    }(), O = function (b) {
        function a() { var c = b.call(this, "object unsubscribed"); this.name = c.name = "ObjectUnsubscribedError"; this.stack = c.stack; this.message = c.message } __extends(a,
        b); return a
    }(Error), Oa = function (b) { function a(c, a) { b.call(this); this.subject = c; this.subscriber = a; this.closed = !1 } __extends(a, b); a.prototype.unsubscribe = function () { if (!this.closed) { this.closed = !0; var c = this.subject, a = c.observers; this.subject = null; !a || 0 === a.length || c.isStopped || c.closed || (c = a.indexOf(this.subscriber), -1 !== c && a.splice(c, 1)) } }; return a }(x), Pa = function (b) { function a(c) { b.call(this, c); this.destination = c } __extends(a, b); return a }(p), y = function (b) {
        function a() {
            b.call(this); this.observers = [];
            this.hasError = this.isStopped = this.closed = !1; this.thrownError = null
        } __extends(a, b); a.prototype[T] = function () { return new Pa(this) }; a.prototype.lift = function (c) { var a = new ca(this, this); a.operator = c; return a }; a.prototype.next = function (c) { if (this.closed) throw new O; if (!this.isStopped) for (var a = this.observers, b = a.length, a = a.slice(), f = 0; f < b; f++) a[f].next(c) }; a.prototype.error = function (c) {
            if (this.closed) throw new O; this.hasError = !0; this.thrownError = c; this.isStopped = !0; for (var a = this.observers, b = a.length, a =
            a.slice(), f = 0; f < b; f++) a[f].error(c); this.observers.length = 0
        }; a.prototype.complete = function () { if (this.closed) throw new O; this.isStopped = !0; for (var c = this.observers, a = c.length, c = c.slice(), b = 0; b < a; b++) c[b].complete(); this.observers.length = 0 }; a.prototype.unsubscribe = function () { this.closed = this.isStopped = !0; this.observers = null }; a.prototype._subscribe = function (c) {
            if (this.closed) throw new O; if (this.hasError) return c.error(this.thrownError), x.EMPTY; if (this.isStopped) return c.complete(), x.EMPTY; this.observers.push(c);
            return new Oa(this, c)
        }; a.prototype.asObservable = function () { var c = new g; c.source = this; return c }; a.create = function (c, a) { return new ca(c, a) }; return a
    }(g), ca = function (b) {
        function a(c, a) { b.call(this); this.destination = c; this.source = a } __extends(a, b); a.prototype.next = function (c) { var a = this.destination; a && a.next && a.next(c) }; a.prototype.error = function (c) { var a = this.destination; a && a.error && this.destination.error(c) }; a.prototype.complete = function () { var c = this.destination; c && c.complete && this.destination.complete() };
        a.prototype._subscribe = function (c) { return this.source ? this.source.subscribe(c) : x.EMPTY }; return a
    }(y), P = function (b) {
        function a() { b.apply(this, arguments); this.value = null; this.hasCompleted = this.hasNext = !1 } __extends(a, b); a.prototype._subscribe = function (c) { return this.hasCompleted && this.hasNext ? (c.next(this.value), c.complete(), x.EMPTY) : this.hasError ? (c.error(this.thrownError), x.EMPTY) : b.prototype._subscribe.call(this, c) }; a.prototype.next = function (c) { this.hasCompleted || (this.value = c, this.hasNext = !0) }; a.prototype.complete =
        function () { this.hasCompleted = !0; this.hasNext && b.prototype.next.call(this, this.value); b.prototype.complete.call(this) }; return a
    }(y), Qb = function (b) {
        function a(c, a, d, f) { b.call(this); this.callbackFunc = c; this.selector = a; this.args = d; this.scheduler = f } __extends(a, b); a.create = function (c, b, d) { void 0 === b && (b = void 0); return function () { for (var e = [], h = 0; h < arguments.length; h++) e[h - 0] = arguments[h]; return new a(c, b, e, d) } }; a.prototype._subscribe = function (c) {
            var b = this.callbackFunc, d = this.args, f = this.scheduler, h = this.subject;
            if (f) return f.schedule(a.dispatch, 0, { source: this, subscriber: c }); h || (h = this.subject = new P, f = function B() { for (var c = [], a = 0; a < arguments.length; a++) c[a - 0] = arguments[a]; var b = B.source, a = b.selector, b = b.subject; a ? (c = k(a).apply(this, c), c === n ? b.error(n.e) : (b.next(c), b.complete())) : (b.next(1 === c.length ? c[0] : c), b.complete()) }, f.source = this, k(b).apply(this, d.concat(f)) === n && h.error(n.e)); return h.subscribe(c)
        }; a.dispatch = function (c) {
            var a = this, b = c.source; c = c.subscriber; var f = b.callbackFunc, h = b.args, g = b.scheduler,
            B = b.subject; if (!B) { var B = b.subject = new P, l = function nb() { for (var c = [], b = 0; b < arguments.length; b++) c[b - 0] = arguments[b]; var e = nb.source, b = e.selector, e = e.subject; b ? (c = k(b).apply(this, c), c === n ? a.add(g.schedule(w, 0, { err: n.e, subject: e })) : a.add(g.schedule(E, 0, { value: c, subject: e }))) : a.add(g.schedule(E, 0, { value: 1 === c.length ? c[0] : c, subject: e })) }; l.source = b; k(f).apply(this, h.concat(l)) === n && B.error(n.e) } a.add(B.subscribe(c))
        }; return a
    }(g).create; g.bindCallback = Qb; var Rb = function (b) {
        function a(c, a, d, f) {
            b.call(this);
            this.callbackFunc = c; this.selector = a; this.args = d; this.scheduler = f
        } __extends(a, b); a.create = function (c, b, d) { void 0 === b && (b = void 0); return function () { for (var e = [], h = 0; h < arguments.length; h++) e[h - 0] = arguments[h]; return new a(c, b, e, d) } }; a.prototype._subscribe = function (c) {
            var a = this.callbackFunc, b = this.args, f = this.scheduler, h = this.subject; if (f) return f.schedule(A, 0, { source: this, subscriber: c }); h || (h = this.subject = new P, f = function B() {
                for (var c = [], a = 0; a < arguments.length; a++) c[a - 0] = arguments[a]; var b = B.source,
                a = b.selector, b = b.subject, e = c.shift(); e ? b.error(e) : a ? (c = k(a).apply(this, c), c === n ? b.error(n.e) : (b.next(c), b.complete())) : (b.next(1 === c.length ? c[0] : c), b.complete())
            }, f.source = this, k(a).apply(this, b.concat(f)) === n && h.error(n.e)); return h.subscribe(c)
        }; return a
    }(g).create; g.bindNodeCallback = Rb; var la = function (b) {
        function a(c, a) { b.call(this); this.value = c; this.scheduler = a; this._isScalar = !0; a && (this._isScalar = !1) } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.dispatch = function (c) {
            var a = c.value,
            b = c.subscriber; c.done ? b.complete() : (b.next(a), b.closed || (c.done = !0, this.schedule(c)))
        }; a.prototype._subscribe = function (c) { var b = this.value, d = this.scheduler; if (d) return d.schedule(a.dispatch, 0, { done: !1, value: b, subscriber: c }); c.next(b); c.closed || c.complete() }; return a
    }(g), L = function (b) {
        function a(c) { b.call(this); this.scheduler = c } __extends(a, b); a.create = function (c) { return new a(c) }; a.dispatch = function (c) { c.subscriber.complete() }; a.prototype._subscribe = function (c) {
            var b = this.scheduler; if (b) return b.schedule(a.dispatch,
            0, { subscriber: c }); c.complete()
        }; return a
    }(g), K = function (b) {
        function a(c, a) { b.call(this); this.array = c; this.scheduler = a; a || 1 !== c.length || (this._isScalar = !0, this.value = c[0]) } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.of = function () { for (var c = [], b = 0; b < arguments.length; b++) c[b - 0] = arguments[b]; b = c[c.length - 1]; G(b) ? c.pop() : b = null; var d = c.length; return 1 < d ? new a(c, b) : 1 === d ? new la(c[0], b) : new L(b) }; a.dispatch = function (c) {
            var a = c.array, b = c.index, f = c.subscriber; b >= c.count ? f.complete() : (f.next(a[b]),
            f.closed || (c.index = b + 1, this.schedule(c)))
        }; a.prototype._subscribe = function (c) { var b = this.array, d = b.length, f = this.scheduler; if (f) return f.schedule(a.dispatch, 0, { array: b, index: 0, count: d, subscriber: c }); for (f = 0; f < d && !c.closed; f++) c.next(b[f]); c.complete() }; return a
    }(g), t = function (b) {
        function a() { b.apply(this, arguments) } __extends(a, b); a.prototype.notifyNext = function (c, a, b, f, h) { this.destination.next(a) }; a.prototype.notifyError = function (c, a) { this.destination.error(c) }; a.prototype.notifyComplete = function (c) { this.destination.complete() };
        return a
    }(p), I = function (b) { var a = b.Symbol; if ("function" === typeof a) return a.iterator || (a.iterator = a("iterator polyfill")), a.iterator; if ((a = b.Set) && "function" === typeof (new a)["@@iterator"]) return "@@iterator"; if (b = b.Map) for (var a = Object.getOwnPropertyNames(b.prototype), c = 0; c < a.length; ++c) { var e = a[c]; if ("entries" !== e && "size" !== e && b.prototype[e] === b.prototype.entries) return e } return "@@iterator" }(r), ra = function (b) {
        function a(c, a, d) {
            b.call(this); this.parent = c; this.outerValue = a; this.outerIndex = d; this.index =
            0
        } __extends(a, b); a.prototype._next = function (c) { this.parent.notifyNext(this.outerValue, c, this.outerIndex, this.index++, this) }; a.prototype._error = function (c) { this.parent.notifyError(c, this); this.unsubscribe() }; a.prototype._complete = function () { this.parent.notifyComplete(this); this.unsubscribe() }; return a
    }(p), Qa = {}, ma = function () { function b(a) { this.project = a } b.prototype.call = function (a, c) { return c.subscribe(new Sb(a, this.project)) }; return b }(), Sb = function (b) {
        function a(c, a) {
            b.call(this, c); this.project =
            a; this.active = 0; this.values = []; this.observables = []
        } __extends(a, b); a.prototype._next = function (c) { this.values.push(Qa); this.observables.push(c) }; a.prototype._complete = function () { var c = this.observables, a = c.length; if (0 === a) this.destination.complete(); else { this.toRespond = this.active = a; for (var b = 0; b < a; b++) { var f = c[b]; this.add(q(this, f, f, b)) } } }; a.prototype.notifyComplete = function (c) { 0 === --this.active && this.destination.complete() }; a.prototype.notifyNext = function (c, a, b, f, h) {
            c = this.values; f = c[b]; f = this.toRespond ?
            f === Qa ? --this.toRespond : this.toRespond : 0; c[b] = a; 0 === f && (this.project ? this._tryProject(c) : this.destination.next(c.slice()))
        }; a.prototype._tryProject = function (c) { var a; try { a = this.project.apply(this, c) } catch (d) { this.destination.error(d); return } this.destination.next(a) }; return a
    }(t); g.combineLatest = function () {
        for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; var c = a = null; G(b[b.length - 1]) && (c = b.pop()); "function" === typeof b[b.length - 1] && (a = b.pop()); 1 === b.length && H(b[0]) && (b = b[0]); return (new K(b,
        c)).lift(new ma(a))
    }; var aa = function () { function b(a) { this.concurrent = a } b.prototype.call = function (a, c) { return c.subscribe(new Tb(a, this.concurrent)) }; return b }(), Tb = function (b) {
        function a(c, a) { b.call(this, c); this.concurrent = a; this.hasCompleted = !1; this.buffer = []; this.active = 0 } __extends(a, b); a.prototype._next = function (c) { this.active < this.concurrent ? (this.active++, this.add(q(this, c))) : this.buffer.push(c) }; a.prototype._complete = function () { this.hasCompleted = !0; 0 === this.active && 0 === this.buffer.length && this.destination.complete() };
        a.prototype.notifyComplete = function (c) { var a = this.buffer; this.remove(c); this.active--; 0 < a.length ? this._next(a.shift()) : 0 === this.active && this.hasCompleted && this.destination.complete() }; return a
    }(t); g.concat = S; var Vb = function (b) { function a(c) { b.call(this); this.observableFactory = c } __extends(a, b); a.create = function (c) { return new a(c) }; a.prototype._subscribe = function (c) { return new Ub(c, this.observableFactory) }; return a }(g), Ub = function (b) {
        function a(c, a) { b.call(this, c); this.factory = a; this.tryDefer() } __extends(a,
        b); a.prototype.tryDefer = function () { try { this._callFactory() } catch (c) { this._error(c) } }; a.prototype._callFactory = function () { var c = this.factory(); c && this.add(q(this, c)) }; return a
    }(t); g.defer = Vb.create; g.empty = L.create; var Xb = function (b) {
        function a(c, a) { b.call(this); this.sources = c; this.resultSelector = a } __extends(a, b); a.create = function () {
            for (var c = [], b = 0; b < arguments.length; b++) c[b - 0] = arguments[b]; if (null === c || 0 === arguments.length) return new L; b = null; "function" === typeof c[c.length - 1] && (b = c.pop()); 1 === c.length &&
            H(c[0]) && (c = c[0]); return 0 === c.length ? new L : new a(c, b)
        }; a.prototype._subscribe = function (c) { return new Wb(c, this.sources, this.resultSelector) }; return a
    }(g), Wb = function (b) {
        function a(c, a, d) { b.call(this, c); this.sources = a; this.resultSelector = d; this.haveValues = this.completed = 0; this.total = c = a.length; this.values = Array(c); for (d = 0; d < c; d++) { var e = q(this, a[d], null, d); e && (e.outerIndex = d, this.add(e)) } } __extends(a, b); a.prototype.notifyNext = function (c, a, b, f, h) { this.values[b] = a; h._hasValue || (h._hasValue = !0, this.haveValues++) };
        a.prototype.notifyComplete = function (c) { var a = this.destination, b = this.haveValues, f = this.resultSelector, h = this.values, g = h.length; c._hasValue ? (this.completed++, this.completed === g && (b === g && (c = f ? f.apply(this, h) : h, a.next(c)), a.complete())) : a.complete() }; return a
    }(t); g.forkJoin = Xb.create; var Ra = function (b) {
        function a(c, a) { b.call(this); this.promise = c; this.scheduler = a } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.prototype._subscribe = function (c) {
            var a = this, b = this.promise, f = this.scheduler; if (null ==
            f) this._isScalar ? c.closed || (c.next(this.value), c.complete()) : b.then(function (b) { a.value = b; a._isScalar = !0; c.closed || (c.next(b), c.complete()) }, function (a) { c.closed || c.error(a) }).then(null, function (c) { r.setTimeout(function () { throw c; }) }); else if (this._isScalar) { if (!c.closed) return f.schedule(sa, 0, { value: this.value, subscriber: c }) } else b.then(function (b) { a.value = b; a._isScalar = !0; c.closed || c.add(f.schedule(sa, 0, { value: b, subscriber: c })) }, function (a) { c.closed || c.add(f.schedule(ob, 0, { err: a, subscriber: c })) }).then(null,
            function (c) { r.setTimeout(function () { throw c; }) })
        }; return a
    }(g), $b = function (b) {
        function a(c, a) { b.call(this); this.scheduler = a; if (null == c) throw Error("iterator cannot be null."); if ((a = c[I]) || "string" !== typeof c) if (a || void 0 === c.length) { if (!a) throw new TypeError("object is not iterable"); c = c[I]() } else c = new Yb(c); else c = new Zb(c); this.iterator = c } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.dispatch = function (c) {
            var a = c.index, b = c.iterator, f = c.subscriber; if (c.hasError) f.error(c.error); else {
                var h =
                b.next(); h.done ? f.complete() : (f.next(h.value), c.index = a + 1, f.closed ? "function" === typeof b.return && b.return() : this.schedule(c))
            }
        }; a.prototype._subscribe = function (c) { var b = this.iterator, d = this.scheduler; if (d) return d.schedule(a.dispatch, 0, { index: 0, iterator: b, subscriber: c }); do { d = b.next(); if (d.done) { c.complete(); break } else c.next(d.value); if (c.closed) { "function" === typeof b.return && b.return(); break } } while (1) }; return a
    }(g), Zb = function () {
        function b(a, c, b) {
            void 0 === c && (c = 0); void 0 === b && (b = a.length); this.str =
            a; this.idx = c; this.len = b
        } b.prototype[I] = function () { return this }; b.prototype.next = function () { return this.idx < this.len ? { done: !1, value: this.str.charAt(this.idx++) } : { done: !0, value: void 0 } }; return b
    }(), Yb = function () {
        function b(a, c, b) { void 0 === c && (c = 0); if (void 0 === b) if (b = +a.length, isNaN(b)) b = 0; else if (0 !== b && "number" === typeof b && r.isFinite(b)) { var e; e = +b; e = 0 === e ? e : isNaN(e) ? e : 0 > e ? -1 : 1; b = e * Math.floor(Math.abs(b)); b = 0 >= b ? 0 : b > Sa ? Sa : b } this.arr = a; this.idx = c; this.len = b } b.prototype[I] = function () { return this }; b.prototype.next =
        function () { return this.idx < this.len ? { done: !1, value: this.arr[this.idx++] } : { done: !0, value: void 0 } }; return b
    }(), Sa = Math.pow(2, 53) - 1, ac = function (b) {
        function a(c, a) { b.call(this); this.arrayLike = c; this.scheduler = a; a || 1 !== c.length || (this._isScalar = !0, this.value = c[0]) } __extends(a, b); a.create = function (c, b) { var e = c.length; return 0 === e ? new L : 1 === e ? new la(c[0], b) : new a(c, b) }; a.dispatch = function (c) { var a = c.arrayLike, b = c.index, f = c.subscriber; f.closed || (b >= c.length ? f.complete() : (f.next(a[b]), c.index = b + 1, this.schedule(c))) };
        a.prototype._subscribe = function (c) { var b = this.arrayLike, d = this.scheduler, f = b.length; if (d) return d.schedule(a.dispatch, 0, { arrayLike: b, index: 0, length: f, subscriber: c }); for (d = 0; d < f && !c.closed; d++) c.next(b[d]); c.complete() }; return a
    }(g), z = function () {
        function b(a, c, b) { this.kind = a; this.value = c; this.error = b; this.hasValue = "N" === a } b.prototype.observe = function (a) { switch (this.kind) { case "N": return a.next && a.next(this.value); case "E": return a.error && a.error(this.error); case "C": return a.complete && a.complete() } };
        b.prototype.do = function (a, c, b) { switch (this.kind) { case "N": return a && a(this.value); case "E": return c && c(this.error); case "C": return b && b() } }; b.prototype.accept = function (a, c, b) { return a && "function" === typeof a.next ? this.observe(a) : this.do(a, c, b) }; b.prototype.toObservable = function () { switch (this.kind) { case "N": return g.of(this.value); case "E": return g.throw(this.error); case "C": return g.empty() } throw Error("unexpected notification kind value"); }; b.createNext = function (a) {
            return "undefined" !== typeof a ? new b("N",
            a) : this.undefinedValueNotification
        }; b.createError = function (a) { return new b("E", void 0, a) }; b.createComplete = function () { return this.completeNotification }; b.completeNotification = new b("C"); b.undefinedValueNotification = new b("N", void 0); return b
    }(), bc = function () { function b(a, c) { void 0 === c && (c = 0); this.scheduler = a; this.delay = c } b.prototype.call = function (a, c) { return c.subscribe(new na(a, this.scheduler, this.delay)) }; return b }(), na = function (b) {
        function a(c, a, d) {
            void 0 === d && (d = 0); b.call(this, c); this.scheduler =
            a; this.delay = d
        } __extends(a, b); a.dispatch = function (c) { c.notification.observe(c.destination) }; a.prototype.scheduleMessage = function (c) { this.add(this.scheduler.schedule(a.dispatch, this.delay, new cc(c, this.destination))) }; a.prototype._next = function (c) { this.scheduleMessage(z.createNext(c)) }; a.prototype._error = function (c) { this.scheduleMessage(z.createError(c)) }; a.prototype._complete = function () { this.scheduleMessage(z.createComplete()) }; return a
    }(p), cc = function () {
        return function (b, a) {
            this.notification = b; this.destination =
            a
        }
    }(), Ta = function (b) {
        function a(c, a) { b.call(this, null); this.ish = c; this.scheduler = a } __extends(a, b); a.create = function (c, b) { if (null != c) { if ("function" === typeof c[M]) return c instanceof g && !b ? c : new a(c, b); if (H(c)) return new K(c, b); if (Z(c)) return new Ra(c, b); if ("function" === typeof c[I] || "string" === typeof c) return new $b(c, b); if (c && "number" === typeof c.length) return new ac(c, b) } throw new TypeError((null !== c && typeof c || c) + " is not observable"); }; a.prototype._subscribe = function (c) {
            var a = this.ish, b = this.scheduler;
            return null == b ? a[M]().subscribe(c) : a[M]().subscribe(new na(c, b, 0))
        }; return a
    }(g); g.from = Ta.create; var Ua = Object.prototype.toString, dc = function (b) {
        function a(c, a, d, f) { b.call(this); this.sourceObj = c; this.eventName = a; this.selector = d; this.options = f } __extends(a, b); a.create = function (c, b, d, f) { m(d) && (f = d, d = void 0); return new a(c, b, f, d) }; a.setupSubscription = function (c, b, d, f, h) {
            var e; if (c && "[object NodeList]" === Ua.call(c) || c && "[object HTMLCollection]" === Ua.call(c)) for (var g = 0, k = c.length; g < k; g++) a.setupSubscription(c[g],
            b, d, f, h); else if (c && "function" === typeof c.addEventListener && "function" === typeof c.removeEventListener) c.addEventListener(b, d, h), e = function () { return c.removeEventListener(b, d) }; else if (c && "function" === typeof c.on && "function" === typeof c.off) c.on(b, d), e = function () { return c.off(b, d) }; else if (c && "function" === typeof c.addListener && "function" === typeof c.removeListener) c.addListener(b, d), e = function () { return c.removeListener(b, d) }; else throw new TypeError("Invalid event target"); f.add(new x(e))
        }; a.prototype._subscribe =
        function (c) { var b = this.selector; a.setupSubscription(this.sourceObj, this.eventName, b ? function () { for (var a = [], e = 0; e < arguments.length; e++) a[e - 0] = arguments[e]; a = k(b).apply(void 0, a); a === n ? c.error(n.e) : c.next(a) } : function (a) { return c.next(a) }, c, this.options) }; return a
    }(g).create; g.fromEvent = dc; var ec = function (b) {
        function a(c, a, d) { b.call(this); this.addHandler = c; this.removeHandler = a; this.selector = d } __extends(a, b); a.create = function (c, b, d) { return new a(c, b, d) }; a.prototype._subscribe = function (c) {
            var a = this,
            b = this.removeHandler, f = this.selector ? function () { for (var b = [], e = 0; e < arguments.length; e++) b[e - 0] = arguments[e]; a._callSelector(c, b) } : function (a) { c.next(a) }; this._callAddHandler(f, c); c.add(new x(function () { b(f) }))
        }; a.prototype._callSelector = function (c, a) { try { var b = this.selector.apply(this, a); c.next(b) } catch (f) { c.error(f) } }; a.prototype._callAddHandler = function (c, a) { try { this.addHandler(c) } catch (d) { a.error(d) } }; return a
    }(g).create; g.fromEventPattern = ec; g.fromPromise = Ra.create; var Va = function (b) { return b },
    fc = function (b) {
        function a(c, a, d, f, h) { b.call(this); this.initialState = c; this.condition = a; this.iterate = d; this.resultSelector = f; this.scheduler = h } __extends(a, b); a.create = function (c, b, d, f, h) { return 1 == arguments.length ? new a(c.initialState, c.condition, c.iterate, c.resultSelector || Va, c.scheduler) : void 0 === f || G(f) ? new a(c, b, d, Va, f) : new a(c, b, d, f, h) }; a.prototype._subscribe = function (c) {
            var b = this.initialState; if (this.scheduler) return this.scheduler.schedule(a.dispatch, 0, {
                subscriber: c, iterate: this.iterate, condition: this.condition,
                resultSelector: this.resultSelector, state: b
            }); var d = this.condition, f = this.resultSelector, h = this.iterate; do { if (d) { var g = void 0; try { g = d(b) } catch (B) { c.error(B); break } if (!g) { c.complete(); break } } g = void 0; try { g = f(b) } catch (B) { c.error(B); break } c.next(g); if (c.closed) break; try { b = h(b) } catch (B) { c.error(B); break } } while (1)
        }; a.dispatch = function (c) {
            var a = c.subscriber, b = c.condition; if (!a.closed) {
                if (c.needIterate) try { c.state = c.iterate(c.state) } catch (D) { a.error(D); return } else c.needIterate = !0; if (b) {
                    var f = void 0; try {
                        f =
                        b(c.state)
                    } catch (D) { a.error(D); return } if (!f) { a.complete(); return } if (a.closed) return
                } var h; try { h = c.resultSelector(c.state) } catch (D) { a.error(D); return } if (!a.closed && (a.next(h), !a.closed)) return this.schedule(c)
            }
        }; return a
    }(g); g.generate = fc.create; var hc = function (b) {
        function a(c, a, d) { b.call(this); this.condition = c; this.thenSource = a; this.elseSource = d } __extends(a, b); a.create = function (c, b, d) { return new a(c, b, d) }; a.prototype._subscribe = function (c) { return new gc(c, this.condition, this.thenSource, this.elseSource) };
        return a
    }(g), gc = function (b) { function a(c, a, d, f) { b.call(this, c); this.condition = a; this.thenSource = d; this.elseSource = f; this.tryIf() } __extends(a, b); a.prototype.tryIf = function () { var c = this.condition, a = this.thenSource, b = this.elseSource, f; try { (c = (f = c()) ? a : b) ? this.add(q(this, c)) : this._complete() } catch (h) { this._error(h) } }; return a }(t); g.if = hc.create; var U = function (b) {
        function a(c, a) { b.call(this, c, a); this.scheduler = c; this.work = a; this.pending = !1 } __extends(a, b); a.prototype.schedule = function (c, a) {
            void 0 === a &&
            (a = 0); if (this.closed) return this; this.state = c; this.pending = !0; c = this.id; var b = this.scheduler; null != c && (this.id = this.recycleAsyncId(b, c, a)); this.delay = a; this.id = this.id || this.requestAsyncId(b, this.id, a); return this
        }; a.prototype.requestAsyncId = function (c, a, b) { void 0 === b && (b = 0); return r.setInterval(c.flush.bind(c, this), b) }; a.prototype.recycleAsyncId = function (c, a, b) { void 0 === b && (b = 0); return null !== b && this.delay === b ? a : (r.clearInterval(a), void 0) }; a.prototype.execute = function (c, a) {
            if (this.closed) return Error("executing a cancelled action");
            this.pending = !1; if (c = this._execute(c, a)) return c; !1 === this.pending && null != this.id && (this.id = this.recycleAsyncId(this.scheduler, this.id, null))
        }; a.prototype._execute = function (c, a) { a = !1; var b = void 0; try { this.work(c) } catch (f) { a = !0, b = !!f && f || Error(f) } if (a) return this.unsubscribe(), b }; a.prototype._unsubscribe = function () {
            var c = this.id, a = this.scheduler, b = a.actions, f = b.indexOf(this); this.state = this.delay = this.work = null; this.pending = !1; this.scheduler = null; -1 !== f && b.splice(f, 1); null != c && (this.id = this.recycleAsyncId(a,
            c, null))
        }; return a
    }(function (b) { function a(c, a) { b.call(this) } __extends(a, b); a.prototype.schedule = function (c, a) { return this }; return a }(x)), V = function (b) { function a() { b.apply(this, arguments); this.actions = []; this.active = !1; this.scheduled = void 0 } __extends(a, b); a.prototype.flush = function (c) { var a = this.actions; if (this.active) a.push(c); else { var b; this.active = !0; do if (b = c.execute(c.state, c.delay)) break; while (c = a.shift()); this.active = !1; if (b) { for (; c = a.shift() ;) c.unsubscribe(); throw b; } } }; return a }(function () {
        function b(a,
        c) { void 0 === c && (c = b.now); this.SchedulerAction = a; this.now = c } b.prototype.schedule = function (a, c, b) { void 0 === c && (c = 0); return (new this.SchedulerAction(this, a)).schedule(b, c) }; b.now = Date.now ? Date.now : function () { return +new Date }; return b
    }()), C = new V(U), ic = function (b) {
        function a(c, a) { void 0 === c && (c = 0); void 0 === a && (a = C); b.call(this); this.period = c; this.scheduler = a; if (!ga(c) || 0 > c) this.period = 0; a && "function" === typeof a.schedule || (this.scheduler = C) } __extends(a, b); a.create = function (c, b) {
            void 0 === c && (c = 0); void 0 ===
            b && (b = C); return new a(c, b)
        }; a.dispatch = function (c) { var a = c.subscriber, b = c.period; a.next(c.index); a.closed || (c.index += 1, this.schedule(c, b)) }; a.prototype._subscribe = function (c) { var b = this.period; c.add(this.scheduler.schedule(a.dispatch, b, { index: 0, subscriber: c, period: b })) }; return a
    }(g).create; g.interval = ic; g.merge = ta; var pb = function () { function b() { } b.prototype.call = function (a, c) { return c.subscribe(new jc(a)) }; return b }(), jc = function (b) {
        function a(c) {
            b.call(this, c); this.hasFirst = !1; this.observables = [];
            this.subscriptions = []
        } __extends(a, b); a.prototype._next = function (c) { this.observables.push(c) }; a.prototype._complete = function () { var c = this.observables, a = c.length; if (0 === a) this.destination.complete(); else { for (var b = 0; b < a && !this.hasFirst; b++) { var f = c[b], f = q(this, f, f, b); this.subscriptions && this.subscriptions.push(f); this.add(f) } this.observables = null } }; a.prototype.notifyNext = function (c, a, b, f, h) {
            if (!this.hasFirst) {
                this.hasFirst = !0; for (c = 0; c < this.subscriptions.length; c++) c !== b && (f = this.subscriptions[c], f.unsubscribe(),
                this.remove(f)); this.subscriptions = null
            } this.destination.next(a)
        }; return a
    }(t); g.race = ua; var kc = function (b) { function a() { b.call(this) } __extends(a, b); a.create = function () { return new a }; a.prototype._subscribe = function (c) { }; return a }(g).create; g.never = kc; g.of = K.of; var Wa = function () { function b(a) { this.nextSources = a } b.prototype.call = function (a, c) { return c.subscribe(new lc(a, this.nextSources)) }; return b }(), lc = function (b) {
        function a(c, a) { b.call(this, c); this.destination = c; this.nextSources = a } __extends(a, b);
        a.prototype.notifyError = function (c, a) { this.subscribeToNextSource() }; a.prototype.notifyComplete = function (c) { this.subscribeToNextSource() }; a.prototype._error = function (c) { this.subscribeToNextSource() }; a.prototype._complete = function () { this.subscribeToNextSource() }; a.prototype.subscribeToNextSource = function () { var c = this.nextSources.shift(); c ? this.add(q(this, c)) : this.destination.complete() }; return a
    }(t); g.onErrorResumeNext = function () {
        for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; 1 === b.length &&
        H(b[0]) && (b = b[0]); a = b.shift(); return (new Ta(a, null)).lift(new Wa(b))
    }; var mc = function (b) { function a(c, a) { b.call(this); this.obj = c; this.scheduler = a; this.keys = Object.keys(c) } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.prototype._subscribe = function (c) { var a = this.keys, b = this.scheduler, f = a.length; if (b) return b.schedule(qb, 0, { obj: this.obj, keys: a, length: f, index: 0, subscriber: c }); for (b = 0; b < f; b++) { var h = a[b]; c.next([h, this.obj[h]]) } c.complete() }; return a }(g).create; g.pairs = mc; var nc = function (b) {
        function a(c,
        a, d) { b.call(this); this.start = c; this._count = a; this.scheduler = d } __extends(a, b); a.create = function (c, b, d) { void 0 === c && (c = 0); void 0 === b && (b = 0); return new a(c, b, d) }; a.dispatch = function (c) { var a = c.start, b = c.index, f = c.subscriber; b >= c.count ? f.complete() : (f.next(a), f.closed || (c.index = b + 1, c.start = a + 1, this.schedule(c))) }; a.prototype._subscribe = function (c) {
            var b = 0, d = this.start, f = this._count, h = this.scheduler; if (h) return h.schedule(a.dispatch, 0, { index: b, count: f, start: d, subscriber: c }); do {
                if (b++ >= f) {
                    c.complete();
                    break
                } c.next(d++); if (c.closed) break
            } while (1)
        }; return a
    }(g).create; g.range = nc; var pc = function (b) { function a(c, a) { b.call(this); this.resourceFactory = c; this.observableFactory = a } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.prototype._subscribe = function (c) { var a = this.resourceFactory, b = this.observableFactory, f; try { return f = a(), new oc(c, f, b) } catch (h) { c.error(h) } }; return a }(g), oc = function (b) {
        function a(c, a, d) { b.call(this, c); this.resource = a; this.observableFactory = d; c.add(a); this.tryUse() } __extends(a,
        b); a.prototype.tryUse = function () { try { var c = this.observableFactory.call(this, this.resource); c && this.add(q(this, c)) } catch (e) { this._error(e) } }; return a
    }(t); g.using = pc.create; var qc = function (b) { function a(c, a) { b.call(this); this.error = c; this.scheduler = a } __extends(a, b); a.create = function (c, b) { return new a(c, b) }; a.dispatch = function (c) { c.subscriber.error(c.error) }; a.prototype._subscribe = function (c) { var b = this.error, d = this.scheduler; if (d) return d.schedule(a.dispatch, 0, { error: b, subscriber: c }); c.error(b) }; return a }(g).create;
    g.throw = qc; var rc = function (b) {
        function a(c, a, d) { void 0 === c && (c = 0); b.call(this); this.period = -1; this.dueTime = 0; ga(a) ? this.period = 1 > Number(a) && 1 || Number(a) : G(a) && (d = a); G(d) || (d = C); this.scheduler = d; this.dueTime = ba(c) ? +c - this.scheduler.now() : c } __extends(a, b); a.create = function (c, b, d) { void 0 === c && (c = 0); return new a(c, b, d) }; a.dispatch = function (c) { var a = c.index, b = c.period, f = c.subscriber; f.next(a); if (!f.closed) { if (-1 === b) return f.complete(); c.index = a + 1; this.schedule(c, b) } }; a.prototype._subscribe = function (c) {
            return this.scheduler.schedule(a.dispatch,
            this.dueTime, { index: 0, period: this.period, subscriber: c })
        }; return a
    }(g).create; g.timer = rc; var wa = function () { function b(a) { this.project = a } b.prototype.call = function (a, c) { return c.subscribe(new sc(a, this.project)) }; return b }(), sc = function (b) {
        function a(c, a, d) { void 0 === d && (d = Object.create(null)); b.call(this, c); this.iterators = []; this.active = 0; this.project = "function" === typeof a ? a : null; this.values = d } __extends(a, b); a.prototype._next = function (c) {
            var a = this.iterators; H(c) ? a.push(new tc(c)) : "function" === typeof c[I] ?
            a.push(new uc(c[I]())) : a.push(new vc(this.destination, this, c))
        }; a.prototype._complete = function () { var c = this.iterators, a = c.length; this.active = a; for (var b = 0; b < a; b++) { var f = c[b]; f.stillUnsubscribed ? this.add(f.subscribe(f, b)) : this.active-- } }; a.prototype.notifyInactive = function () { this.active--; 0 === this.active && this.destination.complete() }; a.prototype.checkIterators = function () {
            for (var c = this.iterators, a = c.length, b = this.destination, f = 0; f < a; f++) { var h = c[f]; if ("function" === typeof h.hasValue && !h.hasValue()) return } for (var g =
            !1, k = [], f = 0; f < a; f++) { var h = c[f], l = h.next(); h.hasCompleted() && (g = !0); if (l.done) { b.complete(); return } k.push(l.value) } this.project ? this._tryProject(k) : b.next(k); g && b.complete()
        }; a.prototype._tryProject = function (c) { var a; try { a = this.project.apply(this, c) } catch (d) { this.destination.error(d); return } this.destination.next(a) }; return a
    }(p), uc = function () {
        function b(a) { this.iterator = a; this.nextResult = a.next() } b.prototype.hasValue = function () { return !0 }; b.prototype.next = function () {
            var a = this.nextResult; this.nextResult =
            this.iterator.next(); return a
        }; b.prototype.hasCompleted = function () { var a = this.nextResult; return a && a.done }; return b
    }(), tc = function () {
        function b(a) { this.array = a; this.length = this.index = 0; this.length = a.length } b.prototype[I] = function () { return this }; b.prototype.next = function (a) { a = this.index++; var c = this.array; return a < this.length ? { value: c[a], done: !1 } : { value: null, done: !0 } }; b.prototype.hasValue = function () { return this.array.length > this.index }; b.prototype.hasCompleted = function () {
            return this.array.length ===
            this.index
        }; return b
    }(), vc = function (b) {
        function a(c, a, d) { b.call(this, c); this.parent = a; this.observable = d; this.stillUnsubscribed = !0; this.buffer = []; this.isComplete = !1 } __extends(a, b); a.prototype[I] = function () { return this }; a.prototype.next = function () { var c = this.buffer; return 0 === c.length && this.isComplete ? { value: null, done: !0 } : { value: c.shift(), done: !1 } }; a.prototype.hasValue = function () { return 0 < this.buffer.length }; a.prototype.hasCompleted = function () { return 0 === this.buffer.length && this.isComplete }; a.prototype.notifyComplete =
        function () { 0 < this.buffer.length ? (this.isComplete = !0, this.parent.notifyInactive()) : this.destination.complete() }; a.prototype.notifyNext = function (c, a, b, f, h) { this.buffer.push(a); this.parent.checkIterators() }; a.prototype.subscribe = function (c, a) { return q(this, this.observable, this, a) }; return a
    }(t); g.zip = va; var ya = function () { function b(a, c) { this.project = a; this.thisArg = c } b.prototype.call = function (a, c) { return c.subscribe(new wc(a, this.project, this.thisArg)) }; return b }(), wc = function (b) {
        function a(c, a, d) {
            b.call(this,
            c); this.project = a; this.count = 0; this.thisArg = d || this
        } __extends(a, b); a.prototype._next = function (c) { var a; try { a = this.project.call(this.thisArg, c, this.count++) } catch (d) { this.destination.error(d); return } this.destination.next(a) }; return a
    }(p), Q = function (b) {
        function a(c) {
            b.call(this); var a = {
                async: !0, createXHR: function () {
                    var c; if (this.crossDomain) if (r.XMLHttpRequest) c = new r.XMLHttpRequest, "withCredentials" in c && (c.withCredentials = !!this.withCredentials); else if (r.XDomainRequest) c = new r.XDomainRequest; else throw Error("CORS is not supported by your browser");
                    else if (r.XMLHttpRequest) c = new r.XMLHttpRequest; else { var a = void 0; try { for (var b = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0"], e = 0; 3 > e; e++) try { a = b[e]; new r.ActiveXObject(a); break } catch (J) { } c = new r.ActiveXObject(a) } catch (J) { throw Error("XMLHttpRequest is not supported by your browser"); } } return c
                }, crossDomain: !1, withCredentials: !1, headers: {}, method: "GET", responseType: "json", timeout: 0
            }; if ("string" === typeof c) a.url = c; else for (var d in c) c.hasOwnProperty(d) && (a[d] = c[d]); this.request = a
        } __extends(a,
        b); a.prototype._subscribe = function (c) { return new xc(c, this.request) }; a.create = function () { var c = function (c) { return new a(c) }; c.get = rb; c.post = sb; c.delete = tb; c.put = ub; c.getJSON = vb; return c }(); return a
    }(g), xc = function (b) {
        function a(c, a) {
            b.call(this, c); this.request = a; this.done = !1; c = a.headers = a.headers || {}; a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest"); "Content-Type" in c || r.FormData && a.body instanceof r.FormData || "undefined" === typeof a.body || (c["Content-Type"] = "application/x-www-form-urlencoded; charset\x3dUTF-8");
            a.body = this.serializeBody(a.body, a.headers["Content-Type"]); this.send()
        } __extends(a, b); a.prototype.next = function (c) { this.done = !0; var a = this.destination; c = new Xa(c, this.xhr, this.request); a.next(c) }; a.prototype.send = function () {
            var c = this.request, a = this.request, b = a.user, f = a.method, h = a.url, g = a.async, l = a.password, p = a.headers, a = a.body, m = k(c.createXHR).call(c); if (m === n) this.error(n.e); else {
                this.xhr = m; b = b ? k(m.open).call(m, f, h, g, b, l) : k(m.open).call(m, f, h, g); if (b === n) return this.error(n.e), null; m.timeout = c.timeout;
                m.responseType = c.responseType; this.setHeaders(m, p); this.setupEvents(m, c); b = a ? k(m.send).call(m, a) : k(m.send).call(m); if (b === n) return this.error(n.e), null
            } return m
        }; a.prototype.serializeBody = function (c, a) {
            if (!c || "string" === typeof c || r.FormData && c instanceof r.FormData) return c; if (a) { var b = a.indexOf(";"); -1 !== b && (a = a.substring(0, b)) } switch (a) {
                case "application/x-www-form-urlencoded": return Object.keys(c).map(function (a) { return encodeURI(a) + "\x3d" + encodeURI(c[a]) }).join("\x26"); case "application/json": return JSON.stringify(c);
                default: return c
            }
        }; a.prototype.setHeaders = function (c, a) { for (var b in a) a.hasOwnProperty(b) && c.setRequestHeader(b, a[b]) }; a.prototype.setupEvents = function (c, a) {
            function b(c) { var a = b.subscriber, e = b.progressSubscriber, d = b.request; e && e.error(c); a.error(new Ya(this, d)) } function e(c) {
                var a = e.subscriber, b = e.progressSubscriber, d = e.request; if (4 === this.readyState) {
                    var f = 1223 === this.status ? 204 : this.status, h = "text" === this.responseType ? this.response || this.responseText : this.response; 0 === f && (f = h ? 200 : 0); 200 <= f && 300 >
                    f ? (b && b.complete(), a.next(c), a.complete()) : (b && b.error(c), a.error(new da("ajax error " + f, this, d)))
                }
            } var h = a.progressSubscriber; c.ontimeout = b; b.request = a; b.subscriber = this; b.progressSubscriber = h; if (c.upload && "withCredentials" in c && r.XDomainRequest) {
                if (h) { var g; g = function (c) { g.progressSubscriber.next(c) }; c.onprogress = g; g.progressSubscriber = h } var k; k = function (c) { var a = k.progressSubscriber, b = k.subscriber, e = k.request; a && a.error(c); b.error(new da("ajax error", this, e)) }; c.onerror = k; k.request = a; k.subscriber =
                this; k.progressSubscriber = h
            } c.onreadystatechange = e; e.subscriber = this; e.progressSubscriber = h; e.request = a
        }; a.prototype.unsubscribe = function () { var c = this.xhr; !this.done && c && 4 !== c.readyState && "function" === typeof c.abort && c.abort(); b.prototype.unsubscribe.call(this) }; return a
    }(p), Xa = function () {
        return function (b, a, c) {
            this.originalEvent = b; this.xhr = a; this.request = c; this.status = a.status; this.responseType = a.responseType || c.responseType; switch (this.responseType) {
                case "json": this.response = "response" in a ? a.responseType ?
                a.response : JSON.parse(a.response || a.responseText || "null") : JSON.parse(a.responseText || "null"); break; case "xml": this.response = a.responseXML; break; default: this.response = "response" in a ? a.response : a.responseText
            }
        }
    }(), da = function (b) { function a(c, a, d) { b.call(this, c); this.message = c; this.xhr = a; this.request = d; this.status = a.status } __extends(a, b); return a }(Error), Ya = function (b) { function a(c, a) { b.call(this, "ajax timeout", c, a) } __extends(a, b); return a }(da); g.ajax = Q.create; var yc = function (b) {
        function a(c, a) {
            b.call(this,
            c, a); this.scheduler = c; this.work = a
        } __extends(a, b); a.prototype.schedule = function (c, a) { void 0 === a && (a = 0); if (0 < a) return b.prototype.schedule.call(this, c, a); this.delay = a; this.state = c; this.scheduler.flush(this); return this }; a.prototype.execute = function (c, a) { return 0 < a || this.closed ? b.prototype.execute.call(this, c, a) : this._execute(c, a) }; a.prototype.requestAsyncId = function (c, a, d) { void 0 === d && (d = 0); return null !== d && 0 < d || null === d && 0 < this.delay ? b.prototype.requestAsyncId.call(this, c, a, d) : c.flush(this) }; return a
    }(U),
    Za = new (function (b) { function a() { b.apply(this, arguments) } __extends(a, b); return a }(V))(yc), R = function (b) {
        function a(c, a, d) { void 0 === c && (c = Number.POSITIVE_INFINITY); void 0 === a && (a = Number.POSITIVE_INFINITY); b.call(this); this.scheduler = d; this._events = []; this._bufferSize = 1 > c ? 1 : c; this._windowTime = 1 > a ? 1 : a } __extends(a, b); a.prototype.next = function (c) { var a = this._getNow(); this._events.push(new zc(a, c)); this._trimBufferThenGetEvents(); b.prototype.next.call(this, c) }; a.prototype._subscribe = function (c) {
            var a = this._trimBufferThenGetEvents(),
            b = this.scheduler, f; if (this.closed) throw new O; this.hasError ? f = x.EMPTY : this.isStopped ? f = x.EMPTY : (this.observers.push(c), f = new Oa(this, c)); b && c.add(c = new na(c, b)); for (var b = a.length, h = 0; h < b && !c.closed; h++) c.next(a[h].value); this.hasError ? c.error(this.thrownError) : this.isStopped && c.complete(); return f
        }; a.prototype._getNow = function () { return (this.scheduler || Za).now() }; a.prototype._trimBufferThenGetEvents = function () {
            for (var c = this._getNow(), a = this._bufferSize, b = this._windowTime, f = this._events, h = f.length,
            g = 0; g < h && !(c - f[g].time < b) ;) g++; h > a && (g = Math.max(g, h - a)); 0 < g && f.splice(0, g); return f
        }; return a
    }(y), zc = function () { return function (b, a) { this.time = b; this.value = a } }(), Ac = r.Object.assign || wb, Bc = function (b) {
        function a(c, a) { if (c instanceof g) b.call(this, a, c); else { b.call(this); this.WebSocketCtor = r.WebSocket; this._output = new y; "string" === typeof c ? this.url = c : Ac(this, c); if (!this.WebSocketCtor) throw Error("no WebSocket constructor can be found"); this.destination = new R } } __extends(a, b); a.prototype.resultSelector =
        function (c) { return JSON.parse(c.data) }; a.create = function (c) { return new a(c) }; a.prototype.lift = function (c) { var b = new a(this, this.destination); b.operator = c; return b }; a.prototype._resetState = function () { this.socket = null; this.source || (this.destination = new R); this._output = new y }; a.prototype.multiplex = function (c, a, b) {
            var e = this; return new g(function (d) {
                var f = k(c)(); f === n ? d.error(n.e) : e.next(f); var h = e.subscribe(function (c) { var a = k(b)(c); a === n ? d.error(n.e) : a && d.next(c) }, function (c) { return d.error(c) }, function () { return d.complete() });
                return function () { var c = k(a)(); c === n ? d.error(n.e) : e.next(c); h.unsubscribe() }
            })
        }; a.prototype._connectSocket = function () {
            var c = this, a = this.WebSocketCtor, b = this._output, f = null; try { this.socket = f = this.protocol ? new a(this.url, this.protocol) : new a(this.url) } catch (D) { b.error(D); return } var h = new x(function () { c.socket = null; f && 1 === f.readyState && f.close() }); f.onopen = function (a) {
                var e = c.openObserver; e && e.next(a); a = c.destination; c.destination = p.create(function (c) { return 1 === f.readyState && f.send(c) }, function (a) {
                    var e =
                    c.closingObserver; e && e.next(void 0); a && a.code ? f.close(a.code, a.reason) : b.error(new TypeError("WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }")); c._resetState()
                }, function () { var a = c.closingObserver; a && a.next(void 0); f.close(); c._resetState() }); a && a instanceof R && h.add(a.subscribe(c.destination))
            }; f.onerror = function (a) { c._resetState(); b.error(a) }; f.onclose = function (a) {
                c._resetState(); var e = c.closeObserver; e && e.next(a);
                a.wasClean ? b.complete() : b.error(a)
            }; f.onmessage = function (a) { a = k(c.resultSelector)(a); a === n ? b.error(n.e) : b.next(a) }
        }; a.prototype._subscribe = function (c) { var a = this, b = this.source; if (b) return b.subscribe(c); this.socket || this._connectSocket(); b = new x; b.add(this._output.subscribe(c)); b.add(function () { var c = a.socket; 0 === a._output.observers.length && (c && 1 === c.readyState && c.close(), a._resetState()) }); return b }; a.prototype.unsubscribe = function () {
            var c = this.source, a = this.socket; a && 1 === a.readyState && (a.close(),
            this._resetState()); b.prototype.unsubscribe.call(this); c || (this.destination = new R)
        }; return a
    }(ca).create; g.webSocket = Bc; var Dc = function () { function b(a) { this.closingNotifier = a } b.prototype.call = function (a, c) { return c.subscribe(new Cc(a, this.closingNotifier)) }; return b }(), Cc = function (b) {
        function a(c, a) { b.call(this, c); this.buffer = []; this.add(q(this, a)) } __extends(a, b); a.prototype._next = function (c) { this.buffer.push(c) }; a.prototype.notifyNext = function (c, a, b, f, h) { c = this.buffer; this.buffer = []; this.destination.next(c) };
        return a
    }(t); g.prototype.buffer = function (b) { return this.lift(new Dc(b)) }; var Fc = function () { function b(a, c) { this.bufferSize = a; this.startBufferEvery = c } b.prototype.call = function (a, c) { return c.subscribe(new Ec(a, this.bufferSize, this.startBufferEvery)) }; return b }(), Ec = function (b) {
        function a(c, a, d) { b.call(this, c); this.bufferSize = a; this.startBufferEvery = d; this.buffers = []; this.count = 0 } __extends(a, b); a.prototype._next = function (c) {
            var a = this.count++, b = this.destination, f = this.bufferSize, h = this.startBufferEvery,
            g = this.buffers; 0 === a % (null == h ? f : h) && g.push([]); for (a = g.length; a--;) h = g[a], h.push(c), h.length === f && (g.splice(a, 1), b.next(h))
        }; a.prototype._complete = function () { for (var c = this.destination, a = this.buffers; 0 < a.length;) { var d = a.shift(); 0 < d.length && c.next(d) } b.prototype._complete.call(this) }; return a
    }(p); g.prototype.bufferCount = function (b, a) { void 0 === a && (a = null); return this.lift(new Fc(b, a)) }; var Hc = function () {
        function b(a, c, b, d) {
            this.bufferTimeSpan = a; this.bufferCreationInterval = c; this.maxBufferSize = b; this.scheduler =
            d
        } b.prototype.call = function (a, c) { return c.subscribe(new Gc(a, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler)) }; return b
    }(), Ic = function () { return function () { this.buffer = [] } }(), Gc = function (b) {
        function a(c, a, d, f, h) {
            b.call(this, c); this.bufferTimeSpan = a; this.bufferCreationInterval = d; this.maxBufferSize = f; this.scheduler = h; this.contexts = []; c = this.openContext(); (this.timespanOnly = null == d || 0 > d) ? this.add(c.closeAction = h.schedule(za, a, { subscriber: this, context: c, bufferTimeSpan: a })) :
            (f = { bufferTimeSpan: a, bufferCreationInterval: d, subscriber: this, scheduler: h }, this.add(c.closeAction = h.schedule(Aa, a, { subscriber: this, context: c })), this.add(h.schedule(xb, d, f)))
        } __extends(a, b); a.prototype._next = function (c) { for (var a = this.contexts, b = a.length, f, h = 0; h < b; h++) { var g = a[h], k = g.buffer; k.push(c); k.length == this.maxBufferSize && (f = g) } if (f) this.onBufferFull(f) }; a.prototype._error = function (a) { this.contexts.length = 0; b.prototype._error.call(this, a) }; a.prototype._complete = function () {
            for (var a = this.contexts,
            e = this.destination; 0 < a.length;) { var d = a.shift(); e.next(d.buffer) } b.prototype._complete.call(this)
        }; a.prototype._unsubscribe = function () { this.contexts = null }; a.prototype.onBufferFull = function (a) { this.closeContext(a); a = a.closeAction; a.unsubscribe(); this.remove(a); if (!this.closed && this.timespanOnly) { a = this.openContext(); var c = this.bufferTimeSpan; this.add(a.closeAction = this.scheduler.schedule(za, c, { subscriber: this, context: a, bufferTimeSpan: c })) } }; a.prototype.openContext = function () {
            var a = new Ic; this.contexts.push(a);
            return a
        }; a.prototype.closeContext = function (a) { this.destination.next(a.buffer); var c = this.contexts; 0 <= (c ? c.indexOf(a) : -1) && c.splice(c.indexOf(a), 1) }; return a
    }(p); g.prototype.bufferTime = function (b) { var a = arguments.length, c = C; G(arguments[arguments.length - 1]) && (c = arguments[arguments.length - 1], a--); var e = null; 2 <= a && (e = arguments[1]); var d = Number.POSITIVE_INFINITY; 3 <= a && (d = arguments[2]); return this.lift(new Hc(b, e, d, c)) }; var Kc = function () {
        function b(a, c) { this.openings = a; this.closingSelector = c } b.prototype.call =
        function (a, c) { return c.subscribe(new Jc(a, this.openings, this.closingSelector)) }; return b
    }(), Jc = function (b) {
        function a(a, e, d) { b.call(this, a); this.openings = e; this.closingSelector = d; this.contexts = []; this.add(q(this, e)) } __extends(a, b); a.prototype._next = function (a) { for (var c = this.contexts, b = c.length, f = 0; f < b; f++) c[f].buffer.push(a) }; a.prototype._error = function (a) {
            for (var c = this.contexts; 0 < c.length;) { var d = c.shift(); d.subscription.unsubscribe(); d.buffer = null; d.subscription = null } this.contexts = null; b.prototype._error.call(this,
            a)
        }; a.prototype._complete = function () { for (var a = this.contexts; 0 < a.length;) { var e = a.shift(); this.destination.next(e.buffer); e.subscription.unsubscribe(); e.buffer = null; e.subscription = null } this.contexts = null; b.prototype._complete.call(this) }; a.prototype.notifyNext = function (a, b, d, f, h) { a ? this.closeBuffer(a) : this.openBuffer(b) }; a.prototype.notifyComplete = function (a) { this.closeBuffer(a.context) }; a.prototype.openBuffer = function (a) { try { var c = this.closingSelector.call(this, a); c && this.trySubscribe(c) } catch (d) { this._error(d) } };
        a.prototype.closeBuffer = function (a) { var c = this.contexts; if (c && a) { var b = a.subscription; this.destination.next(a.buffer); c.splice(c.indexOf(a), 1); this.remove(b); b.unsubscribe() } }; a.prototype.trySubscribe = function (a) { var c = this.contexts, b = new x, f = { buffer: [], subscription: b }; c.push(f); a = q(this, a, f); !a || a.closed ? this.closeBuffer(f) : (a.context = f, this.add(a), b.add(a)) }; return a
    }(t); g.prototype.bufferToggle = function (b, a) { return this.lift(new Kc(b, a)) }; var Mc = function () {
        function b(a) { this.closingSelector = a }
        b.prototype.call = function (a, c) { return c.subscribe(new Lc(a, this.closingSelector)) }; return b
    }(), Lc = function (b) {
        function a(a, e) { b.call(this, a); this.closingSelector = e; this.subscribing = !1; this.openBuffer() } __extends(a, b); a.prototype._next = function (a) { this.buffer.push(a) }; a.prototype._complete = function () { var a = this.buffer; a && this.destination.next(a); b.prototype._complete.call(this) }; a.prototype._unsubscribe = function () { this.buffer = null; this.subscribing = !1 }; a.prototype.notifyNext = function (a, b, d, f, h) { this.openBuffer() };
        a.prototype.notifyComplete = function () { this.subscribing ? this.complete() : this.openBuffer() }; a.prototype.openBuffer = function () { var a = this.closingSubscription; a && (this.remove(a), a.unsubscribe()); (a = this.buffer) && this.destination.next(a); this.buffer = []; var b = k(this.closingSelector)(); b === n ? this.error(n.e) : (this.closingSubscription = a = new x, this.add(a), this.subscribing = !0, a.add(q(this, b)), this.subscribing = !1) }; return a
    }(t); g.prototype.bufferWhen = function (b) { return this.lift(new Mc(b)) }; var yb = function () {
        function b(a) {
            this.selector =
            a
        } b.prototype.call = function (a, c) { return c.subscribe(new Nc(a, this.selector, this.caught)) }; return b
    }(), Nc = function (b) { function a(a, e, d) { b.call(this, a); this.selector = e; this.caught = d } __extends(a, b); a.prototype.error = function (a) { if (!this.isStopped) { var c = void 0; try { c = this.selector(a, this.caught) } catch (d) { this.destination.error(d); return } this.unsubscribe(); this.destination.remove(this); q(this, c) } }; return a }(t); g.prototype.catch = Ba; g.prototype._catch = Ba; g.prototype.combineAll = function (b) { return this.lift(new ma(b)) };
    g.prototype.combineLatest = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; a = null; "function" === typeof b[b.length - 1] && (a = b.pop()); 1 === b.length && H(b[0]) && (b = b[0]); b.unshift(this); return this.lift.call(new K(b), new ma(a)) }; g.prototype.concat = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; return this.lift.call(S.apply(void 0, [this].concat(b))) }; g.prototype.concatAll = function () { return this.lift(new aa(1)) }; var Da = function () {
        function b(a, c, b) {
            void 0 === b && (b =
            Number.POSITIVE_INFINITY); this.project = a; this.resultSelector = c; this.concurrent = b
        } b.prototype.call = function (a, c) { return c.subscribe(new Oc(a, this.project, this.resultSelector, this.concurrent)) }; return b
    }(), Oc = function (b) {
        function a(a, e, d, f) { void 0 === f && (f = Number.POSITIVE_INFINITY); b.call(this, a); this.project = e; this.resultSelector = d; this.concurrent = f; this.hasCompleted = !1; this.buffer = []; this.index = this.active = 0 } __extends(a, b); a.prototype._next = function (a) {
            this.active < this.concurrent ? this._tryNext(a) :
            this.buffer.push(a)
        }; a.prototype._tryNext = function (a) { var c, b = this.index++; try { c = this.project(a, b) } catch (f) { this.destination.error(f); return } this.active++; this._innerSub(c, a, b) }; a.prototype._innerSub = function (a, b, d) { this.add(q(this, a, b, d)) }; a.prototype._complete = function () { this.hasCompleted = !0; 0 === this.active && 0 === this.buffer.length && this.destination.complete() }; a.prototype.notifyNext = function (a, b, d, f, h) { this.resultSelector ? this._notifyResultSelector(a, b, d, f) : this.destination.next(b) }; a.prototype._notifyResultSelector =
        function (a, b, d, f) { var c; try { c = this.resultSelector(a, b, d, f) } catch (D) { this.destination.error(D); return } this.destination.next(c) }; a.prototype.notifyComplete = function (a) { var c = this.buffer; this.remove(a); this.active--; 0 < c.length ? this._next(c.shift()) : 0 === this.active && this.hasCompleted && this.destination.complete() }; return a
    }(t); g.prototype.concatMap = function (b, a) { return this.lift(new Da(b, a, 1)) }; var Fa = function () {
        function b(a, c, b) {
            void 0 === b && (b = Number.POSITIVE_INFINITY); this.ish = a; this.resultSelector =
            c; this.concurrent = b
        } b.prototype.call = function (a, c) { return c.subscribe(new Pc(a, this.ish, this.resultSelector, this.concurrent)) }; return b
    }(), Pc = function (b) {
        function a(a, e, d, f) { void 0 === f && (f = Number.POSITIVE_INFINITY); b.call(this, a); this.ish = e; this.resultSelector = d; this.concurrent = f; this.hasCompleted = !1; this.buffer = []; this.index = this.active = 0 } __extends(a, b); a.prototype._next = function (a) {
            if (this.active < this.concurrent) {
                var c = this.resultSelector, b = this.index++, f = this.ish, h = this.destination; this.active++;
                this._innerSub(f, h, c, a, b)
            } else this.buffer.push(a)
        }; a.prototype._innerSub = function (a, b, d, f, h) { this.add(q(this, a, f, h)) }; a.prototype._complete = function () { this.hasCompleted = !0; 0 === this.active && 0 === this.buffer.length && this.destination.complete() }; a.prototype.notifyNext = function (a, b, d, f, h) { h = this.destination; this.resultSelector ? this.trySelectResult(a, b, d, f) : h.next(b) }; a.prototype.trySelectResult = function (a, b, d, f) { var c = this.resultSelector, e = this.destination, g; try { g = c(a, b, d, f) } catch (J) { e.error(J); return } e.next(g) };
        a.prototype.notifyError = function (a) { this.destination.error(a) }; a.prototype.notifyComplete = function (a) { var c = this.buffer; this.remove(a); this.active--; 0 < c.length ? this._next(c.shift()) : 0 === this.active && this.hasCompleted && this.destination.complete() }; return a
    }(t); g.prototype.concatMapTo = function (b, a) { return this.lift(new Fa(b, a, 1)) }; var Rc = function () { function b(a, c) { this.predicate = a; this.source = c } b.prototype.call = function (a, c) { return c.subscribe(new Qc(a, this.predicate, this.source)) }; return b }(), Qc = function (b) {
        function a(a,
        e, d) { b.call(this, a); this.predicate = e; this.source = d; this.index = this.count = 0 } __extends(a, b); a.prototype._next = function (a) { this.predicate ? this._tryPredicate(a) : this.count++ }; a.prototype._tryPredicate = function (a) { var c; try { c = this.predicate(a, this.index++, this.source) } catch (d) { this.destination.error(d); return } c && this.count++ }; a.prototype._complete = function () { this.destination.next(this.count); this.destination.complete() }; return a
    }(p); g.prototype.count = function (b) { return this.lift(new Rc(b, this)) }; var Tc =
    function () { function b() { } b.prototype.call = function (a, c) { return c.subscribe(new Sc(a)) }; return b }(), Sc = function (b) { function a(a) { b.call(this, a) } __extends(a, b); a.prototype._next = function (a) { a.observe(this.destination) }; return a }(p); g.prototype.dematerialize = function () { return this.lift(new Tc) }; var Vc = function () { function b(a) { this.durationSelector = a } b.prototype.call = function (a, c) { return c.subscribe(new Uc(a, this.durationSelector)) }; return b }(), Uc = function (b) {
        function a(a, e) {
            b.call(this, a); this.durationSelector =
            e; this.hasValue = !1; this.durationSubscription = null
        } __extends(a, b); a.prototype._next = function (a) { try { var c = this.durationSelector.call(this, a); c && this._tryNext(a, c) } catch (d) { this.destination.error(d) } }; a.prototype._complete = function () { this.emitValue(); this.destination.complete() }; a.prototype._tryNext = function (a, b) { var c = this.durationSubscription; this.value = a; this.hasValue = !0; c && (c.unsubscribe(), this.remove(c)); c = q(this, b); c.closed || this.add(this.durationSubscription = c) }; a.prototype.notifyNext = function (a,
        b, d, f, h) { this.emitValue() }; a.prototype.notifyComplete = function () { this.emitValue() }; a.prototype.emitValue = function () { if (this.hasValue) { var a = this.value, e = this.durationSubscription; e && (this.durationSubscription = null, e.unsubscribe(), this.remove(e)); this.value = null; this.hasValue = !1; b.prototype._next.call(this, a) } }; return a
    }(t); g.prototype.debounce = function (b) { return this.lift(new Vc(b)) }; var Xc = function () {
        function b(a, c) { this.dueTime = a; this.scheduler = c } b.prototype.call = function (a, c) {
            return c.subscribe(new Wc(a,
            this.dueTime, this.scheduler))
        }; return b
    }(), Wc = function (b) {
        function a(a, e, d) { b.call(this, a); this.dueTime = e; this.scheduler = d; this.lastValue = this.debouncedSubscription = null; this.hasValue = !1 } __extends(a, b); a.prototype._next = function (a) { this.clearDebounce(); this.lastValue = a; this.hasValue = !0; this.add(this.debouncedSubscription = this.scheduler.schedule(zb, this.dueTime, this)) }; a.prototype._complete = function () { this.debouncedNext(); this.destination.complete() }; a.prototype.debouncedNext = function () {
            this.clearDebounce();
            this.hasValue && (this.destination.next(this.lastValue), this.lastValue = null, this.hasValue = !1)
        }; a.prototype.clearDebounce = function () { var a = this.debouncedSubscription; null !== a && (this.remove(a), a.unsubscribe(), this.debouncedSubscription = null) }; return a
    }(p); g.prototype.debounceTime = function (b, a) { void 0 === a && (a = C); return this.lift(new Xc(b, a)) }; var Zc = function () { function b(a) { this.defaultValue = a } b.prototype.call = function (a, c) { return c.subscribe(new Yc(a, this.defaultValue)) }; return b }(), Yc = function (b) {
        function a(a,
        e) { b.call(this, a); this.defaultValue = e; this.isEmpty = !0 } __extends(a, b); a.prototype._next = function (a) { this.isEmpty = !1; this.destination.next(a) }; a.prototype._complete = function () { this.isEmpty && this.destination.next(this.defaultValue); this.destination.complete() }; return a
    }(p); g.prototype.defaultIfEmpty = function (b) { void 0 === b && (b = null); return this.lift(new Zc(b)) }; var ad = function () {
        function b(a, c) { this.delay = a; this.scheduler = c } b.prototype.call = function (a, c) { return c.subscribe(new $c(a, this.delay, this.scheduler)) };
        return b
    }(), $c = function (b) {
        function a(a, e, d) { b.call(this, a); this.delay = e; this.scheduler = d; this.queue = []; this.errored = this.active = !1 } __extends(a, b); a.dispatch = function (a) { for (var c = a.source, b = c.queue, f = a.scheduler, h = a.destination; 0 < b.length && 0 >= b[0].time - f.now() ;) b.shift().notification.observe(h); 0 < b.length ? (c = Math.max(0, b[0].time - f.now()), this.schedule(a, c)) : c.active = !1 }; a.prototype._schedule = function (c) {
            this.active = !0; this.add(c.schedule(a.dispatch, this.delay, {
                source: this, destination: this.destination,
                scheduler: c
            }))
        }; a.prototype.scheduleNotification = function (a) { if (!0 !== this.errored) { var c = this.scheduler; a = new bd(c.now() + this.delay, a); this.queue.push(a); !1 === this.active && this._schedule(c) } }; a.prototype._next = function (a) { this.scheduleNotification(z.createNext(a)) }; a.prototype._error = function (a) { this.errored = !0; this.queue = []; this.destination.error(a) }; a.prototype._complete = function () { this.scheduleNotification(z.createComplete()) }; return a
    }(p), bd = function () {
        return function (b, a) {
            this.time = b; this.notification =
            a
        }
    }(); g.prototype.delay = function (b, a) { void 0 === a && (a = C); b = ba(b) ? +b - a.now() : Math.abs(b); return this.lift(new ad(b, a)) }; var $a = function () { function b(a) { this.delayDurationSelector = a } b.prototype.call = function (a, c) { return c.subscribe(new cd(a, this.delayDurationSelector)) }; return b }(), cd = function (b) {
        function a(a, e) { b.call(this, a); this.delayDurationSelector = e; this.completed = !1; this.delayNotifierSubscriptions = []; this.values = [] } __extends(a, b); a.prototype.notifyNext = function (a, b, d, f, h) {
            this.destination.next(a);
            this.removeSubscription(h); this.tryComplete()
        }; a.prototype.notifyError = function (a, b) { this._error(a) }; a.prototype.notifyComplete = function (a) { (a = this.removeSubscription(a)) && this.destination.next(a); this.tryComplete() }; a.prototype._next = function (a) { try { var c = this.delayDurationSelector(a); c && this.tryDelay(c, a) } catch (d) { this.destination.error(d) } }; a.prototype._complete = function () { this.completed = !0; this.tryComplete() }; a.prototype.removeSubscription = function (a) {
            a.unsubscribe(); a = this.delayNotifierSubscriptions.indexOf(a);
            var c = null; -1 !== a && (c = this.values[a], this.delayNotifierSubscriptions.splice(a, 1), this.values.splice(a, 1)); return c
        }; a.prototype.tryDelay = function (a, b) { a = q(this, a, b); this.add(a); this.delayNotifierSubscriptions.push(a); this.values.push(b) }; a.prototype.tryComplete = function () { this.completed && 0 === this.delayNotifierSubscriptions.length && this.destination.complete() }; return a
    }(t), ed = function (b) {
        function a(a, e) { b.call(this); this.source = a; this.subscriptionDelay = e } __extends(a, b); a.prototype._subscribe = function (a) {
            this.subscriptionDelay.subscribe(new dd(a,
            this.source))
        }; return a
    }(g), dd = function (b) { function a(a, e) { b.call(this); this.parent = a; this.source = e; this.sourceSubscribed = !1 } __extends(a, b); a.prototype._next = function (a) { this.subscribeToSource() }; a.prototype._error = function (a) { this.unsubscribe(); this.parent.error(a) }; a.prototype._complete = function () { this.subscribeToSource() }; a.prototype.subscribeToSource = function () { this.sourceSubscribed || (this.sourceSubscribed = !0, this.unsubscribe(), this.source.subscribe(this.parent)) }; return a }(p); g.prototype.delayWhen =
    function (b, a) { return a ? (new ed(this, a)).lift(new $a(b)) : this.lift(new $a(b)) }; var fd = r.Set || Ab(), hd = function () { function b(a, c) { this.keySelector = a; this.flushes = c } b.prototype.call = function (a, c) { return c.subscribe(new gd(a, this.keySelector, this.flushes)) }; return b }(), gd = function (b) {
        function a(a, e, d) { b.call(this, a); this.keySelector = e; this.values = new fd; d && this.add(q(this, d)) } __extends(a, b); a.prototype.notifyNext = function (a, b, d, f, h) { this.values.clear() }; a.prototype.notifyError = function (a, b) { this._error(a) };
        a.prototype._next = function (a) { this.keySelector ? this._useKeySelector(a) : this._finalizeNext(a, a) }; a.prototype._useKeySelector = function (a) { var c, b = this.destination; try { c = this.keySelector(a) } catch (f) { b.error(f); return } this._finalizeNext(c, a) }; a.prototype._finalizeNext = function (a, b) { var c = this.values; c.has(a) || (c.add(a), this.destination.next(b)) }; return a
    }(t); g.prototype.distinct = function (b, a) { return this.lift(new hd(b, a)) }; var Bb = function () {
        function b(a, c) { this.compare = a; this.keySelector = c } b.prototype.call =
        function (a, c) { return c.subscribe(new id(a, this.compare, this.keySelector)) }; return b
    }(), id = function (b) {
        function a(a, e, d) { b.call(this, a); this.keySelector = d; this.hasKey = !1; "function" === typeof e && (this.compare = e) } __extends(a, b); a.prototype.compare = function (a, b) { return a === b }; a.prototype._next = function (a) {
            var c = a; if (this.keySelector && (c = k(this.keySelector)(a), c === n)) return this.destination.error(n.e); var b = !1; if (this.hasKey) { if (b = k(this.compare)(this.key, c), b === n) return this.destination.error(n.e) } else this.hasKey =
            !0; !1 === !!b && (this.key = c, this.destination.next(a))
        }; return a
    }(p); g.prototype.distinctUntilChanged = Ga; g.prototype.distinctUntilKeyChanged = function (b, a) { return Ga.call(this, function (c, e) { return a ? a(c[b], e[b]) : c[b] === e[b] }) }; var Cb = function () { function b(a, c, b) { this.nextOrObserver = a; this.error = c; this.complete = b } b.prototype.call = function (a, c) { return c.subscribe(new jd(a, this.nextOrObserver, this.error, this.complete)) }; return b }(), jd = function (b) {
        function a(a, e, d, f) {
            b.call(this, a); a = new p(e, d, f); a.syncErrorThrowable =
            !0; this.add(a); this.safeSubscriber = a
        } __extends(a, b); a.prototype._next = function (a) { var c = this.safeSubscriber; c.next(a); c.syncErrorThrown ? this.destination.error(c.syncErrorValue) : this.destination.next(a) }; a.prototype._error = function (a) { var c = this.safeSubscriber; c.error(a); c.syncErrorThrown ? this.destination.error(c.syncErrorValue) : this.destination.error(a) }; a.prototype._complete = function () { var a = this.safeSubscriber; a.complete(); a.syncErrorThrown ? this.destination.error(a.syncErrorValue) : this.destination.complete() };
        return a
    }(p); g.prototype.do = Ha; g.prototype._do = Ha; var ld = function () { function b() { } b.prototype.call = function (a, c) { return c.subscribe(new kd(a)) }; return b }(), kd = function (b) {
        function a(a) { b.call(this, a); this.hasSubscription = this.hasCompleted = !1 } __extends(a, b); a.prototype._next = function (a) { this.hasSubscription || (this.hasSubscription = !0, this.add(q(this, a))) }; a.prototype._complete = function () { this.hasCompleted = !0; this.hasSubscription || this.destination.complete() }; a.prototype.notifyComplete = function (a) {
            this.remove(a);
            this.hasSubscription = !1; this.hasCompleted && this.destination.complete()
        }; return a
    }(t); g.prototype.exhaust = function () { return this.lift(new ld) }; var nd = function () { function b(a, c) { this.project = a; this.resultSelector = c } b.prototype.call = function (a, c) { return c.subscribe(new md(a, this.project, this.resultSelector)) }; return b }(), md = function (b) {
        function a(a, e, d) { b.call(this, a); this.project = e; this.resultSelector = d; this.hasCompleted = this.hasSubscription = !1; this.index = 0 } __extends(a, b); a.prototype._next = function (a) {
            this.hasSubscription ||
            this.tryNext(a)
        }; a.prototype.tryNext = function (a) { var c = this.index++, b = this.destination; try { var f = this.project(a, c); this.hasSubscription = !0; this.add(q(this, f, a, c)) } catch (h) { b.error(h) } }; a.prototype._complete = function () { this.hasCompleted = !0; this.hasSubscription || this.destination.complete() }; a.prototype.notifyNext = function (a, b, d, f, h) { h = this.destination; this.resultSelector ? this.trySelectResult(a, b, d, f) : h.next(b) }; a.prototype.trySelectResult = function (a, b, d, f) {
            var c = this.resultSelector, e = this.destination;
            try { var g = c(a, b, d, f); e.next(g) } catch (J) { e.error(J) }
        }; a.prototype.notifyError = function (a) { this.destination.error(a) }; a.prototype.notifyComplete = function (a) { this.remove(a); this.hasSubscription = !1; this.hasCompleted && this.destination.complete() }; return a
    }(t); g.prototype.exhaustMap = function (b, a) { return this.lift(new nd(b, a)) }; var pd = function () {
        function b(a, c, b) { this.project = a; this.concurrent = c; this.scheduler = b } b.prototype.call = function (a, c) { return c.subscribe(new od(a, this.project, this.concurrent, this.scheduler)) };
        return b
    }(), od = function (b) {
        function a(a, e, d, f) { b.call(this, a); this.project = e; this.concurrent = d; this.scheduler = f; this.active = this.index = 0; this.hasCompleted = !1; d < Number.POSITIVE_INFINITY && (this.buffer = []) } __extends(a, b); a.dispatch = function (a) { a.subscriber.subscribeToProjection(a.result, a.value, a.index) }; a.prototype._next = function (c) {
            var b = this.destination; if (b.closed) this._complete(); else {
                var d = this.index++; if (this.active < this.concurrent) {
                    b.next(c); var f = k(this.project)(c, d); f === n ? b.error(n.e) : this.scheduler ?
                    this.add(this.scheduler.schedule(a.dispatch, 0, { subscriber: this, result: f, value: c, index: d })) : this.subscribeToProjection(f, c, d)
                } else this.buffer.push(c)
            }
        }; a.prototype.subscribeToProjection = function (a, b, d) { this.active++; this.add(q(this, a, b, d)) }; a.prototype._complete = function () { (this.hasCompleted = !0, 0 === this.active) && this.destination.complete() }; a.prototype.notifyNext = function (a, b, d, f, h) { this._next(b) }; a.prototype.notifyComplete = function (a) {
            var c = this.buffer; this.remove(a); this.active--; c && 0 < c.length &&
            this._next(c.shift()); this.hasCompleted && 0 === this.active && this.destination.complete()
        }; return a
    }(t); g.prototype.expand = function (b, a, c) { void 0 === a && (a = Number.POSITIVE_INFINITY); void 0 === c && (c = void 0); a = 1 > (a || 0) ? Number.POSITIVE_INFINITY : a; return this.lift(new pd(b, a, c)) }; var W = function (b) { function a() { var a = b.call(this, "argument out of range"); this.name = a.name = "ArgumentOutOfRangeError"; this.stack = a.stack; this.message = a.message } __extends(a, b); return a }(Error), rd = function () {
        function b(a, c) {
            this.index =
            a; this.defaultValue = c; if (0 > a) throw new W;
        } b.prototype.call = function (a, c) { return c.subscribe(new qd(a, this.index, this.defaultValue)) }; return b
    }(), qd = function (b) {
        function a(a, e, d) { b.call(this, a); this.index = e; this.defaultValue = d } __extends(a, b); a.prototype._next = function (a) { 0 === this.index-- && (this.destination.next(a), this.destination.complete()) }; a.prototype._complete = function () { var a = this.destination; 0 <= this.index && ("undefined" !== typeof this.defaultValue ? a.next(this.defaultValue) : a.error(new W)); a.complete() };
        return a
    }(p); g.prototype.elementAt = function (b, a) { return this.lift(new rd(b, a)) }; var Db = function () { function b(a, c) { this.predicate = a; this.thisArg = c } b.prototype.call = function (a, c) { return c.subscribe(new sd(a, this.predicate, this.thisArg)) }; return b }(), sd = function (b) {
        function a(a, e, d) { b.call(this, a); this.predicate = e; this.thisArg = d; this.count = 0; this.predicate = e } __extends(a, b); a.prototype._next = function (a) {
            var c; try { c = this.predicate.call(this.thisArg, a, this.count++) } catch (d) { this.destination.error(d); return } c &&
            this.destination.next(a)
        }; return a
    }(p); g.prototype.filter = ha; var Eb = function () { function b(a) { this.callback = a } b.prototype.call = function (a, c) { return c.subscribe(new td(a, this.callback)) }; return b }(), td = function (b) { function a(a, e) { b.call(this, a); this.add(new x(e)) } __extends(a, b); return a }(p); g.prototype.finally = Ia; g.prototype._finally = Ia; var ab = function () {
        function b(a, c, b, d) { this.predicate = a; this.source = c; this.yieldIndex = b; this.thisArg = d } b.prototype.call = function (a, c) {
            return c.subscribe(new ud(a, this.predicate,
            this.source, this.yieldIndex, this.thisArg))
        }; return b
    }(), ud = function (b) {
        function a(a, e, d, f, h) { b.call(this, a); this.predicate = e; this.source = d; this.yieldIndex = f; this.thisArg = h; this.index = 0 } __extends(a, b); a.prototype.notifyComplete = function (a) { var c = this.destination; c.next(a); c.complete() }; a.prototype._next = function (a) { var c = this.predicate, b = this.thisArg, f = this.index++; try { c.call(b || this, a, f, this.source) && this.notifyComplete(this.yieldIndex ? f : a) } catch (h) { this.destination.error(h) } }; a.prototype._complete =
        function () { this.notifyComplete(this.yieldIndex ? -1 : void 0) }; return a
    }(p); g.prototype.find = function (b, a) { if ("function" !== typeof b) throw new TypeError("predicate is not a function"); return this.lift(new ab(b, this, !1, a)) }; g.prototype.findIndex = function (b, a) { return this.lift(new ab(b, this, !0, a)) }; var ea = function (b) { function a() { var a = b.call(this, "no elements in sequence"); this.name = a.name = "EmptyError"; this.stack = a.stack; this.message = a.message } __extends(a, b); return a }(Error), wd = function () {
        function b(a,
        c, b, d) { this.predicate = a; this.resultSelector = c; this.defaultValue = b; this.source = d } b.prototype.call = function (a, c) { return c.subscribe(new vd(a, this.predicate, this.resultSelector, this.defaultValue, this.source)) }; return b
    }(), vd = function (b) {
        function a(a, e, d, f, h) { b.call(this, a); this.predicate = e; this.resultSelector = d; this.defaultValue = f; this.source = h; this.index = 0; this._emitted = this.hasCompleted = !1 } __extends(a, b); a.prototype._next = function (a) {
            var c = this.index++; this.predicate ? this._tryPredicate(a, c) : this._emit(a,
            c)
        }; a.prototype._tryPredicate = function (a, b) { var c; try { c = this.predicate(a, b, this.source) } catch (f) { this.destination.error(f); return } c && this._emit(a, b) }; a.prototype._emit = function (a, b) { this.resultSelector ? this._tryResultSelector(a, b) : this._emitFinal(a) }; a.prototype._tryResultSelector = function (a, b) { var c; try { c = this.resultSelector(a, b) } catch (f) { this.destination.error(f); return } this._emitFinal(c) }; a.prototype._emitFinal = function (a) {
            var c = this.destination; this._emitted || (this._emitted = !0, c.next(a), c.complete(),
            this.hasCompleted = !0)
        }; a.prototype._complete = function () { var a = this.destination; this.hasCompleted || "undefined" === typeof this.defaultValue ? this.hasCompleted || a.error(new ea) : (a.next(this.defaultValue), a.complete()) }; return a
    }(p); g.prototype.first = function (b, a, c) { return this.lift(new wd(b, a, c, this)) }; var xd = function () {
        function b() { this.size = 0; this._values = []; this._keys = [] } b.prototype.get = function (a) { a = this._keys.indexOf(a); return -1 === a ? void 0 : this._values[a] }; b.prototype.set = function (a, c) {
            var b = this._keys.indexOf(a);
            -1 === b ? (this._keys.push(a), this._values.push(c), this.size++) : this._values[b] = c; return this
        }; b.prototype.delete = function (a) { a = this._keys.indexOf(a); if (-1 === a) return !1; this._values.splice(a, 1); this._keys.splice(a, 1); this.size--; return !0 }; b.prototype.clear = function () { this._keys.length = 0; this.size = this._values.length = 0 }; b.prototype.forEach = function (a, c) { for (var b = 0; b < this.size; b++) a.call(c, this._values[b], this._keys[b]) }; return b
    }(), yd = r.Map || xd, zd = function () {
        function b() { this.values = {} } b.prototype.delete =
        function (a) { this.values[a] = null; return !0 }; b.prototype.set = function (a, c) { this.values[a] = c; return this }; b.prototype.get = function (a) { return this.values[a] }; b.prototype.forEach = function (a, c) { var b = this.values, d; for (d in b) b.hasOwnProperty(d) && null !== b[d] && a.call(c, b[d], d) }; b.prototype.clear = function () { this.values = {} }; return b
    }(), Bd = function () {
        function b(a, c, b, d) { this.keySelector = a; this.elementSelector = c; this.durationSelector = b; this.subjectSelector = d } b.prototype.call = function (a, c) {
            return c.subscribe(new Ad(a,
            this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector))
        }; return b
    }(), Ad = function (b) {
        function a(a, e, d, f, h) { b.call(this, a); this.keySelector = e; this.elementSelector = d; this.durationSelector = f; this.subjectSelector = h; this.groups = null; this.attemptedToUnsubscribe = !1; this.count = 0 } __extends(a, b); a.prototype._next = function (a) { var c; try { c = this.keySelector(a) } catch (d) { this.error(d); return } this._group(a, c) }; a.prototype._group = function (a, b) {
            var c = this.groups; c || (c = this.groups = "string" ===
            typeof b ? new zd : new yd); var e = c.get(b), h; if (this.elementSelector) try { h = this.elementSelector(a) } catch (D) { this.error(D) } else h = a; if (!e && (e = this.subjectSelector ? this.subjectSelector() : new y, c.set(b, e), a = new bb(b, e, this), this.destination.next(a), this.durationSelector)) { a = void 0; try { a = this.durationSelector(new bb(b, e)) } catch (D) { this.error(D); return } this.add(a.subscribe(new Cd(b, e, this))) } e.closed || e.next(h)
        }; a.prototype._error = function (a) {
            var c = this.groups; c && (c.forEach(function (c, b) { c.error(a) }), c.clear());
            this.destination.error(a)
        }; a.prototype._complete = function () { var a = this.groups; a && (a.forEach(function (a, c) { a.complete() }), a.clear()); this.destination.complete() }; a.prototype.removeGroup = function (a) { this.groups.delete(a) }; a.prototype.unsubscribe = function () { this.closed || this.attemptedToUnsubscribe || (this.attemptedToUnsubscribe = !0, 0 === this.count && b.prototype.unsubscribe.call(this)) }; return a
    }(p), Cd = function (b) {
        function a(a, e, d) { b.call(this); this.key = a; this.group = e; this.parent = d } __extends(a, b); a.prototype._next =
        function (a) { this._complete() }; a.prototype._error = function (a) { var c = this.group; c.closed || c.error(a); this.parent.removeGroup(this.key) }; a.prototype._complete = function () { var a = this.group; a.closed || a.complete(); this.parent.removeGroup(this.key) }; return a
    }(p), bb = function (b) {
        function a(a, e, d) { b.call(this); this.key = a; this.groupSubject = e; this.refCountSubscription = d } __extends(a, b); a.prototype._subscribe = function (a) {
            var c = new x, b = this.refCountSubscription, f = this.groupSubject; b && !b.closed && c.add(new Dd(b));
            c.add(f.subscribe(a)); return c
        }; return a
    }(g), Dd = function (b) { function a(a) { b.call(this); this.parent = a; a.count++ } __extends(a, b); a.prototype.unsubscribe = function () { var a = this.parent; a.closed || this.closed || (b.prototype.unsubscribe.call(this), --a.count, 0 === a.count && a.attemptedToUnsubscribe && a.unsubscribe()) }; return a }(x); g.prototype.groupBy = function (b, a, c, e) { return this.lift(new Bd(b, a, c, e)) }; var Fd = function () { function b() { } b.prototype.call = function (a, c) { return c.subscribe(new Ed(a)) }; return b }(), Ed = function (b) {
        function a() {
            b.apply(this,
            arguments)
        } __extends(a, b); a.prototype._next = function (a) { }; return a
    }(p); g.prototype.ignoreElements = function () { return this.lift(new Fd) }; var Hd = function () { function b() { } b.prototype.call = function (a, c) { return c.subscribe(new Gd(a)) }; return b }(), Gd = function (b) { function a(a) { b.call(this, a) } __extends(a, b); a.prototype.notifyComplete = function (a) { var c = this.destination; c.next(a); c.complete() }; a.prototype._next = function (a) { this.notifyComplete(!1) }; a.prototype._complete = function () { this.notifyComplete(!0) }; return a }(p);
    g.prototype.isEmpty = function () { return this.lift(new Hd) }; var Jd = function () { function b(a) { this.durationSelector = a } b.prototype.call = function (a, c) { return c.subscribe(new Id(a, this.durationSelector)) }; return b }(), Id = function (b) {
        function a(a, e) { b.call(this, a); this.durationSelector = e; this.hasValue = !1 } __extends(a, b); a.prototype._next = function (a) { this.value = a; this.hasValue = !0; this.throttled || (a = k(this.durationSelector)(a), a === n ? this.destination.error(n.e) : this.add(this.throttled = q(this, a))) }; a.prototype.clearThrottle =
        function () { var a = this.value, b = this.hasValue, d = this.throttled; d && (this.remove(d), this.throttled = null, d.unsubscribe()); b && (this.value = null, this.hasValue = !1, this.destination.next(a)) }; a.prototype.notifyNext = function (a, b, d, f) { this.clearThrottle() }; a.prototype.notifyComplete = function () { this.clearThrottle() }; return a
    }(t); g.prototype.audit = function (b) { return this.lift(new Jd(b)) }; var Ld = function () {
        function b(a, c) { this.duration = a; this.scheduler = c } b.prototype.call = function (a, c) {
            return c.subscribe(new Kd(a,
            this.duration, this.scheduler))
        }; return b
    }(), Kd = function (b) {
        function a(a, e, d) { b.call(this, a); this.duration = e; this.scheduler = d; this.hasValue = !1 } __extends(a, b); a.prototype._next = function (a) { this.value = a; this.hasValue = !0; this.throttled || this.add(this.throttled = this.scheduler.schedule(Fb, this.duration, this)) }; a.prototype.clearThrottle = function () { var a = this.value, b = this.hasValue, d = this.throttled; d && (this.remove(d), this.throttled = null, d.unsubscribe()); b && (this.value = null, this.hasValue = !1, this.destination.next(a)) };
        return a
    }(p); g.prototype.auditTime = function (b, a) { void 0 === a && (a = C); return this.lift(new Ld(b, a)) }; var Nd = function () { function b(a, c, b, d) { this.predicate = a; this.resultSelector = c; this.defaultValue = b; this.source = d } b.prototype.call = function (a, c) { return c.subscribe(new Md(a, this.predicate, this.resultSelector, this.defaultValue, this.source)) }; return b }(), Md = function (b) {
        function a(a, e, d, f, h) {
            b.call(this, a); this.predicate = e; this.resultSelector = d; this.defaultValue = f; this.source = h; this.hasValue = !1; this.index =
            0; "undefined" !== typeof f && (this.lastValue = f, this.hasValue = !0)
        } __extends(a, b); a.prototype._next = function (a) { var c = this.index++; this.predicate ? this._tryPredicate(a, c) : this.resultSelector ? this._tryResultSelector(a, c) : (this.lastValue = a, this.hasValue = !0) }; a.prototype._tryPredicate = function (a, b) { var c; try { c = this.predicate(a, b, this.source) } catch (f) { this.destination.error(f); return } c && (this.resultSelector ? this._tryResultSelector(a, b) : (this.lastValue = a, this.hasValue = !0)) }; a.prototype._tryResultSelector = function (a,
        b) { var c; try { c = this.resultSelector(a, b) } catch (f) { this.destination.error(f); return } this.lastValue = c; this.hasValue = !0 }; a.prototype._complete = function () { var a = this.destination; this.hasValue ? (a.next(this.lastValue), a.complete()) : a.error(new ea) }; return a
    }(p); g.prototype.last = function (b, a, c) { return this.lift(new Nd(b, a, c, this)) }; g.prototype.let = Ja; g.prototype.letBind = Ja; var Pd = function () {
        function b(a, c, b) { this.predicate = a; this.thisArg = c; this.source = b } b.prototype.call = function (a, c) {
            return c.subscribe(new Od(a,
            this.predicate, this.thisArg, this.source))
        }; return b
    }(), Od = function (b) {
        function a(a, e, d, f) { b.call(this, a); this.predicate = e; this.thisArg = d; this.source = f; this.index = 0; this.thisArg = d || this } __extends(a, b); a.prototype.notifyComplete = function (a) { this.destination.next(a); this.destination.complete() }; a.prototype._next = function (a) { var c = !1; try { c = this.predicate.call(this.thisArg, a, this.index++, this.source) } catch (d) { this.destination.error(d); return } c || this.notifyComplete(!1) }; a.prototype._complete = function () { this.notifyComplete(!0) };
        return a
    }(p); g.prototype.every = function (b, a) { return this.lift(new Pd(b, a, this)) }; g.prototype.map = xa; var Rd = function () { function b(a) { this.value = a } b.prototype.call = function (a, c) { return c.subscribe(new Qd(a, this.value)) }; return b }(), Qd = function (b) { function a(a, e) { b.call(this, a); this.value = e } __extends(a, b); a.prototype._next = function (a) { this.destination.next(this.value) }; return a }(p); g.prototype.mapTo = function (b) { return this.lift(new Rd(b)) }; var Td = function () {
        function b() { } b.prototype.call = function (a,
        c) { return c.subscribe(new Sd(a)) }; return b
    }(), Sd = function (b) { function a(a) { b.call(this, a) } __extends(a, b); a.prototype._next = function (a) { this.destination.next(z.createNext(a)) }; a.prototype._error = function (a) { var c = this.destination; c.next(z.createError(a)); c.complete() }; a.prototype._complete = function () { var a = this.destination; a.next(z.createComplete()); a.complete() }; return a }(p); g.prototype.materialize = function () { return this.lift(new Td) }; var oa = function () {
        function b(a, c, b) {
            void 0 === b && (b = !1); this.accumulator =
            a; this.seed = c; this.hasSeed = b
        } b.prototype.call = function (a, c) { return c.subscribe(new Ud(a, this.accumulator, this.seed, this.hasSeed)) }; return b
    }(), Ud = function (b) {
        function a(a, e, d, f) { b.call(this, a); this.accumulator = e; this.hasSeed = f; this.hasValue = !1; this.acc = d } __extends(a, b); a.prototype._next = function (a) { this.hasValue || (this.hasValue = this.hasSeed) ? this._tryReduce(a) : (this.acc = a, this.hasValue = !0) }; a.prototype._tryReduce = function (a) {
            var c; try { c = this.accumulator(this.acc, a) } catch (d) {
                this.destination.error(d);
                return
            } this.acc = c
        }; a.prototype._complete = function () { (this.hasValue || this.hasSeed) && this.destination.next(this.acc); this.destination.complete() }; return a
    }(p); g.prototype.max = function (b) { return this.lift(new oa("function" === typeof b ? function (a, c) { return 0 < b(a, c) ? a : c } : function (a, c) { return a > c ? a : c })) }; g.prototype.merge = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; return this.lift.call(ta.apply(void 0, [this].concat(b))) }; g.prototype.mergeAll = function (b) {
        void 0 === b && (b = Number.POSITIVE_INFINITY);
        return this.lift(new aa(b))
    }; g.prototype.mergeMap = Ca; g.prototype.flatMap = Ca; g.prototype.flatMapTo = Ea; g.prototype.mergeMapTo = Ea; var Wd = function () { function b(a, c, b) { this.project = a; this.seed = c; this.concurrent = b } b.prototype.call = function (a, c) { return c.subscribe(new Vd(a, this.project, this.seed, this.concurrent)) }; return b }(), Vd = function (b) {
        function a(a, e, d, f) { b.call(this, a); this.project = e; this.acc = d; this.concurrent = f; this.hasCompleted = this.hasValue = !1; this.buffer = []; this.index = this.active = 0 } __extends(a,
        b); a.prototype._next = function (a) { if (this.active < this.concurrent) { var c = this.index++, b = k(this.project)(this.acc, a), f = this.destination; b === n ? f.error(n.e) : (this.active++, this._innerSub(b, a, c)) } else this.buffer.push(a) }; a.prototype._innerSub = function (a, b, d) { this.add(q(this, a, b, d)) }; a.prototype._complete = function () { this.hasCompleted = !0; 0 === this.active && 0 === this.buffer.length && (!1 === this.hasValue && this.destination.next(this.acc), this.destination.complete()) }; a.prototype.notifyNext = function (a, b, d, f, h) {
            a =
            this.destination; this.acc = b; this.hasValue = !0; a.next(b)
        }; a.prototype.notifyComplete = function (a) { var c = this.buffer; this.remove(a); this.active--; 0 < c.length ? this._next(c.shift()) : 0 === this.active && this.hasCompleted && (!1 === this.hasValue && this.destination.next(this.acc), this.destination.complete()) }; return a
    }(t); g.prototype.mergeScan = function (b, a, c) { void 0 === c && (c = Number.POSITIVE_INFINITY); return this.lift(new Wd(b, a, c)) }; g.prototype.min = function (b) {
        return this.lift(new oa("function" === typeof b ? function (a,
        c) { return 0 > b(a, c) ? a : c } : function (a, c) { return a < c ? a : c }))
    }; var X = function (b) {
        function a(a, e) { b.call(this); this.source = a; this.subjectFactory = e; this._refCount = 0 } __extends(a, b); a.prototype._subscribe = function (a) { return this.getSubject().subscribe(a) }; a.prototype.getSubject = function () { var a = this._subject; if (!a || a.isStopped) this._subject = this.subjectFactory(); return this._subject }; a.prototype.connect = function () {
            var a = this._connection; a || (a = this._connection = new x, a.add(this.source.subscribe(new Xd(this.getSubject(),
            this))), a.closed ? (this._connection = null, a = x.EMPTY) : this._connection = a); return a
        }; a.prototype.refCount = function () { return this.lift(new Yd(this)) }; return a
    }(g), Hb = { operator: { value: null }, _refCount: { value: 0, writable: !0 }, _subscribe: { value: X.prototype._subscribe }, getSubject: { value: X.prototype.getSubject }, connect: { value: X.prototype.connect }, refCount: { value: X.prototype.refCount } }, Xd = function (b) {
        function a(a, e) { b.call(this, a); this.connectable = e } __extends(a, b); a.prototype._error = function (a) {
            this._unsubscribe();
            b.prototype._error.call(this, a)
        }; a.prototype._complete = function () { this._unsubscribe(); b.prototype._complete.call(this) }; a.prototype._unsubscribe = function () { var a = this.connectable; if (a) { this.connectable = null; var b = a._connection; a._refCount = 0; a._subject = null; a._connection = null; b && b.unsubscribe() } }; return a
    }(Pa), Yd = function () {
        function b(a) { this.connectable = a } b.prototype.call = function (a, c) { var b = this.connectable; b._refCount++; a = new Zd(a, b); c = c.subscribe(a); a.closed || (a.connection = b.connect()); return c };
        return b
    }(), Zd = function (b) { function a(a, e) { b.call(this, a); this.connectable = e } __extends(a, b); a.prototype._unsubscribe = function () { var a = this.connectable; if (a) { this.connectable = null; var b = a._refCount; 0 >= b ? this.connection = null : (a._refCount = b - 1, 1 < b ? this.connection = null : (b = this.connection, a = a._connection, this.connection = null, !a || b && a !== b || a.unsubscribe())) } else this.connection = null }; return a }(p), Gb = function () {
        function b(a, c) { this.subjectFactory = a; this.selector = c } b.prototype.call = function (a, c) {
            var b = this.selector,
            d = this.subjectFactory(); a = b(d).subscribe(a); a.add(c.subscribe(d)); return a
        }; return b
    }(); g.prototype.multicast = N; g.prototype.observeOn = function (b, a) { void 0 === a && (a = 0); return this.lift(new bc(b, a)) }; g.prototype.onErrorResumeNext = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; 1 === b.length && H(b[0]) && (b = b[0]); return this.lift(new Wa(b)) }; var ae = function () { function b() { } b.prototype.call = function (a, c) { return c.subscribe(new $d(a)) }; return b }(), $d = function (b) {
        function a(a) {
            b.call(this,
            a); this.hasPrev = !1
        } __extends(a, b); a.prototype._next = function (a) { this.hasPrev ? this.destination.next([this.prev, a]) : this.hasPrev = !0; this.prev = a }; return a
    }(p); g.prototype.pairwise = function () { return this.lift(new ae) }; g.prototype.partition = function (b, a) { return [ha.call(this, b, a), ha.call(this, Ib(b, a))] }; g.prototype.pluck = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; a = b.length; if (0 === a) throw Error("list of properties cannot be empty."); return xa.call(this, Jb(b, a)) }; g.prototype.publish =
    function (b) { return b ? N.call(this, function () { return new y }, b) : N.call(this, new y) }; var cb = function (b) {
        function a(a) { b.call(this); this._value = a } __extends(a, b); Object.defineProperty(a.prototype, "value", { get: function () { return this.getValue() }, enumerable: !0, configurable: !0 }); a.prototype._subscribe = function (a) { var c = b.prototype._subscribe.call(this, a); c && !c.closed && a.next(this._value); return c }; a.prototype.getValue = function () { if (this.hasError) throw this.thrownError; if (this.closed) throw new O; return this._value };
        a.prototype.next = function (a) { b.prototype.next.call(this, this._value = a) }; return a
    }(y); g.prototype.publishBehavior = function (b) { return N.call(this, new cb(b)) }; g.prototype.publishReplay = function (b, a, c) { void 0 === b && (b = Number.POSITIVE_INFINITY); void 0 === a && (a = Number.POSITIVE_INFINITY); return N.call(this, new R(b, a, c)) }; g.prototype.publishLast = function () { return N.call(this, new P) }; g.prototype.race = function () {
        for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; 1 === b.length && H(b[0]) && (b = b[0]); return this.lift.call(ua.apply(void 0,
        [this].concat(b)))
    }; g.prototype.reduce = function (b, a) { var c = !1; 2 <= arguments.length && (c = !0); return this.lift(new oa(b, a, c)) }; var db = function () { function b(a, c) { this.count = a; this.source = c } b.prototype.call = function (a, c) { return c.subscribe(new be(a, this.count, this.source)) }; return b }(), be = function (b) {
        function a(a, e, d) { b.call(this, a); this.count = e; this.source = d } __extends(a, b); a.prototype.complete = function () {
            if (!this.isStopped) {
                var a = this.source, e = this.count; if (0 === e) return b.prototype.complete.call(this);
                -1 < e && (this.count = e - 1); this.unsubscribe(); this.closed = this.isStopped = !1; a.subscribe(this)
            }
        }; return a
    }(p); g.prototype.repeat = function (b) { void 0 === b && (b = -1); return 0 === b ? new L : 0 > b ? this.lift(new db(-1, this)) : this.lift(new db(b - 1, this)) }; var de = function () { function b(a, c) { this.notifier = a; this.source = c } b.prototype.call = function (a, c) { return c.subscribe(new ce(a, this.notifier, this.source)) }; return b }(), ce = function (b) {
        function a(a, e, d) { b.call(this, a); this.notifier = e; this.source = d } __extends(a, b); a.prototype.complete =
        function () { if (!this.isStopped) { var a = this.notifications, e = this.retries, d = this.retriesSubscription; if (e) this.retriesSubscription = this.notifications = null; else { a = new y; e = k(this.notifier)(a); if (e === n) return b.prototype.complete.call(this); d = q(this, e) } this.unsubscribe(); this.closed = !1; this.notifications = a; this.retries = e; this.retriesSubscription = d; a.next() } }; a.prototype._unsubscribe = function () {
            var a = this.notifications, b = this.retriesSubscription; a && (a.unsubscribe(), this.notifications = null); b && (b.unsubscribe(),
            this.retriesSubscription = null); this.retries = null
        }; a.prototype.notifyNext = function (a, b, d, f, h) { a = this.notifications; b = this.retries; d = this.retriesSubscription; this.retriesSubscription = this.retries = this.notifications = null; this.unsubscribe(); this.closed = this.isStopped = !1; this.notifications = a; this.retries = b; this.retriesSubscription = d; this.source.subscribe(this) }; return a
    }(t); g.prototype.repeatWhen = function (b) { return this.lift(new de(b, this)) }; var fe = function () {
        function b(a, c) { this.count = a; this.source = c }
        b.prototype.call = function (a, c) { return c.subscribe(new ee(a, this.count, this.source)) }; return b
    }(), ee = function (b) { function a(a, e, d) { b.call(this, a); this.count = e; this.source = d } __extends(a, b); a.prototype.error = function (a) { if (!this.isStopped) { var c = this.source, d = this.count; if (0 === d) return b.prototype.error.call(this, a); -1 < d && (this.count = d - 1); this.unsubscribe(); this.closed = this.isStopped = !1; c.subscribe(this) } }; return a }(p); g.prototype.retry = function (b) { void 0 === b && (b = -1); return this.lift(new fe(b, this)) };
    var he = function () { function b(a, c) { this.notifier = a; this.source = c } b.prototype.call = function (a, c) { return c.subscribe(new ge(a, this.notifier, this.source)) }; return b }(), ge = function (b) {
        function a(a, e, d) { b.call(this, a); this.notifier = e; this.source = d } __extends(a, b); a.prototype.error = function (a) {
            if (!this.isStopped) {
                var c = this.errors, d = this.retries, f = this.retriesSubscription; if (d) this.retriesSubscription = this.errors = null; else {
                    c = new y; d = k(this.notifier)(c); if (d === n) return b.prototype.error.call(this, n.e); f = q(this,
                    d)
                } this.unsubscribe(); this.closed = !1; this.errors = c; this.retries = d; this.retriesSubscription = f; c.next(a)
            }
        }; a.prototype._unsubscribe = function () { var a = this.errors, b = this.retriesSubscription; a && (a.unsubscribe(), this.errors = null); b && (b.unsubscribe(), this.retriesSubscription = null); this.retries = null }; a.prototype.notifyNext = function (a, b, d, f, h) {
            a = this.errors; b = this.retries; d = this.retriesSubscription; this.retriesSubscription = this.retries = this.errors = null; this.unsubscribe(); this.closed = this.isStopped = !1; this.errors =
            a; this.retries = b; this.retriesSubscription = d; this.source.subscribe(this)
        }; return a
    }(t); g.prototype.retryWhen = function (b) { return this.lift(new he(b, this)) }; var je = function () { function b(a) { this.notifier = a } b.prototype.call = function (a, c) { a = new ie(a); c = c.subscribe(a); c.add(q(a, this.notifier)); return c }; return b }(), ie = function (b) {
        function a() { b.apply(this, arguments); this.hasValue = !1 } __extends(a, b); a.prototype._next = function (a) { this.value = a; this.hasValue = !0 }; a.prototype.notifyNext = function (a, b, d, f, h) { this.emitValue() };
        a.prototype.notifyComplete = function () { this.emitValue() }; a.prototype.emitValue = function () { this.hasValue && (this.hasValue = !1, this.destination.next(this.value)) }; return a
    }(t); g.prototype.sample = function (b) { return this.lift(new je(b)) }; var le = function () { function b(a, c) { this.period = a; this.scheduler = c } b.prototype.call = function (a, c) { return c.subscribe(new ke(a, this.period, this.scheduler)) }; return b }(), ke = function (b) {
        function a(a, e, d) {
            b.call(this, a); this.period = e; this.scheduler = d; this.hasValue = !1; this.add(d.schedule(Kb,
            e, { subscriber: this, period: e }))
        } __extends(a, b); a.prototype._next = function (a) { this.lastValue = a; this.hasValue = !0 }; a.prototype.notifyNext = function () { this.hasValue && (this.hasValue = !1, this.destination.next(this.lastValue)) }; return a
    }(p); g.prototype.sampleTime = function (b, a) { void 0 === a && (a = C); return this.lift(new le(b, a)) }; var ne = function () {
        function b(a, c, b) { void 0 === b && (b = !1); this.accumulator = a; this.seed = c; this.hasSeed = b } b.prototype.call = function (a, c) {
            return c.subscribe(new me(a, this.accumulator, this.seed,
            this.hasSeed))
        }; return b
    }(), me = function (b) {
        function a(a, e, d, f) { b.call(this, a); this.accumulator = e; this._seed = d; this.hasSeed = f; this.index = 0 } __extends(a, b); Object.defineProperty(a.prototype, "seed", { get: function () { return this._seed }, set: function (a) { this.hasSeed = !0; this._seed = a }, enumerable: !0, configurable: !0 }); a.prototype._next = function (a) { if (this.hasSeed) return this._tryNext(a); this.seed = a; this.destination.next(a) }; a.prototype._tryNext = function (a) {
            var c = this.index++, b; try {
                b = this.accumulator(this.seed,
                a, c)
            } catch (f) { this.destination.error(f) } this.seed = b; this.destination.next(b)
        }; return a
    }(p); g.prototype.scan = function (b, a) { var c = !1; 2 <= arguments.length && (c = !0); return this.lift(new ne(b, a, c)) }; var pe = function () { function b(a, c) { this.compareTo = a; this.comparor = c } b.prototype.call = function (a, c) { return c.subscribe(new oe(a, this.compareTo, this.comparor)) }; return b }(), oe = function (b) {
        function a(a, e, d) {
            b.call(this, a); this.compareTo = e; this.comparor = d; this._a = []; this._b = []; this._oneComplete = !1; this.add(e.subscribe(new qe(a,
            this)))
        } __extends(a, b); a.prototype._next = function (a) { this._oneComplete && 0 === this._b.length ? this.emit(!1) : (this._a.push(a), this.checkValues()) }; a.prototype._complete = function () { this._oneComplete ? this.emit(0 === this._a.length && 0 === this._b.length) : this._oneComplete = !0 }; a.prototype.checkValues = function () { for (var a = this._a, b = this._b, d = this.comparor; 0 < a.length && 0 < b.length;) { var f = a.shift(), h = b.shift(); d ? (f = k(d)(f, h), f === n && this.destination.error(n.e)) : f = f === h; f || this.emit(!1) } }; a.prototype.emit = function (a) {
            var c =
            this.destination; c.next(a); c.complete()
        }; a.prototype.nextB = function (a) { this._oneComplete && 0 === this._a.length ? this.emit(!1) : (this._b.push(a), this.checkValues()) }; return a
    }(p), qe = function (b) { function a(a, e) { b.call(this, a); this.parent = e } __extends(a, b); a.prototype._next = function (a) { this.parent.nextB(a) }; a.prototype._error = function (a) { this.parent.error(a) }; a.prototype._complete = function () { this.parent._complete() }; return a }(p); g.prototype.sequenceEqual = function (b, a) { return this.lift(new pe(b, a)) }; g.prototype.share =
    function () { return N.call(this, Lb).refCount() }; var se = function () { function b(a, c) { this.predicate = a; this.source = c } b.prototype.call = function (a, c) { return c.subscribe(new re(a, this.predicate, this.source)) }; return b }(), re = function (b) {
        function a(a, e, d) { b.call(this, a); this.predicate = e; this.source = d; this.seenValue = !1; this.index = 0 } __extends(a, b); a.prototype.applySingleValue = function (a) { this.seenValue ? this.destination.error("Sequence contains more than one element") : (this.seenValue = !0, this.singleValue = a) }; a.prototype._next =
        function (a) { var c = this.predicate; this.index++; c ? this.tryNext(a) : this.applySingleValue(a) }; a.prototype.tryNext = function (a) { try { this.predicate(a, this.index, this.source) && this.applySingleValue(a) } catch (e) { this.destination.error(e) } }; a.prototype._complete = function () { var a = this.destination; 0 < this.index ? (a.next(this.seenValue ? this.singleValue : void 0), a.complete()) : a.error(new ea) }; return a
    }(p); g.prototype.single = function (b) { return this.lift(new se(b, this)) }; var ue = function () {
        function b(a) { this.total = a }
        b.prototype.call = function (a, c) { return c.subscribe(new te(a, this.total)) }; return b
    }(), te = function (b) { function a(a, e) { b.call(this, a); this.total = e; this.count = 0 } __extends(a, b); a.prototype._next = function (a) { ++this.count > this.total && this.destination.next(a) }; return a }(p); g.prototype.skip = function (b) { return this.lift(new ue(b)) }; var we = function () { function b(a) { this.notifier = a } b.prototype.call = function (a, c) { return c.subscribe(new ve(a, this.notifier)) }; return b }(), ve = function (b) {
        function a(a, e) {
            b.call(this,
            a); this.isInnerStopped = this.hasValue = !1; this.add(q(this, e))
        } __extends(a, b); a.prototype._next = function (a) { this.hasValue && b.prototype._next.call(this, a) }; a.prototype._complete = function () { this.isInnerStopped ? b.prototype._complete.call(this) : this.unsubscribe() }; a.prototype.notifyNext = function (a, b, d, f, h) { this.hasValue = !0 }; a.prototype.notifyComplete = function () { this.isInnerStopped = !0; this.isStopped && b.prototype._complete.call(this) }; return a
    }(t); g.prototype.skipUntil = function (b) { return this.lift(new we(b)) };
    var ye = function () { function b(a) { this.predicate = a } b.prototype.call = function (a, c) { return c.subscribe(new xe(a, this.predicate)) }; return b }(), xe = function (b) { function a(a, e) { b.call(this, a); this.predicate = e; this.skipping = !0; this.index = 0 } __extends(a, b); a.prototype._next = function (a) { var c = this.destination; this.skipping && this.tryCallPredicate(a); this.skipping || c.next(a) }; a.prototype.tryCallPredicate = function (a) { try { this.skipping = !!this.predicate(a, this.index++) } catch (e) { this.destination.error(e) } }; return a }(p);
    g.prototype.skipWhile = function (b) { return this.lift(new ye(b)) }; g.prototype.startWith = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; a = b[b.length - 1]; G(a) ? b.pop() : a = null; var c = b.length; return 1 === c ? S(new la(b[0], a), this) : 1 < c ? S(new K(b, a), this) : S(new L(a), this) }; var eb = new (function () {
        function b(a) {
            this.root = a; a.setImmediate && "function" === typeof a.setImmediate ? (this.setImmediate = a.setImmediate.bind(a), this.clearImmediate = a.clearImmediate.bind(a)) : (this.nextHandle = 1, this.tasksByHandle =
            {}, this.currentlyRunningATask = !1, this.canUseProcessNextTick() ? this.setImmediate = this.createProcessNextTickSetImmediate() : this.canUsePostMessage() ? this.setImmediate = this.createPostMessageSetImmediate() : this.canUseMessageChannel() ? this.setImmediate = this.createMessageChannelSetImmediate() : this.canUseReadyStateChange() ? this.setImmediate = this.createReadyStateChangeSetImmediate() : this.setImmediate = this.createSetTimeoutSetImmediate(), a = function e(a) { delete e.instance.tasksByHandle[a] }, a.instance = this, this.clearImmediate =
            a)
        } b.prototype.identify = function (a) { return this.root.Object.prototype.toString.call(a) }; b.prototype.canUseProcessNextTick = function () { return "[object process]" === this.identify(this.root.process) }; b.prototype.canUseMessageChannel = function () { return !!this.root.MessageChannel }; b.prototype.canUseReadyStateChange = function () { var a = this.root.document; return !!(a && "onreadystatechange" in a.createElement("script")) }; b.prototype.canUsePostMessage = function () {
            var a = this.root; if (a.postMessage && !a.importScripts) {
                var c =
                !0, b = a.onmessage; a.onmessage = function () { c = !1 }; a.postMessage("", "*"); a.onmessage = b; return c
            } return !1
        }; b.prototype.partiallyApplied = function (a) { for (var c = [], b = 1; b < arguments.length; b++) c[b - 1] = arguments[b]; b = function f() { var a = f.handler, c = f.args; "function" === typeof a ? a.apply(void 0, c) : (new Function("" + a))() }; b.handler = a; b.args = c; return b }; b.prototype.addFromSetImmediateArguments = function (a) { this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(void 0, a); return this.nextHandle++ }; b.prototype.createProcessNextTickSetImmediate =
        function () { var a = function e() { var a = e.instance, b = a.addFromSetImmediateArguments(arguments); a.root.process.nextTick(a.partiallyApplied(a.runIfPresent, b)); return b }; a.instance = this; return a }; b.prototype.createPostMessageSetImmediate = function () {
            var a = this.root, b = "setImmediate$" + a.Math.random() + "$", e = function f(c) { var e = f.instance; c.source === a && "string" === typeof c.data && 0 === c.data.indexOf(b) && e.runIfPresent(+c.data.slice(b.length)) }; e.instance = this; a.addEventListener("message", e, !1); e = function h() {
                var a =
                h, b = a.messagePrefix, a = a.instance, c = a.addFromSetImmediateArguments(arguments); a.root.postMessage(b + c, "*"); return c
            }; e.instance = this; e.messagePrefix = b; return e
        }; b.prototype.runIfPresent = function (a) { if (this.currentlyRunningATask) this.root.setTimeout(this.partiallyApplied(this.runIfPresent, a), 0); else { var b = this.tasksByHandle[a]; if (b) { this.currentlyRunningATask = !0; try { b() } finally { this.clearImmediate(a), this.currentlyRunningATask = !1 } } } }; b.prototype.createMessageChannelSetImmediate = function () {
            var a = this,
            b = new this.root.MessageChannel; b.port1.onmessage = function (b) { a.runIfPresent(b.data) }; var e = function f() { var a = f, b = a.channel, a = a.instance.addFromSetImmediateArguments(arguments); b.port2.postMessage(a); return a }; e.channel = b; e.instance = this; return e
        }; b.prototype.createReadyStateChangeSetImmediate = function () {
            var a = function e() {
                var a = e.instance, b = a.root.document, h = b.documentElement, g = a.addFromSetImmediateArguments(arguments), k = b.createElement("script"); k.onreadystatechange = function () {
                    a.runIfPresent(g);
                    k.onreadystatechange = null; h.removeChild(k); k = null
                }; h.appendChild(k); return g
            }; a.instance = this; return a
        }; b.prototype.createSetTimeoutSetImmediate = function () { var a = function e() { var a = e.instance, b = a.addFromSetImmediateArguments(arguments); a.root.setTimeout(a.partiallyApplied(a.runIfPresent, b), 0); return b }; a.instance = this; return a }; return b
    }())(r), ze = function (b) {
        function a(a, e) { b.call(this, a, e); this.scheduler = a; this.work = e } __extends(a, b); a.prototype.requestAsyncId = function (a, e, d) {
            void 0 === d && (d = 0); if (null !==
            d && 0 < d) return b.prototype.requestAsyncId.call(this, a, e, d); a.actions.push(this); return a.scheduled || (a.scheduled = eb.setImmediate(a.flush.bind(a, null)))
        }; a.prototype.recycleAsyncId = function (a, e, d) { void 0 === d && (d = 0); if (null !== d && 0 < d || null === d && 0 < this.delay) return b.prototype.recycleAsyncId.call(this, a, e, d); 0 === a.actions.length && (eb.clearImmediate(e), a.scheduled = void 0) }; return a
    }(U), fa = new (function (b) {
        function a() { b.apply(this, arguments) } __extends(a, b); a.prototype.flush = function (a) {
            this.active = !0; this.scheduled =
            void 0; var b = this.actions, c, f = -1, h = b.length; a = a || b.shift(); do if (c = a.execute(a.state, a.delay)) break; while (++f < h && (a = b.shift())); this.active = !1; if (c) { for (; ++f < h && (a = b.shift()) ;) a.unsubscribe(); throw c; }
        }; return a
    }(V))(ze), Ae = function (b) {
        function a(a, e, d) { void 0 === e && (e = 0); void 0 === d && (d = fa); b.call(this); this.source = a; this.delayTime = e; this.scheduler = d; if (!ga(e) || 0 > e) this.delayTime = 0; d && "function" === typeof d.schedule || (this.scheduler = fa) } __extends(a, b); a.create = function (b, e, d) {
            void 0 === e && (e = 0); void 0 ===
            d && (d = fa); return new a(b, e, d)
        }; a.dispatch = function (a) { return this.add(a.source.subscribe(a.subscriber)) }; a.prototype._subscribe = function (b) { return this.scheduler.schedule(a.dispatch, this.delayTime, { source: this.source, subscriber: b }) }; return a
    }(g), Be = function () { function b(a, b) { this.scheduler = a; this.delay = b } b.prototype.call = function (a, b) { return (new Ae(b, this.delay, this.scheduler)).subscribe(a) }; return b }(); g.prototype.subscribeOn = function (b, a) { void 0 === a && (a = 0); return this.lift(new Be(b, a)) }; var Mb =
    function () { function b() { } b.prototype.call = function (a, b) { return b.subscribe(new Ce(a)) }; return b }(), Ce = function (b) {
        function a(a) { b.call(this, a); this.active = 0; this.hasCompleted = !1 } __extends(a, b); a.prototype._next = function (a) { this.unsubscribeInner(); this.active++; this.add(this.innerSubscription = q(this, a)) }; a.prototype._complete = function () { this.hasCompleted = !0; 0 === this.active && this.destination.complete() }; a.prototype.unsubscribeInner = function () {
            this.active = 0 < this.active ? this.active - 1 : 0; var a = this.innerSubscription;
            a && (a.unsubscribe(), this.remove(a))
        }; a.prototype.notifyNext = function (a, b, d, f, h) { this.destination.next(b) }; a.prototype.notifyError = function (a) { this.destination.error(a) }; a.prototype.notifyComplete = function () { this.unsubscribeInner(); this.hasCompleted && 0 === this.active && this.destination.complete() }; return a
    }(t); g.prototype.switch = Ka; g.prototype._switch = Ka; var Ee = function () {
        function b(a, b) { this.project = a; this.resultSelector = b } b.prototype.call = function (a, b) { return b.subscribe(new De(a, this.project, this.resultSelector)) };
        return b
    }(), De = function (b) {
        function a(a, e, d) { b.call(this, a); this.project = e; this.resultSelector = d; this.index = 0 } __extends(a, b); a.prototype._next = function (a) { var b, c = this.index++; try { b = this.project(a, c) } catch (f) { this.destination.error(f); return } this._innerSub(b, a, c) }; a.prototype._innerSub = function (a, b, d) { var c = this.innerSubscription; c && c.unsubscribe(); this.add(this.innerSubscription = q(this, a, b, d)) }; a.prototype._complete = function () { var a = this.innerSubscription; a && !a.closed || b.prototype._complete.call(this) };
        a.prototype._unsubscribe = function () { this.innerSubscription = null }; a.prototype.notifyComplete = function (a) { this.remove(a); this.innerSubscription = null; this.isStopped && b.prototype._complete.call(this) }; a.prototype.notifyNext = function (a, b, d, f, h) { this.resultSelector ? this._tryNotifyNext(a, b, d, f) : this.destination.next(b) }; a.prototype._tryNotifyNext = function (a, b, d, f) { var c; try { c = this.resultSelector(a, b, d, f) } catch (D) { this.destination.error(D); return } this.destination.next(c) }; return a
    }(t); g.prototype.switchMap =
    function (b, a) { return this.lift(new Ee(b, a)) }; var Ge = function () { function b(a, b) { this.observable = a; this.resultSelector = b } b.prototype.call = function (a, b) { return b.subscribe(new Fe(a, this.observable, this.resultSelector)) }; return b }(), Fe = function (b) {
        function a(a, e, d) { b.call(this, a); this.inner = e; this.resultSelector = d; this.index = 0 } __extends(a, b); a.prototype._next = function (a) { var b = this.innerSubscription; b && b.unsubscribe(); this.add(this.innerSubscription = q(this, this.inner, a, this.index++)) }; a.prototype._complete =
        function () { var a = this.innerSubscription; a && !a.closed || b.prototype._complete.call(this) }; a.prototype._unsubscribe = function () { this.innerSubscription = null }; a.prototype.notifyComplete = function (a) { this.remove(a); this.innerSubscription = null; this.isStopped && b.prototype._complete.call(this) }; a.prototype.notifyNext = function (a, b, d, f, g) { g = this.destination; this.resultSelector ? this.tryResultSelector(a, b, d, f) : g.next(b) }; a.prototype.tryResultSelector = function (a, b, d, f) {
            var c = this.resultSelector, e = this.destination,
            g; try { g = c(a, b, d, f) } catch (J) { e.error(J); return } e.next(g)
        }; return a
    }(t); g.prototype.switchMapTo = function (b, a) { return this.lift(new Ge(b, a)) }; var Ie = function () { function b(a) { this.total = a; if (0 > this.total) throw new W; } b.prototype.call = function (a, b) { return b.subscribe(new He(a, this.total)) }; return b }(), He = function (b) {
        function a(a, e) { b.call(this, a); this.total = e; this.count = 0 } __extends(a, b); a.prototype._next = function (a) {
            var b = this.total, c = ++this.count; c <= b && (this.destination.next(a), c === b && (this.destination.complete(),
            this.unsubscribe()))
        }; return a
    }(p); g.prototype.take = function (b) { return 0 === b ? new L : this.lift(new Ie(b)) }; var Ke = function () { function b(a) { this.total = a; if (0 > this.total) throw new W; } b.prototype.call = function (a, b) { return b.subscribe(new Je(a, this.total)) }; return b }(), Je = function (b) {
        function a(a, e) { b.call(this, a); this.total = e; this.ring = []; this.count = 0 } __extends(a, b); a.prototype._next = function (a) { var b = this.ring, c = this.total, f = this.count++; b.length < c ? b.push(a) : b[f % c] = a }; a.prototype._complete = function () {
            var a =
            this.destination, b = this.count; if (0 < b) for (var d = this.count >= this.total ? this.total : this.count, f = this.ring, g = 0; g < d; g++) { var k = b++ % d; a.next(f[k]) } a.complete()
        }; return a
    }(p); g.prototype.takeLast = function (b) { return 0 === b ? new L : this.lift(new Ke(b)) }; var Me = function () { function b(a) { this.notifier = a } b.prototype.call = function (a, b) { return b.subscribe(new Le(a, this.notifier)) }; return b }(), Le = function (b) {
        function a(a, e) { b.call(this, a); this.notifier = e; this.add(q(this, e)) } __extends(a, b); a.prototype.notifyNext = function (a,
        b, d, f, g) { this.complete() }; a.prototype.notifyComplete = function () { }; return a
    }(t); g.prototype.takeUntil = function (b) { return this.lift(new Me(b)) }; var Oe = function () { function b(a) { this.predicate = a } b.prototype.call = function (a, b) { return b.subscribe(new Ne(a, this.predicate)) }; return b }(), Ne = function (b) {
        function a(a, e) { b.call(this, a); this.predicate = e; this.index = 0 } __extends(a, b); a.prototype._next = function (a) {
            var b = this.destination, c; try { c = this.predicate(a, this.index++) } catch (f) { b.error(f); return } this.nextOrComplete(a,
            c)
        }; a.prototype.nextOrComplete = function (a, b) { var c = this.destination; b ? c.next(a) : c.complete() }; return a
    }(p); g.prototype.takeWhile = function (b) { return this.lift(new Oe(b)) }; var Qe = function () { function b(a) { this.durationSelector = a } b.prototype.call = function (a, b) { return b.subscribe(new Pe(a, this.durationSelector)) }; return b }(), Pe = function (b) {
        function a(a, e) { b.call(this, a); this.destination = a; this.durationSelector = e } __extends(a, b); a.prototype._next = function (a) { this.throttled || this.tryDurationSelector(a) };
        a.prototype.tryDurationSelector = function (a) { var b = null; try { b = this.durationSelector(a) } catch (d) { this.destination.error(d); return } this.emitAndThrottle(a, b) }; a.prototype.emitAndThrottle = function (a, b) { this.add(this.throttled = q(this, b)); this.destination.next(a) }; a.prototype._unsubscribe = function () { var a = this.throttled; a && (this.remove(a), this.throttled = null, a.unsubscribe()) }; a.prototype.notifyNext = function (a, b, d, f, g) { this._unsubscribe() }; a.prototype.notifyComplete = function () { this._unsubscribe() }; return a
    }(t);
    g.prototype.throttle = function (b) { return this.lift(new Qe(b)) }; var Se = function () { function b(a, b) { this.duration = a; this.scheduler = b } b.prototype.call = function (a, b) { return b.subscribe(new Re(a, this.duration, this.scheduler)) }; return b }(), Re = function (b) {
        function a(a, e, d) { b.call(this, a); this.duration = e; this.scheduler = d } __extends(a, b); a.prototype._next = function (a) { this.throttled || (this.add(this.throttled = this.scheduler.schedule(Nb, this.duration, { subscriber: this })), this.destination.next(a)) }; a.prototype.clearThrottle =
        function () { var a = this.throttled; a && (a.unsubscribe(), this.remove(a), this.throttled = null) }; return a
    }(p); g.prototype.throttleTime = function (b, a) { void 0 === a && (a = C); return this.lift(new Se(b, a)) }; var fb = function () { return function (b, a) { this.value = b; this.interval = a } }(), Ue = function () { function b(a) { this.scheduler = a } b.prototype.call = function (a, b) { return b.subscribe(new Te(a, this.scheduler)) }; return b }(), Te = function (b) {
        function a(a, e) { b.call(this, a); this.scheduler = e; this.lastTime = 0; this.lastTime = e.now() } __extends(a,
        b); a.prototype._next = function (a) { var b = this.scheduler.now(), c = b - this.lastTime; this.lastTime = b; this.destination.next(new fb(a, c)) }; return a
    }(p); g.prototype.timeInterval = function (b) { void 0 === b && (b = C); return this.lift(new Ue(b)) }; var gb = function (b) { function a() { var a = b.call(this, "Timeout has occurred"); this.name = a.name = "TimeoutError"; this.stack = a.stack; this.message = a.message } __extends(a, b); return a }(Error), We = function () {
        function b(a, b, e, d) {
            this.waitFor = a; this.absoluteTimeout = b; this.scheduler = e; this.errorInstance =
            d
        } b.prototype.call = function (a, b) { return b.subscribe(new Ve(a, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance)) }; return b
    }(), Ve = function (b) {
        function a(a, e, d, f, g) { b.call(this, a); this.absoluteTimeout = e; this.waitFor = d; this.scheduler = f; this.errorInstance = g; this._previousIndex = this.index = 0; this._hasCompleted = !1; this.scheduleTimeout() } __extends(a, b); Object.defineProperty(a.prototype, "previousIndex", { get: function () { return this._previousIndex }, enumerable: !0, configurable: !0 }); Object.defineProperty(a.prototype,
        "hasCompleted", { get: function () { return this._hasCompleted }, enumerable: !0, configurable: !0 }); a.dispatchTimeout = function (a) { var b = a.subscriber; a = a.index; b.hasCompleted || b.previousIndex !== a || b.notifyTimeout() }; a.prototype.scheduleTimeout = function () { var b = this.index; this.scheduler.schedule(a.dispatchTimeout, this.waitFor, { subscriber: this, index: b }); this.index++; this._previousIndex = b }; a.prototype._next = function (a) { this.destination.next(a); this.absoluteTimeout || this.scheduleTimeout() }; a.prototype._error = function (a) {
            this.destination.error(a);
            this._hasCompleted = !0
        }; a.prototype._complete = function () { this.destination.complete(); this._hasCompleted = !0 }; a.prototype.notifyTimeout = function () { this.error(this.errorInstance) }; return a
    }(p); g.prototype.timeout = function (b, a) { void 0 === a && (a = C); var c = ba(b); b = c ? +b - a.now() : Math.abs(b); return this.lift(new We(b, c, a, new gb)) }; var Ye = function () {
        function b(a, b, e, d) { this.waitFor = a; this.absoluteTimeout = b; this.withObservable = e; this.scheduler = d } b.prototype.call = function (a, b) {
            return b.subscribe(new Xe(a, this.absoluteTimeout,
            this.waitFor, this.withObservable, this.scheduler))
        }; return b
    }(), Xe = function (b) {
        function a(a, e, d, f, g) { b.call(this); this.destination = a; this.absoluteTimeout = e; this.waitFor = d; this.withObservable = f; this.scheduler = g; this.timeoutSubscription = void 0; this._previousIndex = this.index = 0; this._hasCompleted = !1; a.add(this); this.scheduleTimeout() } __extends(a, b); Object.defineProperty(a.prototype, "previousIndex", { get: function () { return this._previousIndex }, enumerable: !0, configurable: !0 }); Object.defineProperty(a.prototype,
        "hasCompleted", { get: function () { return this._hasCompleted }, enumerable: !0, configurable: !0 }); a.dispatchTimeout = function (a) { var b = a.subscriber; a = a.index; b.hasCompleted || b.previousIndex !== a || b.handleTimeout() }; a.prototype.scheduleTimeout = function () { var b = this.index; this.scheduler.schedule(a.dispatchTimeout, this.waitFor, { subscriber: this, index: b }); this.index++; this._previousIndex = b }; a.prototype._next = function (a) { this.destination.next(a); this.absoluteTimeout || this.scheduleTimeout() }; a.prototype._error = function (a) {
            this.destination.error(a);
            this._hasCompleted = !0
        }; a.prototype._complete = function () { this.destination.complete(); this._hasCompleted = !0 }; a.prototype.handleTimeout = function () { if (!this.closed) { var a = this.withObservable; this.unsubscribe(); this.destination.add(this.timeoutSubscription = q(this, a)) } }; return a
    }(t); g.prototype.timeoutWith = function (b, a, c) { void 0 === c && (c = C); var e = ba(b); b = e ? +b - c.now() : Math.abs(b); return this.lift(new Ye(b, e, a, c)) }; var hb = function () { return function (b, a) { this.value = b; this.timestamp = a } }(), $e = function () {
        function b(a) {
            this.scheduler =
            a
        } b.prototype.call = function (a, b) { return b.subscribe(new Ze(a, this.scheduler)) }; return b
    }(), Ze = function (b) { function a(a, e) { b.call(this, a); this.scheduler = e } __extends(a, b); a.prototype._next = function (a) { var b = this.scheduler.now(); this.destination.next(new hb(a, b)) }; return a }(p); g.prototype.timestamp = function (b) { void 0 === b && (b = C); return this.lift(new $e(b)) }; var bf = function () { function b() { } b.prototype.call = function (a, b) { return b.subscribe(new af(a)) }; return b }(), af = function (b) {
        function a(a) {
            b.call(this,
            a); this.array = []
        } __extends(a, b); a.prototype._next = function (a) { this.array.push(a) }; a.prototype._complete = function () { this.destination.next(this.array); this.destination.complete() }; return a
    }(p); g.prototype.toArray = function () { return this.lift(new bf) }; g.prototype.toPromise = function (b) {
        var a = this; b || (r.Rx && r.Rx.config && r.Rx.config.Promise ? b = r.Rx.config.Promise : r.Promise && (b = r.Promise)); if (!b) throw Error("no Promise impl found"); return new b(function (b, e) {
            var c; a.subscribe(function (a) { return c = a }, function (a) { return e(a) },
            function () { return b(c) })
        })
    }; var df = function () { function b(a) { this.windowBoundaries = a } b.prototype.call = function (a, b) { a = new cf(a); b = b.subscribe(a); b.closed || a.add(q(a, this.windowBoundaries)); return b }; return b }(), cf = function (b) {
        function a(a) { b.call(this, a); this.window = new y; a.next(this.window) } __extends(a, b); a.prototype.notifyNext = function (a, b, d, f, g) { this.openWindow() }; a.prototype.notifyError = function (a, b) { this._error(a) }; a.prototype.notifyComplete = function (a) { this._complete() }; a.prototype._next = function (a) { this.window.next(a) };
        a.prototype._error = function (a) { this.window.error(a); this.destination.error(a) }; a.prototype._complete = function () { this.window.complete(); this.destination.complete() }; a.prototype._unsubscribe = function () { this.window = null }; a.prototype.openWindow = function () { var a = this.window; a && a.complete(); var a = this.destination, b = this.window = new y; a.next(b) }; return a
    }(t); g.prototype.window = function (b) { return this.lift(new df(b)) }; var ff = function () {
        function b(a, b) { this.windowSize = a; this.startWindowEvery = b } b.prototype.call =
        function (a, b) { return b.subscribe(new ef(a, this.windowSize, this.startWindowEvery)) }; return b
    }(), ef = function (b) {
        function a(a, e, d) { b.call(this, a); this.destination = a; this.windowSize = e; this.startWindowEvery = d; this.windows = [new y]; this.count = 0; a.next(this.windows[0]) } __extends(a, b); a.prototype._next = function (a) {
            for (var b = 0 < this.startWindowEvery ? this.startWindowEvery : this.windowSize, c = this.destination, f = this.windowSize, g = this.windows, k = g.length, l = 0; l < k && !this.closed; l++) g[l].next(a); a = this.count - f + 1; 0 <=
            a && 0 === a % b && !this.closed && g.shift().complete(); 0 !== ++this.count % b || this.closed || (b = new y, g.push(b), c.next(b))
        }; a.prototype._error = function (a) { var b = this.windows; if (b) for (; 0 < b.length && !this.closed;) b.shift().error(a); this.destination.error(a) }; a.prototype._complete = function () { var a = this.windows; if (a) for (; 0 < a.length && !this.closed;) a.shift().complete(); this.destination.complete() }; a.prototype._unsubscribe = function () { this.count = 0; this.windows = null }; return a
    }(p); g.prototype.windowCount = function (b, a) {
        void 0 ===
        a && (a = 0); return this.lift(new ff(b, a))
    }; var hf = function () { function b(a, b, e) { this.windowTimeSpan = a; this.windowCreationInterval = b; this.scheduler = e } b.prototype.call = function (a, b) { return b.subscribe(new gf(a, this.windowTimeSpan, this.windowCreationInterval, this.scheduler)) }; return b }(), gf = function (b) {
        function a(a, e, d, f) {
            b.call(this, a); this.destination = a; this.windowTimeSpan = e; this.windowCreationInterval = d; this.scheduler = f; this.windows = []; if (null !== d && 0 <= d) {
                a = { subscriber: this, window: this.openWindow(), context: null };
                var c = { windowTimeSpan: e, windowCreationInterval: d, subscriber: this, scheduler: f }; this.add(f.schedule(La, e, a)); this.add(f.schedule(Pb, d, c))
            } else d = { subscriber: this, window: this.openWindow(), windowTimeSpan: e }, this.add(f.schedule(Ob, e, d))
        } __extends(a, b); a.prototype._next = function (a) { for (var b = this.windows, c = b.length, f = 0; f < c; f++) { var g = b[f]; g.closed || g.next(a) } }; a.prototype._error = function (a) { for (var b = this.windows; 0 < b.length;) b.shift().error(a); this.destination.error(a) }; a.prototype._complete = function () {
            for (var a =
            this.windows; 0 < a.length;) { var b = a.shift(); b.closed || b.complete() } this.destination.complete()
        }; a.prototype.openWindow = function () { var a = new y; this.windows.push(a); this.destination.next(a); return a }; a.prototype.closeWindow = function (a) { a.complete(); var b = this.windows; b.splice(b.indexOf(a), 1) }; return a
    }(p); g.prototype.windowTime = function (b, a, c) { void 0 === a && (a = null); void 0 === c && (c = C); return this.lift(new hf(b, a, c)) }; var kf = function () {
        function b(a, b) { this.openings = a; this.closingSelector = b } b.prototype.call =
        function (a, b) { return b.subscribe(new jf(a, this.openings, this.closingSelector)) }; return b
    }(), jf = function (b) {
        function a(a, e, d) { b.call(this, a); this.openings = e; this.closingSelector = d; this.contexts = []; this.add(this.openSubscription = q(this, e, e)) } __extends(a, b); a.prototype._next = function (a) { var b = this.contexts; if (b) for (var c = b.length, f = 0; f < c; f++) b[f].window.next(a) }; a.prototype._error = function (a) {
            var c = this.contexts; this.contexts = null; if (c) for (var d = c.length, f = -1; ++f < d;) { var g = c[f]; g.window.error(a); g.subscription.unsubscribe() } b.prototype._error.call(this,
            a)
        }; a.prototype._complete = function () { var a = this.contexts; this.contexts = null; if (a) for (var e = a.length, d = -1; ++d < e;) { var f = a[d]; f.window.complete(); f.subscription.unsubscribe() } b.prototype._complete.call(this) }; a.prototype._unsubscribe = function () { var a = this.contexts; this.contexts = null; if (a) for (var b = a.length, d = -1; ++d < b;) { var f = a[d]; f.window.unsubscribe(); f.subscription.unsubscribe() } }; a.prototype.notifyNext = function (a, b, d, f, g) {
            if (a === this.openings) {
                f = k(this.closingSelector)(b); if (f === n) return this.error(n.e);
                a = new y; b = new x; d = { window: a, subscription: b }; this.contexts.push(d); f = q(this, f, d); f.closed ? this.closeWindow(this.contexts.length - 1) : (f.context = d, b.add(f)); this.destination.next(a)
            } else this.closeWindow(this.contexts.indexOf(a))
        }; a.prototype.notifyError = function (a) { this.error(a) }; a.prototype.notifyComplete = function (a) { a !== this.openSubscription && this.closeWindow(this.contexts.indexOf(a.context)) }; a.prototype.closeWindow = function (a) {
            if (-1 !== a) {
                var b = this.contexts, c = b[a], f = c.window, c = c.subscription; b.splice(a,
                1); f.complete(); c.unsubscribe()
            }
        }; return a
    }(t); g.prototype.windowToggle = function (b, a) { return this.lift(new kf(b, a)) }; var mf = function () { function b(a) { this.closingSelector = a } b.prototype.call = function (a, b) { return b.subscribe(new lf(a, this.closingSelector)) }; return b }(), lf = function (b) {
        function a(a, e) { b.call(this, a); this.destination = a; this.closingSelector = e; this.openWindow() } __extends(a, b); a.prototype.notifyNext = function (a, b, d, f, g) { this.openWindow(g) }; a.prototype.notifyError = function (a, b) { this._error(a) };
        a.prototype.notifyComplete = function (a) { this.openWindow(a) }; a.prototype._next = function (a) { this.window.next(a) }; a.prototype._error = function (a) { this.window.error(a); this.destination.error(a); this.unsubscribeClosingNotification() }; a.prototype._complete = function () { this.window.complete(); this.destination.complete(); this.unsubscribeClosingNotification() }; a.prototype.unsubscribeClosingNotification = function () { this.closingNotification && this.closingNotification.unsubscribe() }; a.prototype.openWindow = function (a) {
            void 0 ===
            a && (a = null); a && (this.remove(a), a.unsubscribe()); (a = this.window) && a.complete(); a = this.window = new y; this.destination.next(a); a = k(this.closingSelector)(); a === n ? (a = n.e, this.destination.error(a), this.window.error(a)) : this.add(this.closingNotification = q(this, a))
        }; return a
    }(t); g.prototype.windowWhen = function (b) { return this.lift(new mf(b)) }; var of = function () { function b(a, b) { this.observables = a; this.project = b } b.prototype.call = function (a, b) { return b.subscribe(new nf(a, this.observables, this.project)) }; return b }(),
    nf = function (b) {
        function a(a, e, d) { b.call(this, a); this.observables = e; this.project = d; this.toRespond = []; a = e.length; this.values = Array(a); for (d = 0; d < a; d++) this.toRespond.push(d); for (d = 0; d < a; d++) { var c = e[d]; this.add(q(this, c, c, d)) } } __extends(a, b); a.prototype.notifyNext = function (a, b, d, f, g) { this.values[d] = b; a = this.toRespond; 0 < a.length && (d = a.indexOf(d), -1 !== d && a.splice(d, 1)) }; a.prototype.notifyComplete = function () { }; a.prototype._next = function (a) {
            0 === this.toRespond.length && (a = [a].concat(this.values), this.project ?
            this._tryProject(a) : this.destination.next(a))
        }; a.prototype._tryProject = function (a) { var b; try { b = this.project.apply(this, a) } catch (d) { this.destination.error(d); return } this.destination.next(b) }; return a
    }(t); g.prototype.withLatestFrom = function () { for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; var c; "function" === typeof b[b.length - 1] && (c = b.pop()); return this.lift(new of(b, c)) }; g.prototype.zip = function () {
        for (var b = [], a = 0; a < arguments.length; a++) b[a - 0] = arguments[a]; return this.lift.call(va.apply(void 0,
        [this].concat(b)))
    }; g.prototype.zipAll = function (b) { return this.lift(new wa(b)) }; var Y = function () { return function (b, a) { void 0 === a && (a = Number.POSITIVE_INFINITY); this.subscribedFrame = b; this.unsubscribedFrame = a } }(), ib = function () {
        function b() { this.subscriptions = [] } b.prototype.logSubscribedFrame = function () { this.subscriptions.push(new Y(this.scheduler.now())); return this.subscriptions.length - 1 }; b.prototype.logUnsubscribedFrame = function (a) { var b = this.subscriptions; b[a] = new Y(b[a].subscribedFrame, this.scheduler.now()) };
        return b
    }(), pa = function (b) { function a(a, e) { b.call(this, function (a) { var b = this, c = b.logSubscribedFrame(); a.add(new x(function () { b.logUnsubscribedFrame(c) })); b.scheduleMessages(a); return a }); this.messages = a; this.subscriptions = []; this.scheduler = e } __extends(a, b); a.prototype.scheduleMessages = function (a) { for (var b = this.messages.length, c = 0; c < b; c++) { var f = this.messages[c]; a.add(this.scheduler.schedule(function (a) { a.message.notification.observe(a.subscriber) }, f.frame, { message: f, subscriber: a })) } }; return a }(g);
    Ma(pa, [ib]); var jb = function (b) { function a(a, e) { b.call(this); this.messages = a; this.subscriptions = []; this.scheduler = e } __extends(a, b); a.prototype._subscribe = function (a) { var c = this, d = c.logSubscribedFrame(); a.add(new x(function () { c.logUnsubscribedFrame(d) })); return b.prototype._subscribe.call(this, a) }; a.prototype.setup = function () { for (var a = this, b = a.messages.length, d = 0; d < b; d++) (function () { var b = a.messages[d]; a.scheduler.schedule(function () { b.notification.observe(a) }, b.frame) })() }; return a }(y); Ma(jb, [ib]);
    var lb = function (b) { function a(a, e) { var c = this; void 0 === a && (a = kb); void 0 === e && (e = Number.POSITIVE_INFINITY); b.call(this, a, function () { return c.frame }); this.maxFrames = e; this.frame = 0; this.index = -1 } __extends(a, b); a.prototype.flush = function () { for (var a = this.actions, b = this.maxFrames, d, f; (f = a.shift()) && (this.frame = f.delay) <= b && !(d = f.execute(f.state, f.delay)) ;); if (d) { for (; f = a.shift() ;) f.unsubscribe(); throw d; } }; a.frameTimeFactor = 10; return a }(V), kb = function (b) {
        function a(a, e, d) {
            void 0 === d && (d = a.index += 1); b.call(this,
            a, e); this.scheduler = a; this.work = e; this.index = d; this.index = a.index = d
        } __extends(a, b); a.prototype.schedule = function (c, e) { void 0 === e && (e = 0); return this.id ? this.add(new a(this.scheduler, this.work)).schedule(c, e) : b.prototype.schedule.call(this, c, e) }; a.prototype.requestAsyncId = function (b, e, d) { void 0 === d && (d = 0); this.delay = b.frame + d; b = b.actions; b.push(this); b.sort(a.sortActions); return !0 }; a.prototype.recycleAsyncId = function (a, b, d) { }; a.sortActions = function (a, b) {
            return a.delay === b.delay ? a.index === b.index ? 0 :
            a.index > b.index ? 1 : -1 : a.delay > b.delay ? 1 : -1
        }; return a
    }(U), pf = function (b) {
        function a(a) { b.call(this, kb, 750); this.assertDeepEqual = a; this.hotObservables = []; this.coldObservables = []; this.flushTests = [] } __extends(a, b); a.prototype.createTime = function (b) { b = b.indexOf("|"); if (-1 === b) throw Error('marble diagram for time should have a completion marker "|"'); return b * a.frameTimeFactor }; a.prototype.createColdObservable = function (b, e, d) {
            if (-1 !== b.indexOf("^")) throw Error('cold observable cannot have subscription offset "^"');
            if (-1 !== b.indexOf("!")) throw Error('cold observable cannot have unsubscription marker "!"'); b = a.parseMarbles(b, e, d); b = new pa(b, this); this.coldObservables.push(b); return b
        }; a.prototype.createHotObservable = function (b, e, d) { if (-1 !== b.indexOf("!")) throw Error('hot observable cannot have unsubscription marker "!"'); b = a.parseMarbles(b, e, d); b = new jb(b, this); this.hotObservables.push(b); return b }; a.prototype.materializeInnerObservable = function (a, b) {
            var c = this, e = []; a.subscribe(function (a) {
                e.push({
                    frame: c.frame -
                    b, notification: z.createNext(a)
                })
            }, function (a) { e.push({ frame: c.frame - b, notification: z.createError(a) }) }, function () { e.push({ frame: c.frame - b, notification: z.createComplete() }) }); return e
        }; a.prototype.expectObservable = function (b, e) {
            var c = this; void 0 === e && (e = null); var f = [], h = { actual: f, ready: !1 }; e = a.parseMarblesAsSubscriptions(e).unsubscribedFrame; var k; this.schedule(function () {
                k = b.subscribe(function (a) { var b = a; a instanceof g && (b = c.materializeInnerObservable(b, c.frame)); f.push({ frame: c.frame, notification: z.createNext(b) }) },
                function (a) { f.push({ frame: c.frame, notification: z.createError(a) }) }, function () { f.push({ frame: c.frame, notification: z.createComplete() }) })
            }, 0); e !== Number.POSITIVE_INFINITY && this.schedule(function () { return k.unsubscribe() }, e); this.flushTests.push(h); return { toBe: function (b, c, d) { h.ready = !0; h.expected = a.parseMarbles(b, c, d, !0) } }
        }; a.prototype.expectSubscriptions = function (b) { var c = { actual: b, ready: !1 }; this.flushTests.push(c); return { toBe: function (b) { b = "string" === typeof b ? [b] : b; c.ready = !0; c.expected = b.map(function (b) { return a.parseMarblesAsSubscriptions(b) }) } } };
        a.prototype.flush = function () { for (var a = this.hotObservables; 0 < a.length;) a.shift().setup(); b.prototype.flush.call(this); for (a = this.flushTests.filter(function (a) { return a.ready }) ; 0 < a.length;) { var e = a.shift(); this.assertDeepEqual(e.actual, e.expected) } }; a.parseMarblesAsSubscriptions = function (a) {
            if ("string" !== typeof a) return new Y(Number.POSITIVE_INFINITY); for (var b = a.length, c = -1, f = Number.POSITIVE_INFINITY, g = Number.POSITIVE_INFINITY, k = 0; k < b; k++) {
                var l = k * this.frameTimeFactor, m = a[k]; switch (m) {
                    case "-": case " ": break;
                    case "(": c = l; break; case ")": c = -1; break; case "^": if (f !== Number.POSITIVE_INFINITY) throw Error("found a second subscription point '^' in a subscription marble diagram. There can only be one."); f = -1 < c ? c : l; break; case "!": if (g !== Number.POSITIVE_INFINITY) throw Error("found a second subscription point '^' in a subscription marble diagram. There can only be one."); g = -1 < c ? c : l; break; default: throw Error("there can only be '^' and '!' markers in a subscription marble diagram. Found instead '" + m + "'.");
                }
            } return 0 >
            g ? new Y(f) : new Y(f, g)
        }; a.parseMarbles = function (a, b, d, f) {
            void 0 === f && (f = !1); if (-1 !== a.indexOf("!")) throw Error('conventional marble diagrams cannot have the unsubscription marker "!"'); for (var c = a.length, e = [], g = a.indexOf("^"), g = -1 === g ? 0 : g * -this.frameTimeFactor, k = "object" !== typeof b ? function (a) { return a } : function (a) { return f && b[a] instanceof pa ? b[a].messages : b[a] }, l = -1, m = 0; m < c; m++) {
                var p = m * this.frameTimeFactor + g, n = void 0, q = a[m]; switch (q) {
                    case "-": case " ": break; case "(": l = p; break; case ")": l = -1; break;
                    case "|": n = z.createComplete(); break; case "^": break; case "#": n = z.createError(d || "error"); break; default: n = z.createNext(k(q))
                } n && e.push({ frame: -1 < l ? l : p, notification: n })
            } return e
        }; return a
    }(lb), mb = new (function () {
        return function (b) {
            b.requestAnimationFrame ? (this.cancelAnimationFrame = b.cancelAnimationFrame.bind(b), this.requestAnimationFrame = b.requestAnimationFrame.bind(b)) : b.mozRequestAnimationFrame ? (this.cancelAnimationFrame = b.mozCancelAnimationFrame.bind(b), this.requestAnimationFrame = b.mozRequestAnimationFrame.bind(b)) :
            b.webkitRequestAnimationFrame ? (this.cancelAnimationFrame = b.webkitCancelAnimationFrame.bind(b), this.requestAnimationFrame = b.webkitRequestAnimationFrame.bind(b)) : b.msRequestAnimationFrame ? (this.cancelAnimationFrame = b.msCancelAnimationFrame.bind(b), this.requestAnimationFrame = b.msRequestAnimationFrame.bind(b)) : b.oRequestAnimationFrame ? (this.cancelAnimationFrame = b.oCancelAnimationFrame.bind(b), this.requestAnimationFrame = b.oRequestAnimationFrame.bind(b)) : (this.cancelAnimationFrame = b.clearTimeout.bind(b),
            this.requestAnimationFrame = function (a) { return b.setTimeout(a, 1E3 / 60) })
        }
    }())(r), qf = function (b) {
        function a(a, e) { b.call(this, a, e); this.scheduler = a; this.work = e } __extends(a, b); a.prototype.requestAsyncId = function (a, e, d) { void 0 === d && (d = 0); if (null !== d && 0 < d) return b.prototype.requestAsyncId.call(this, a, e, d); a.actions.push(this); return a.scheduled || (a.scheduled = mb.requestAnimationFrame(a.flush.bind(a, null))) }; a.prototype.recycleAsyncId = function (a, e, d) {
            void 0 === d && (d = 0); if (null !== d && 0 < d || null === d && 0 < this.delay) return b.prototype.recycleAsyncId.call(this,
            a, e, d); 0 === a.actions.length && (mb.cancelAnimationFrame(e), a.scheduled = void 0)
        }; return a
    }(U), rf = new (function (b) { function a() { b.apply(this, arguments) } __extends(a, b); a.prototype.flush = function (a) { this.active = !0; this.scheduled = void 0; var b = this.actions, c, f = -1, g = b.length; a = a || b.shift(); do if (c = a.execute(a.state, a.delay)) break; while (++f < g && (a = b.shift())); this.active = !1; if (c) { for (; ++f < g && (a = b.shift()) ;) a.unsubscribe(); throw c; } }; return a }(V))(qf), sf = { rxSubscriber: T, observable: M, iterator: I }; l.Scheduler = {
        asap: fa,
        queue: Za, animationFrame: rf, async: C
    }; l.Symbol = sf; l.Subject = y; l.AnonymousSubject = ca; l.Observable = g; l.Subscription = x; l.Subscriber = p; l.AsyncSubject = P; l.ReplaySubject = R; l.BehaviorSubject = cb; l.ConnectableObservable = X; l.Notification = z; l.EmptyError = ea; l.ArgumentOutOfRangeError = W; l.ObjectUnsubscribedError = O; l.TimeoutError = gb; l.UnsubscriptionError = ia; l.TimeInterval = fb; l.Timestamp = hb; l.TestScheduler = pf; l.VirtualTimeScheduler = lb; l.AjaxResponse = Xa; l.AjaxError = da; l.AjaxTimeoutError = Ya; Object.defineProperty(l, "__esModule",
    { value: !0 })
});

/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("rxjs/Subject"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define(["exports", "rxjs/Subject", "rxjs/Observable"], factory) : factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx) }(this, function (exports, rxjs_Subject, rxjs_Observable) {
    "use strict"; function scheduleMicroTask(fn) { Zone.current.scheduleMicroTask("scheduleMicrotask", fn) } function getTypeNameForDebugging(type) { return type.name || typeof type } function isPresent(obj) { return null != obj } function isBlank(obj) { return null == obj } function stringify(token) { if ("string" == typeof token) return token; if (null == token) return "" + token; if (token.overriddenName) return "" + token.overriddenName; if (token.name) return "" + token.name; var res = token.toString(), newLineIndex = res.indexOf("\n"); return newLineIndex === -1 ? res : res.substring(0, newLineIndex) } function looseIdentical(a, b) { return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b) } function isJsObject(o) { return null !== o && ("function" == typeof o || "object" == typeof o) } function print(obj) { console.log(obj) } function warn(obj) { console.warn(obj) } function getSymbolIterator() { if (!_symbolIterator) if (globalScope.Symbol && Symbol.iterator) _symbolIterator = Symbol.iterator; else for (var keys = Object.getOwnPropertyNames(Map.prototype), i = 0; i < keys.length; ++i) { var key = keys[i]; "entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key) } return _symbolIterator } function isPrimitive(obj) { return !isJsObject(obj) } function extractAnnotation(annotation) { return "function" == typeof annotation && annotation.hasOwnProperty("annotation") && (annotation = annotation.annotation), annotation } function applyParams(fnOrArray, key) { if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor"); if ("function" == typeof fnOrArray) return fnOrArray; if (Array.isArray(fnOrArray)) { var annotations = fnOrArray, annoLength = annotations.length - 1, fn = fnOrArray[annoLength]; if ("function" != typeof fn) throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'"); if (annoLength != fn.length) throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn)); for (var paramsAnnotations = [], i = 0, ii = annotations.length - 1; i < ii; i++) { var paramAnnotations = []; paramsAnnotations.push(paramAnnotations); var annotation = annotations[i]; if (Array.isArray(annotation)) for (var j = 0; j < annotation.length; j++) paramAnnotations.push(extractAnnotation(annotation[j])); else "function" == typeof annotation ? paramAnnotations.push(extractAnnotation(annotation)) : paramAnnotations.push(annotation) } return Reflect.defineMetadata("parameters", paramsAnnotations, fn), fn } throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'") } function Class(clsDef) { var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : void 0, "constructor"), proto = constructor.prototype; if (clsDef.hasOwnProperty("extends")) { if ("function" != typeof clsDef.extends) throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends)); constructor.prototype = proto = Object.create(clsDef.extends.prototype) } for (var key in clsDef) "extends" !== key && "prototype" !== key && clsDef.hasOwnProperty(key) && (proto[key] = applyParams(clsDef[key], key)); this && this.annotations instanceof Array && Reflect.defineMetadata("annotations", this.annotations, constructor); var constructorName = constructor.name; return constructorName && "constructor" !== constructorName || (constructor.overriddenName = "class" + _nextClassId++), constructor } function makeDecorator(name, props, parentClass, chainFn) { function DecoratorFactory(objOrType) { if (!Reflect || !Reflect.getOwnMetadata) throw "reflect-metadata shim is required when using class decorators"; if (this instanceof DecoratorFactory) return metaCtor.call(this, objOrType), this; var annotationInstance = new DecoratorFactory(objOrType), chainAnnotation = "function" == typeof this && Array.isArray(this.annotations) ? this.annotations : []; chainAnnotation.push(annotationInstance); var TypeDecorator = function (cls) { var annotations = Reflect.getOwnMetadata("annotations", cls) || []; return annotations.push(annotationInstance), Reflect.defineMetadata("annotations", annotations, cls), cls }; return TypeDecorator.annotations = chainAnnotation, TypeDecorator.Class = Class, chainFn && chainFn(TypeDecorator), TypeDecorator } void 0 === chainFn && (chainFn = null); var metaCtor = makeMetadataCtor([props]); return parentClass && (DecoratorFactory.prototype = Object.create(parentClass.prototype)), DecoratorFactory.prototype.toString = function () { return "@" + name }, DecoratorFactory.annotationCls = DecoratorFactory, DecoratorFactory } function makeMetadataCtor(props) { return function () { for (var _this = this, args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; props.forEach(function (prop, i) { var argVal = args[i]; if (Array.isArray(prop)) _this[prop[0]] = void 0 === argVal ? prop[1] : argVal; else for (var propName in prop) _this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName] }) } } function makeParamDecorator(name, props, parentClass) { function ParamDecoratorFactory() { function ParamDecorator(cls, unusedKey, index) { for (var parameters = Reflect.getOwnMetadata("parameters", cls) || []; parameters.length <= index;) parameters.push(null); return parameters[index] = parameters[index] || [], parameters[index].push(annotationInstance), Reflect.defineMetadata("parameters", parameters, cls), cls } for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; if (this instanceof ParamDecoratorFactory) return metaCtor.apply(this, args), this; var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [void 0].concat(args))); return ParamDecorator.annotation = annotationInstance, ParamDecorator; var _a } var metaCtor = makeMetadataCtor(props); return parentClass && (ParamDecoratorFactory.prototype = Object.create(parentClass.prototype)), ParamDecoratorFactory.prototype.toString = function () { return "@" + name }, ParamDecoratorFactory.annotationCls = ParamDecoratorFactory, ParamDecoratorFactory } function makePropDecorator(name, props, parentClass) { function PropDecoratorFactory() { for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; if (this instanceof PropDecoratorFactory) return metaCtor.apply(this, args), this; var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [void 0].concat(args))); return function (target, name) { var meta = Reflect.getOwnMetadata("propMetadata", target.constructor) || {}; meta[name] = meta.hasOwnProperty(name) && meta[name] || [], meta[name].unshift(decoratorInstance), Reflect.defineMetadata("propMetadata", meta, target.constructor) }; var _a } var metaCtor = makeMetadataCtor(props); return parentClass && (PropDecoratorFactory.prototype = Object.create(parentClass.prototype)), PropDecoratorFactory.prototype.toString = function () { return "@" + name }, PropDecoratorFactory.annotationCls = PropDecoratorFactory, PropDecoratorFactory } function isDefaultChangeDetectionStrategy(changeDetectionStrategy) { return isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default } function forwardRef(forwardRefFn) { return forwardRefFn.__forward_ref__ = forwardRef, forwardRefFn.toString = function () { return stringify(this()) }, forwardRefFn } function resolveForwardRef(type) { return "function" == typeof type && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef ? type() : type }/**
     * @license undefined
      * Copyright Google Inc. All Rights Reserved.
      * *
      * Use of this source code is governed by an MIT-style license that can be
      * found in the LICENSE file at https://angular.io/license
     * @return {?}
     */
    function unimplemented() { throw new Error("unimplemented") } function findFirstClosedCycle(keys) { for (var res = [], i = 0; i < keys.length; ++i) { if (res.indexOf(keys[i]) > -1) return res.push(keys[i]), res; res.push(keys[i]) } return res } function constructResolvingPath(keys) { if (keys.length > 1) { var reversed = findFirstClosedCycle(keys.slice().reverse()), tokenStrs = reversed.map(function (k) { return stringify(k.token) }); return " (" + tokenStrs.join(" -> ") + ")" } return "" } function convertTsickleDecoratorIntoMetadata(decoratorInvocations) { return decoratorInvocations ? decoratorInvocations.map(function (decoratorInvocation) { var decoratorType = decoratorInvocation.type, annotationCls = decoratorType.annotationCls, annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : []; return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs))) }) : [] } function resolveReflectiveFactory(provider) { var factoryFn, resolvedDeps; if (provider.useClass) { var useClass = resolveForwardRef(provider.useClass); factoryFn = reflector.factory(useClass), resolvedDeps = _dependenciesFor(useClass) } else provider.useExisting ? (factoryFn = function (aliasInstance) { return aliasInstance }, resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))]) : provider.useFactory ? (factoryFn = provider.useFactory, resolvedDeps = constructDependencies(provider.useFactory, provider.deps)) : (factoryFn = function () { return provider.useValue }, resolvedDeps = _EMPTY_LIST); return new ResolvedReflectiveFactory(factoryFn, resolvedDeps) } function resolveReflectiveProvider(provider) { return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi) } function resolveReflectiveProviders(providers) { var normalized = _normalizeProviders(providers, []), resolved = normalized.map(resolveReflectiveProvider), resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map); return Array.from(resolvedProviderMap.values()) } function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) { for (var i = 0; i < providers.length; i++) { var provider = providers[i], existing = normalizedProvidersMap.get(provider.key.id); if (existing) { if (provider.multiProvider !== existing.multiProvider) throw new MixingMultiProvidersWithRegularProvidersError(existing, provider); if (provider.multiProvider) for (var j = 0; j < provider.resolvedFactories.length; j++) existing.resolvedFactories.push(provider.resolvedFactories[j]); else normalizedProvidersMap.set(provider.key.id, provider) } else { var resolvedProvider = void 0; resolvedProvider = provider.multiProvider ? new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider) : provider, normalizedProvidersMap.set(provider.key.id, resolvedProvider) } } return normalizedProvidersMap } function _normalizeProviders(providers, res) { return providers.forEach(function (b) { if (b instanceof Type) res.push({ provide: b, useClass: b }); else if (b && "object" == typeof b && void 0 !== b.provide) res.push(b); else { if (!(b instanceof Array)) throw new InvalidProviderError(b); _normalizeProviders(b, res) } }), res } function constructDependencies(typeOrFunc, dependencies) { if (dependencies) { var params_1 = dependencies.map(function (t) { return [t] }); return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1) }) } return _dependenciesFor(typeOrFunc) } function _dependenciesFor(typeOrFunc) { var params = reflector.parameters(typeOrFunc); if (!params) return []; if (params.some(function (p) { return null == p })) throw new NoAnnotationError(typeOrFunc, params); return params.map(function (p) { return _extractToken(typeOrFunc, p, params) }) } function _extractToken(typeOrFunc, metadata, params) { var depProps = [], token = null, optional = !1; if (!Array.isArray(metadata)) return metadata instanceof Inject ? _createDependency(metadata.token, optional, null, null, depProps) : _createDependency(metadata, optional, null, null, depProps); for (var lowerBoundVisibility = null, upperBoundVisibility = null, i = 0; i < metadata.length; ++i) { var paramMetadata = metadata[i]; paramMetadata instanceof Type ? token = paramMetadata : paramMetadata instanceof Inject ? token = paramMetadata.token : paramMetadata instanceof Optional ? optional = !0 : paramMetadata instanceof Self ? upperBoundVisibility = paramMetadata : paramMetadata instanceof Host ? upperBoundVisibility = paramMetadata : paramMetadata instanceof SkipSelf && (lowerBoundVisibility = paramMetadata) } if (token = resolveForwardRef(token), null != token) return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps); throw new NoAnnotationError(typeOrFunc, params) } function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) { return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps) } function _mapProviders(injector, fn) { for (var res = new Array(injector._proto.numberOfProviders), i = 0; i < injector._proto.numberOfProviders; ++i) res[i] = fn(injector._proto.getProviderAtIndex(i)); return res } function isListLikeIterable(obj) { return !!isJsObject(obj) && (Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj) } function areIterablesEqual(a, b, comparator) { for (var iterator1 = a[getSymbolIterator()](), iterator2 = b[getSymbolIterator()]() ; ;) { var item1 = iterator1.next(), item2 = iterator2.next(); if (item1.done && item2.done) return !0; if (item1.done || item2.done) return !1; if (!comparator(item1.value, item2.value)) return !1 } } function iterateListLike(obj, fn) { if (Array.isArray(obj)) for (var i = 0; i < obj.length; i++) fn(obj[i]); else for (var iterator = obj[getSymbolIterator()](), item = void 0; !(item = iterator.next()).done;) fn(item.value) }/**
     * @license undefined
      * Copyright Google Inc. All Rights Reserved.
      * *
      * Use of this source code is governed by an MIT-style license that can be
      * found in the LICENSE file at https://angular.io/license
     * @param {?} obj
     * @return {?}
     */
    function isPromise(obj) { return !!obj && "function" == typeof obj.then } function _appIdRandomProviderFactory() { return "" + _randomChar() + _randomChar() + _randomChar() } function _randomChar() { return String.fromCharCode(97 + Math.floor(25 * Math.random())) } function _throwError() { throw new Error("Runtime compiler is not loaded") } function getPreviousIndex(item, addRemoveOffset, moveOffsets) { var previousIndex = item.previousIndex; if (null === previousIndex) return previousIndex; var moveOffset = 0; return moveOffsets && previousIndex < moveOffsets.length && (moveOffset = moveOffsets[previousIndex]), previousIndex + addRemoveOffset + moveOffset } function devModeEqual(a, b) { return isListLikeIterable(a) && isListLikeIterable(b) ? areIterablesEqual(a, b, devModeEqual) : !(isListLikeIterable(a) || isPrimitive(a) || isListLikeIterable(b) || isPrimitive(b)) || looseIdentical(a, b) } function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) { return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations) } function addToArray(e, array) { array.push(e) } function interpolate(valueCount, constAndInterp) { for (var result = "", i = 0; i < 2 * valueCount; i += 2) result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]); return result + constAndInterp[2 * valueCount] } function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) { switch (valueCount) { case 1: return c0 + _toStringWithNull(a1) + c1; case 2: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2; case 3: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3; case 4: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4; case 5: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5; case 6: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6; case 7: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7; case 8: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8; case 9: return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9; default: throw new Error("Does not support more than 9 expressions") } } function _toStringWithNull(v) { return null != v ? v.toString() : "" } function checkBinding(throwOnChange, oldValue, newValue) { if (throwOnChange) { if (!devModeEqual(oldValue, newValue)) throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue); return !1 } return !looseIdentical(oldValue, newValue) } function castByValue(input, value) { return input } function pureProxy1(fn) { var result, v0 = UNINITIALIZED; return function (p0) { return looseIdentical(v0, p0) || (v0 = p0, result = fn(p0)), result } } function pureProxy2(fn) { var result, v0 = UNINITIALIZED, v1 = UNINITIALIZED; return function (p0, p1) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) || (v0 = p0, v1 = p1, result = fn(p0, p1)), result } } function pureProxy3(fn) { var result, v0 = UNINITIALIZED, v1 = UNINITIALIZED, v2 = UNINITIALIZED; return function (p0, p1, p2) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) || (v0 = p0, v1 = p1, v2 = p2, result = fn(p0, p1, p2)), result } } function pureProxy4(fn) { var result, v0, v1, v2, v3; return v0 = v1 = v2 = v3 = UNINITIALIZED, function (p0, p1, p2, p3) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, result = fn(p0, p1, p2, p3)), result } } function pureProxy5(fn) { var result, v0, v1, v2, v3, v4; return v0 = v1 = v2 = v3 = v4 = UNINITIALIZED, function (p0, p1, p2, p3, p4) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, result = fn(p0, p1, p2, p3, p4)), result } } function pureProxy6(fn) { var result, v0, v1, v2, v3, v4, v5; return v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED, function (p0, p1, p2, p3, p4, p5) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, result = fn(p0, p1, p2, p3, p4, p5)), result } } function pureProxy7(fn) { var result, v0, v1, v2, v3, v4, v5, v6; return v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED, function (p0, p1, p2, p3, p4, p5, p6) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, result = fn(p0, p1, p2, p3, p4, p5, p6)), result } } function pureProxy8(fn) { var result, v0, v1, v2, v3, v4, v5, v6, v7; return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED, function (p0, p1, p2, p3, p4, p5, p6, p7) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, result = fn(p0, p1, p2, p3, p4, p5, p6, p7)), result } } function pureProxy9(fn) { var result, v0, v1, v2, v3, v4, v5, v6, v7, v8; return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED, function (p0, p1, p2, p3, p4, p5, p6, p7, p8) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) && looseIdentical(v8, p8) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8, result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8)), result } } function pureProxy10(fn) { var result, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9; return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED, function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) { return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) && looseIdentical(v8, p8) && looseIdentical(v9, p9) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8, v9 = p9, result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)), result } } function setBindingDebugInfoForChanges(renderer, el, changes) { Object.keys(changes).forEach(function (propName) { setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue) }) } function setBindingDebugInfo(renderer, el, propName, value) { try { renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null) } catch (e) { renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), "[ERROR] Exception while trying to serialize the value") } } function camelCaseToDashCase(input) { return input.replace(CAMEL_CASE_REGEXP, function () { for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; return "-" + m[1].toLowerCase() }) } function createRenderElement(renderer, parentElement, name, attrs, debugInfo) { for (var el = renderer.createElement(parentElement, name, debugInfo), i = 0; i < attrs.length; i += 2) renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1)); return el } function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) { var hostElement; if (isPresent(rootSelectorOrNode)) { hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo); for (var i = 0; i < attrs.length; i += 2) renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1)); renderer.setElementAttribute(hostElement, "ng-version", VERSION.full) } else hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo); return hostElement } function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) { for (var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2), i = 0; i < eventNamesAndTargets.length; i += 2) { var eventName = eventNamesAndTargets.get(i), eventTarget = eventNamesAndTargets.get(i + 1), disposable = void 0; disposable = eventTarget ? view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName)) : view.renderer.listen(element, eventName, listener.bind(view, eventName)), disposables.set(i / 2, disposable) } return disposeInlineArray.bind(null, disposables) } function disposeInlineArray(disposables) { for (var i = 0; i < disposables.length; i++) disposables.get(i)() } function noop() { } function createEmptyInlineArray(length) { var ctor; return new (ctor = length <= 2 ? InlineArray2 : length <= 4 ? InlineArray4 : length <= 8 ? InlineArray8 : length <= 16 ? InlineArray16 : InlineArrayDynamic)(length) } function detectWTF() { var wtf = global$1.wtf; return !(!wtf || !(trace = wtf.trace)) && (events = trace.events, !0) } function createScope(signature, flags) { return void 0 === flags && (flags = null), events.createScope(signature, flags) } function leave(scope, returnValue) { return trace.leaveScope(scope, returnValue), returnValue } function startTimeRange(rangeType, action) { return trace.beginTimeRange(rangeType, action) } function endTimeRange(range) { trace.endTimeRange(range) } function noopScope(arg0, arg1) { return null } function setTestabilityGetter(getter) { _testabilityGetter = getter } function enableProdMode() { if (_runModeLocked) throw new Error("Cannot enable prod mode after platform setup."); _devMode = !1 } function isDevMode() { return _runModeLocked = !0, _devMode } function createPlatform(injector) { if (_platform && !_platform.destroyed) throw new Error("There can be only one platform. Destroy the previous one to create a new one."); _platform = injector.get(PlatformRef); var inits = injector.get(PLATFORM_INITIALIZER, null); return inits && inits.forEach(function (init) { return init() }), _platform } function createPlatformFactory(parentPlatformFactory, name, providers) { void 0 === providers && (providers = []); var marker = new OpaqueToken("Platform: " + name); return function (extraProviders) { return void 0 === extraProviders && (extraProviders = []), getPlatform() || (parentPlatformFactory ? parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: !0 })) : createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: !0 })))), assertPlatform(marker) } } function assertPlatform(requiredToken) { var platform = getPlatform(); if (!platform) throw new Error("No platform exists!"); if (!platform.injector.get(requiredToken, null)) throw new Error("A platform with a different configuration has been created. Please destroy it first."); return platform } function destroyPlatform() { _platform && !_platform.destroyed && _platform.destroy() } function getPlatform() { return _platform && !_platform.destroyed ? _platform : null } function _callAndReportToErrorHandler(errorHandler, callback) { try { var result = callback(); return isPromise(result) ? result.catch(function (e) { throw errorHandler.handleError(e), e }) : result } catch (e) { throw errorHandler.handleError(e), e } } function registerModuleFactory(id, factory) { var existing = moduleFactories.get(id); if (existing) throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name); moduleFactories.set(id, factory) } function getModuleFactory(id) { var factory = moduleFactories.get(id); if (!factory) throw new Error("No module with ID " + id + " loaded"); return factory } function checkNotEmpty(value, modulePath, exportName) { if (!value) throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'"); return value } function asNativeElements(debugEls) { return debugEls.map(function (el) { return el.nativeElement }) } function _queryElementChildren(element, predicate, matches) { element.childNodes.forEach(function (node) { node instanceof DebugElement && (predicate(node) && matches.push(node), _queryElementChildren(node, predicate, matches)) }) } function _queryNodeChildren(parentNode, predicate, matches) { parentNode instanceof DebugElement && parentNode.childNodes.forEach(function (node) { predicate(node) && matches.push(node), node instanceof DebugElement && _queryNodeChildren(node, predicate, matches) }) } function getDebugNode(nativeNode) { return _nativeNodeToDebugNode.get(nativeNode) } function indexDebugNode(node) { _nativeNodeToDebugNode.set(node.nativeNode, node) } function removeDebugNodeFromIndex(node) { _nativeNodeToDebugNode.delete(node.nativeNode) } function _reflector() { return reflector } function _iterableDiffersFactory() { return defaultIterableDiffers } function _keyValueDiffersFactory() { return defaultKeyValueDiffers } function animate(timing, styles) { void 0 === styles && (styles = null); var stylesEntry = styles; if (!isPresent(stylesEntry)) { var EMPTY_STYLE = {}; stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1) } return new AnimationAnimateMetadata(timing, stylesEntry) } function group(steps) { return new AnimationGroupMetadata(steps) } function sequence(steps) { return new AnimationSequenceMetadata(steps) } function style(tokens) { var input, offset = null; return "string" == typeof tokens ? input = [tokens] : (input = Array.isArray(tokens) ? tokens : [tokens], input.forEach(function (entry) { var entryOffset = entry.offset; isPresent(entryOffset) && (offset = null == offset ? parseFloat(entryOffset) : offset) })), new AnimationStyleMetadata(input, offset) } function state(stateNameExpr, styles) { return new AnimationStateDeclarationMetadata(stateNameExpr, styles) } function keyframes(steps) { return new AnimationKeyframesSequenceMetadata(steps) } function transition(stateChangeExpr, steps) { var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps; return new AnimationStateTransitionMetadata(stateChangeExpr, animationData) } function trigger(name, animation) { return new AnimationEntryMetadata(name, animation) } function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) { void 0 === nullValue && (nullValue = null); var finalStyles = {}; return Object.keys(newStyles).forEach(function (prop) { var value = newStyles[prop]; finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString() }), Object.keys(previousStyles).forEach(function (prop) { isPresent(finalStyles[prop]) || (finalStyles[prop] = nullValue) }), finalStyles } function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) { var limit = keyframes.length - 1, firstKeyframe = keyframes[0], flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles), extraFirstKeyframeStyles = {}, hasExtraFirstStyles = !1; Object.keys(collectedStyles).forEach(function (prop) { var value = collectedStyles[prop]; flatenedFirstKeyframeStyles[prop] || (flatenedFirstKeyframeStyles[prop] = value, extraFirstKeyframeStyles[prop] = value, hasExtraFirstStyles = !0) }); var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles), finalKeyframe = keyframes[limit]; finalKeyframe.styles.styles.unshift(finalStateStyles); var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles), extraFinalKeyframeStyles = {}, hasExtraFinalStyles = !1; return Object.keys(keyframeCollectedStyles).forEach(function (prop) { isPresent(flatenedFinalKeyframeStyles[prop]) || (extraFinalKeyframeStyles[prop] = AUTO_STYLE, hasExtraFinalStyles = !0) }), hasExtraFinalStyles && finalKeyframe.styles.styles.push(extraFinalKeyframeStyles), Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) { isPresent(flatenedFirstKeyframeStyles[prop]) || (extraFirstKeyframeStyles[prop] = AUTO_STYLE, hasExtraFirstStyles = !0) }), hasExtraFirstStyles && firstKeyframe.styles.styles.push(extraFirstKeyframeStyles), collectAndResolveStyles(collectedStyles, [finalStateStyles]), keyframes } function clearStyles(styles) { var finalStyles = {}; return Object.keys(styles).forEach(function (key) { finalStyles[key] = null }), finalStyles } function collectAndResolveStyles(collection, styles) { return styles.map(function (entry) { var stylesObj = {}; return Object.keys(entry).forEach(function (prop) { var value = entry[prop]; value == FILL_STYLE_FLAG && (value = collection[prop], isPresent(value) || (value = AUTO_STYLE)), collection[prop] = value, stylesObj[prop] = value }), stylesObj }) } function renderStyles(element, renderer, styles) { Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]) }) } function flattenStyles(styles) { var finalStyles = {}; return styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { finalStyles[prop] = entry[prop] }) }), finalStyles } function _recursePlayers(player, collectedPlayers) { player instanceof AnimationGroupPlayer || player instanceof AnimationSequencePlayer ? player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers) }) : collectedPlayers.push(player) }/**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var globalScope; globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window; var global$1 = globalScope; global$1.assert = function (condition) { }; var _symbolIterator = null, _nextClassId = 0, Reflect = global$1.Reflect, Inject = makeParamDecorator("Inject", [["token", void 0]]), Optional = makeParamDecorator("Optional", []), Injectable = makeDecorator("Injectable", []), Self = makeParamDecorator("Self", []), SkipSelf = makeParamDecorator("SkipSelf", []), Host = makeParamDecorator("Host", []), OpaqueToken = function () { function OpaqueToken(_desc) { this._desc = _desc } return OpaqueToken.prototype.toString = function () { return "Token " + this._desc }, OpaqueToken.decorators = [{ type: Injectable }], OpaqueToken.ctorParameters = function () { return [null] }, OpaqueToken }(), ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken("AnalyzeForEntryComponents"), Attribute = makeParamDecorator("Attribute", [["attributeName", void 0]]), Query = function () { function Query() { } return Query }(), ContentChildren = makePropDecorator("ContentChildren", [["selector", void 0], { first: !1, isViewQuery: !1, descendants: !1, read: void 0 }], Query), ContentChild = makePropDecorator("ContentChild", [["selector", void 0], { first: !0, isViewQuery: !1, descendants: !0, read: void 0 }], Query), ViewChildren = makePropDecorator("ViewChildren", [["selector", void 0], { first: !1, isViewQuery: !0, descendants: !0, read: void 0 }], Query), ViewChild = makePropDecorator("ViewChild", [["selector", void 0], { first: !0, isViewQuery: !0, descendants: !0, read: void 0 }], Query), ChangeDetectionStrategy = {}; ChangeDetectionStrategy.OnPush = 0, ChangeDetectionStrategy.Default = 1, ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush", ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default"; var ChangeDetectorStatus = {}; ChangeDetectorStatus.CheckOnce = 0, ChangeDetectorStatus.Checked = 1, ChangeDetectorStatus.CheckAlways = 2, ChangeDetectorStatus.Detached = 3, ChangeDetectorStatus.Errored = 4, ChangeDetectorStatus.Destroyed = 5, ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce", ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked", ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways", ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached", ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored", ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed"; var Directive = makeDecorator("Directive", { selector: void 0, inputs: void 0, outputs: void 0, host: void 0, providers: void 0, exportAs: void 0, queries: void 0 }), Component = makeDecorator("Component", { selector: void 0, inputs: void 0, outputs: void 0, host: void 0, exportAs: void 0, moduleId: void 0, providers: void 0, viewProviders: void 0, changeDetection: ChangeDetectionStrategy.Default, queries: void 0, templateUrl: void 0, template: void 0, styleUrls: void 0, styles: void 0, animations: void 0, encapsulation: void 0, interpolation: void 0, entryComponents: void 0 }, Directive), Pipe = makeDecorator("Pipe", { name: void 0, pure: !0 }), Input = makePropDecorator("Input", [["bindingPropertyName", void 0]]), Output = makePropDecorator("Output", [["bindingPropertyName", void 0]]), HostBinding = makePropDecorator("HostBinding", [["hostPropertyName", void 0]]), HostListener = makePropDecorator("HostListener", [["eventName", void 0], ["args", []]]), LifecycleHooks = {}; LifecycleHooks.OnInit = 0, LifecycleHooks.OnDestroy = 1, LifecycleHooks.DoCheck = 2, LifecycleHooks.OnChanges = 3, LifecycleHooks.AfterContentInit = 4, LifecycleHooks.AfterContentChecked = 5, LifecycleHooks.AfterViewInit = 6, LifecycleHooks.AfterViewChecked = 7, LifecycleHooks[LifecycleHooks.OnInit] = "OnInit", LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy", LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck", LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges", LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit", LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked", LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit", LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked"; var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked], OnChanges = function () { function OnChanges() { } return OnChanges.prototype.ngOnChanges = function (changes) { }, OnChanges }(), OnInit = function () { function OnInit() { } return OnInit.prototype.ngOnInit = function () { }, OnInit }(), DoCheck = function () { function DoCheck() { } return DoCheck.prototype.ngDoCheck = function () { }, DoCheck }(), OnDestroy = function () { function OnDestroy() { } return OnDestroy.prototype.ngOnDestroy = function () { }, OnDestroy }(), AfterContentInit = function () { function AfterContentInit() { } return AfterContentInit.prototype.ngAfterContentInit = function () { }, AfterContentInit }(), AfterContentChecked = function () { function AfterContentChecked() { } return AfterContentChecked.prototype.ngAfterContentChecked = function () { }, AfterContentChecked }(), AfterViewInit = function () { function AfterViewInit() { } return AfterViewInit.prototype.ngAfterViewInit = function () { }, AfterViewInit }(), AfterViewChecked = function () { function AfterViewChecked() { } return AfterViewChecked.prototype.ngAfterViewChecked = function () { }, AfterViewChecked }(), CUSTOM_ELEMENTS_SCHEMA = { name: "custom-elements" }, NO_ERRORS_SCHEMA = { name: "no-errors-schema" }, NgModule = makeDecorator("NgModule", { providers: void 0, declarations: void 0, imports: void 0, exports: void 0, entryComponents: void 0, bootstrap: void 0, schemas: void 0, id: void 0 }), ViewEncapsulation = {}; ViewEncapsulation.Emulated = 0, ViewEncapsulation.Native = 1, ViewEncapsulation.None = 2, ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated", ViewEncapsulation[ViewEncapsulation.Native] = "Native", ViewEncapsulation[ViewEncapsulation.None] = "None"; var ViewMetadata = function () { function ViewMetadata(_a) { var _b = void 0 === _a ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation; this.templateUrl = templateUrl, this.template = template, this.styleUrls = styleUrls, this.styles = styles, this.encapsulation = encapsulation, this.animations = animations, this.interpolation = interpolation } return ViewMetadata }(), Version = function () { function Version(full) { this.full = full } return Object.defineProperty(Version.prototype, "major", { get: function () { return this.full.split(".")[0] }, enumerable: !0, configurable: !0 }), Object.defineProperty(Version.prototype, "minor", { get: function () { return this.full.split(".")[1] }, enumerable: !0, configurable: !0 }), Object.defineProperty(Version.prototype, "patch", { get: function () { return this.full.split(".").slice(2).join(".") }, enumerable: !0, configurable: !0 }), Version }(), VERSION = new Version("2.4.1"), __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, BaseError = function (_super) { function BaseError(message) { _super.call(this, message); var nativeError = new Error(message); this._nativeError = nativeError } return __extends(BaseError, _super), Object.defineProperty(BaseError.prototype, "message", { get: function () { return this._nativeError.message }, set: function (message) { this._nativeError.message = message }, enumerable: !0, configurable: !0 }), Object.defineProperty(BaseError.prototype, "name", { get: function () { return this._nativeError.name }, enumerable: !0, configurable: !0 }), Object.defineProperty(BaseError.prototype, "stack", { get: function () { return this._nativeError.stack }, set: function (value) { this._nativeError.stack = value }, enumerable: !0, configurable: !0 }), BaseError.prototype.toString = function () { return this._nativeError.toString() }, BaseError }(Error), WrappedError = function (_super) { function WrappedError(message, error) { _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error)), this.originalError = error } return __extends(WrappedError, _super), Object.defineProperty(WrappedError.prototype, "stack", { get: function () { return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack }, enumerable: !0, configurable: !0 }), WrappedError }(BaseError), _THROW_IF_NOT_FOUND = new Object, THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND, _NullInjector = function () { function _NullInjector() { } return _NullInjector.prototype.get = function (token, notFoundValue) { if (void 0 === notFoundValue && (notFoundValue = _THROW_IF_NOT_FOUND), notFoundValue === _THROW_IF_NOT_FOUND) throw new Error("No provider for " + stringify(token) + "!"); return notFoundValue }, _NullInjector }(), Injector = function () { function Injector() { } return Injector.prototype.get = function (token, notFoundValue) { return unimplemented() }, Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND, Injector.NULL = new _NullInjector, Injector }(), __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, AbstractProviderError = function (_super) { function AbstractProviderError(injector, key, constructResolvingMessage) { _super.call(this, "DI Error"), this.keys = [key], this.injectors = [injector], this.constructResolvingMessage = constructResolvingMessage, this.message = this.constructResolvingMessage(this.keys) } return __extends$1(AbstractProviderError, _super), AbstractProviderError.prototype.addKey = function (injector, key) { this.injectors.push(injector), this.keys.push(key), this.message = this.constructResolvingMessage(this.keys) }, AbstractProviderError }(BaseError), NoProviderError = function (_super) { function NoProviderError(injector, key) { _super.call(this, injector, key, function (keys) { var first = stringify(keys[0].token); return "No provider for " + first + "!" + constructResolvingPath(keys) }) } return __extends$1(NoProviderError, _super), NoProviderError }(AbstractProviderError), CyclicDependencyError = function (_super) { function CyclicDependencyError(injector, key) { _super.call(this, injector, key, function (keys) { return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys) }) } return __extends$1(CyclicDependencyError, _super), CyclicDependencyError }(AbstractProviderError), InstantiationError = function (_super) { function InstantiationError(injector, originalException, originalStack, key) { _super.call(this, "DI Error", originalException), this.keys = [key], this.injectors = [injector] } return __extends$1(InstantiationError, _super), InstantiationError.prototype.addKey = function (injector, key) { this.injectors.push(injector), this.keys.push(key) }, Object.defineProperty(InstantiationError.prototype, "message", { get: function () { var first = stringify(this.keys[0].token); return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + "." }, enumerable: !0, configurable: !0 }), Object.defineProperty(InstantiationError.prototype, "causeKey", { get: function () { return this.keys[0] }, enumerable: !0, configurable: !0 }), InstantiationError }(WrappedError), InvalidProviderError = function (_super) { function InvalidProviderError(provider) { _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider) } return __extends$1(InvalidProviderError, _super), InvalidProviderError }(BaseError), NoAnnotationError = function (_super) { function NoAnnotationError(typeOrFunc, params) { _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params)) } return __extends$1(NoAnnotationError, _super), NoAnnotationError._genMessage = function (typeOrFunc, params) { for (var signature = [], i = 0, ii = params.length; i < ii; i++) { var parameter = params[i]; parameter && 0 != parameter.length ? signature.push(parameter.map(stringify).join(" ")) : signature.push("?") } return "Cannot resolve all parameters for '" + stringify(typeOrFunc) + "'(" + signature.join(", ") + "). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + stringify(typeOrFunc) + "' is decorated with Injectable." }, NoAnnotationError }(BaseError), OutOfBoundsError = function (_super) { function OutOfBoundsError(index) { _super.call(this, "Index " + index + " is out-of-bounds.") } return __extends$1(OutOfBoundsError, _super), OutOfBoundsError }(BaseError), MixingMultiProvidersWithRegularProvidersError = function (_super) { function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) { _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " + provider2.toString()) } return __extends$1(MixingMultiProvidersWithRegularProvidersError, _super), MixingMultiProvidersWithRegularProvidersError }(BaseError), ReflectiveKey = function () { function ReflectiveKey(token, id) { if (this.token = token, this.id = id, !token) throw new Error("Token must be defined!") } return Object.defineProperty(ReflectiveKey.prototype, "displayName", { get: function () { return stringify(this.token) }, enumerable: !0, configurable: !0 }), ReflectiveKey.get = function (token) { return _globalKeyRegistry.get(resolveForwardRef(token)) }, Object.defineProperty(ReflectiveKey, "numberOfKeys", { get: function () { return _globalKeyRegistry.numberOfKeys }, enumerable: !0, configurable: !0 }), ReflectiveKey }(), KeyRegistry = function () { function KeyRegistry() { this._allKeys = new Map } return KeyRegistry.prototype.get = function (token) { if (token instanceof ReflectiveKey) return token; if (this._allKeys.has(token)) return this._allKeys.get(token); var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys); return this._allKeys.set(token, newKey), newKey }, Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", { get: function () { return this._allKeys.size }, enumerable: !0, configurable: !0 }), KeyRegistry }(), _globalKeyRegistry = new KeyRegistry, Type = Function, DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/, ReflectionCapabilities = function () { function ReflectionCapabilities(reflect) { this._reflect = reflect || global$1.Reflect } return ReflectionCapabilities.prototype.isReflectionEnabled = function () { return !0 }, ReflectionCapabilities.prototype.factory = function (t) { return function () { for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; return new (t.bind.apply(t, [void 0].concat(args))) } }, ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) { var result; result = "undefined" == typeof paramTypes ? new Array(paramAnnotations.length) : new Array(paramTypes.length); for (var i = 0; i < result.length; i++) "undefined" == typeof paramTypes ? result[i] = [] : paramTypes[i] != Object ? result[i] = [paramTypes[i]] : result[i] = [], paramAnnotations && isPresent(paramAnnotations[i]) && (result[i] = result[i].concat(paramAnnotations[i])); return result }, ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) { if (DELEGATE_CTOR.exec(type.toString())) return null; if (type.parameters && type.parameters !== parentCtor.parameters) return type.parameters; var tsickleCtorParams = type.ctorParameters; if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) { var ctorParameters = "function" == typeof tsickleCtorParams ? tsickleCtorParams() : tsickleCtorParams, paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type }), paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators) }); return this._zipTypesAndAnnotations(paramTypes, paramAnnotations) } if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) { var paramAnnotations = this._reflect.getOwnMetadata("parameters", type), paramTypes = this._reflect.getOwnMetadata("design:paramtypes", type); if (paramTypes || paramAnnotations) return this._zipTypesAndAnnotations(paramTypes, paramAnnotations) } return new Array(type.length).fill(void 0) }, ReflectionCapabilities.prototype.parameters = function (type) { var parentCtor = Object.getPrototypeOf(type.prototype).constructor, parameters = this._ownParameters(type, parentCtor); return parameters || parentCtor === Object || (parameters = this.parameters(parentCtor)), parameters || [] }, ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) { if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) { var annotations = typeOrFunc.annotations; return "function" == typeof annotations && annotations.annotations && (annotations = annotations.annotations), annotations } return typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators ? convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators) : this._reflect && this._reflect.getOwnMetadata ? this._reflect.getOwnMetadata("annotations", typeOrFunc) : void 0 }, ReflectionCapabilities.prototype.annotations = function (typeOrFunc) { var parentCtor = Object.getPrototypeOf(typeOrFunc.prototype).constructor, ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [], parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : []; return parentAnnotations.concat(ownAnnotations) }, ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) { if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) { var propMetadata = typeOrFunc.propMetadata; return "function" == typeof propMetadata && propMetadata.propMetadata && (propMetadata = propMetadata.propMetadata), propMetadata } if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) { var propDecorators_1 = typeOrFunc.propDecorators, propMetadata_1 = {}; return Object.keys(propDecorators_1).forEach(function (prop) { propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]) }), propMetadata_1 } if (this._reflect && this._reflect.getOwnMetadata) return this._reflect.getOwnMetadata("propMetadata", typeOrFunc) }, ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) { var parentCtor = Object.getPrototypeOf(typeOrFunc.prototype).constructor, propMetadata = {}; if (parentCtor !== Object) { var parentPropMetadata_1 = this.propMetadata(parentCtor); Object.keys(parentPropMetadata_1).forEach(function (propName) { propMetadata[propName] = parentPropMetadata_1[propName] }) } var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor); return ownPropMetadata && Object.keys(ownPropMetadata).forEach(function (propName) { var decorators = []; propMetadata.hasOwnProperty(propName) && decorators.push.apply(decorators, propMetadata[propName]), decorators.push.apply(decorators, ownPropMetadata[propName]), propMetadata[propName] = decorators }), propMetadata }, ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) { return type instanceof Type && lcProperty in type.prototype }, ReflectionCapabilities.prototype.getter = function (name) { return new Function("o", "return o." + name + ";") }, ReflectionCapabilities.prototype.setter = function (name) { return new Function("o", "v", "return o." + name + " = v;") }, ReflectionCapabilities.prototype.method = function (name) { var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);"; return new Function("o", "args", functionBody) }, ReflectionCapabilities.prototype.importUri = function (type) { return "object" == typeof type && type.filePath ? type.filePath : "./" + stringify(type) }, ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime }, ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name] }, ReflectionCapabilities }(), ReflectorReader = function () { function ReflectorReader() { } return ReflectorReader.prototype.parameters = function (typeOrFunc) { }, ReflectorReader.prototype.annotations = function (typeOrFunc) { }, ReflectorReader.prototype.propMetadata = function (typeOrFunc) { }, ReflectorReader.prototype.importUri = function (typeOrFunc) { }, ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { }, ReflectorReader.prototype.resolveEnum = function (identifier, name) { }, ReflectorReader }(), __extends$2 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, Reflector = function (_super) { function Reflector(reflectionCapabilities) { _super.call(this), this.reflectionCapabilities = reflectionCapabilities } return __extends$2(Reflector, _super), Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps }, Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type) }, Reflector.prototype.parameters = function (typeOrFunc) { return this.reflectionCapabilities.parameters(typeOrFunc) }, Reflector.prototype.annotations = function (typeOrFunc) { return this.reflectionCapabilities.annotations(typeOrFunc) }, Reflector.prototype.propMetadata = function (typeOrFunc) { return this.reflectionCapabilities.propMetadata(typeOrFunc) }, Reflector.prototype.hasLifecycleHook = function (type, lcProperty) { return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty) }, Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name) }, Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name) }, Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name) }, Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type) }, Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime) }, Reflector.prototype.resolveEnum = function (identifier, name) { return this.reflectionCapabilities.resolveEnum(identifier, name) }, Reflector }(ReflectorReader), reflector = new Reflector(new ReflectionCapabilities), ReflectiveDependency = function () { function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) { this.key = key, this.optional = optional, this.lowerBoundVisibility = lowerBoundVisibility, this.upperBoundVisibility = upperBoundVisibility, this.properties = properties } return ReflectiveDependency.fromKey = function (key) { return new ReflectiveDependency(key, (!1), null, null, []) }, ReflectiveDependency }(), _EMPTY_LIST = [], ResolvedReflectiveProvider_ = function () { function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) { this.key = key, this.resolvedFactories = resolvedFactories, this.multiProvider = multiProvider } return Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", { get: function () { return this.resolvedFactories[0] }, enumerable: !0, configurable: !0 }), ResolvedReflectiveProvider_ }(), ResolvedReflectiveFactory = function () { function ResolvedReflectiveFactory(factory, dependencies) { this.factory = factory, this.dependencies = dependencies } return ResolvedReflectiveFactory }(), _MAX_CONSTRUCTION_COUNTER = 10, UNDEFINED = new Object, ReflectiveProtoInjectorInlineStrategy = function () { function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) { this.provider0 = null, this.provider1 = null, this.provider2 = null, this.provider3 = null, this.provider4 = null, this.provider5 = null, this.provider6 = null, this.provider7 = null, this.provider8 = null, this.provider9 = null, this.keyId0 = null, this.keyId1 = null, this.keyId2 = null, this.keyId3 = null, this.keyId4 = null, this.keyId5 = null, this.keyId6 = null, this.keyId7 = null, this.keyId8 = null, this.keyId9 = null; var length = providers.length; length > 0 && (this.provider0 = providers[0], this.keyId0 = providers[0].key.id), length > 1 && (this.provider1 = providers[1], this.keyId1 = providers[1].key.id), length > 2 && (this.provider2 = providers[2], this.keyId2 = providers[2].key.id), length > 3 && (this.provider3 = providers[3], this.keyId3 = providers[3].key.id), length > 4 && (this.provider4 = providers[4], this.keyId4 = providers[4].key.id), length > 5 && (this.provider5 = providers[5], this.keyId5 = providers[5].key.id), length > 6 && (this.provider6 = providers[6], this.keyId6 = providers[6].key.id), length > 7 && (this.provider7 = providers[7], this.keyId7 = providers[7].key.id), length > 8 && (this.provider8 = providers[8], this.keyId8 = providers[8].key.id), length > 9 && (this.provider9 = providers[9], this.keyId9 = providers[9].key.id) } return ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) { if (0 == index) return this.provider0; if (1 == index) return this.provider1; if (2 == index) return this.provider2; if (3 == index) return this.provider3; if (4 == index) return this.provider4; if (5 == index) return this.provider5; if (6 == index) return this.provider6; if (7 == index) return this.provider7; if (8 == index) return this.provider8; if (9 == index) return this.provider9; throw new OutOfBoundsError(index) }, ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) { return new ReflectiveInjectorInlineStrategy(injector, this) }, ReflectiveProtoInjectorInlineStrategy }(), ReflectiveProtoInjectorDynamicStrategy = function () { function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) { this.providers = providers; var len = providers.length; this.keyIds = new Array(len); for (var i = 0; i < len; i++) this.keyIds[i] = providers[i].key.id } return ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) { if (index < 0 || index >= this.providers.length) throw new OutOfBoundsError(index); return this.providers[index] }, ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) { return new ReflectiveInjectorDynamicStrategy(this, ei) }, ReflectiveProtoInjectorDynamicStrategy }(), ReflectiveProtoInjector = function () { function ReflectiveProtoInjector(providers) { this.numberOfProviders = providers.length, this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers) } return ReflectiveProtoInjector.fromResolvedProviders = function (providers) { return new ReflectiveProtoInjector(providers) }, ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) { return this._strategy.getProviderAtIndex(index) }, ReflectiveProtoInjector }(), ReflectiveInjectorInlineStrategy = function () { function ReflectiveInjectorInlineStrategy(injector, protoStrategy) { this.injector = injector, this.protoStrategy = protoStrategy, this.obj0 = UNDEFINED, this.obj1 = UNDEFINED, this.obj2 = UNDEFINED, this.obj3 = UNDEFINED, this.obj4 = UNDEFINED, this.obj5 = UNDEFINED, this.obj6 = UNDEFINED, this.obj7 = UNDEFINED, this.obj8 = UNDEFINED, this.obj9 = UNDEFINED } return ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0 }, ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) { return this.injector._new(provider) }, ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) { var p = this.protoStrategy, inj = this.injector; return p.keyId0 === keyId ? (this.obj0 === UNDEFINED && (this.obj0 = inj._new(p.provider0)), this.obj0) : p.keyId1 === keyId ? (this.obj1 === UNDEFINED && (this.obj1 = inj._new(p.provider1)), this.obj1) : p.keyId2 === keyId ? (this.obj2 === UNDEFINED && (this.obj2 = inj._new(p.provider2)), this.obj2) : p.keyId3 === keyId ? (this.obj3 === UNDEFINED && (this.obj3 = inj._new(p.provider3)), this.obj3) : p.keyId4 === keyId ? (this.obj4 === UNDEFINED && (this.obj4 = inj._new(p.provider4)), this.obj4) : p.keyId5 === keyId ? (this.obj5 === UNDEFINED && (this.obj5 = inj._new(p.provider5)), this.obj5) : p.keyId6 === keyId ? (this.obj6 === UNDEFINED && (this.obj6 = inj._new(p.provider6)), this.obj6) : p.keyId7 === keyId ? (this.obj7 === UNDEFINED && (this.obj7 = inj._new(p.provider7)), this.obj7) : p.keyId8 === keyId ? (this.obj8 === UNDEFINED && (this.obj8 = inj._new(p.provider8)), this.obj8) : p.keyId9 === keyId ? (this.obj9 === UNDEFINED && (this.obj9 = inj._new(p.provider9)), this.obj9) : UNDEFINED }, ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) { if (0 == index) return this.obj0; if (1 == index) return this.obj1; if (2 == index) return this.obj2; if (3 == index) return this.obj3; if (4 == index) return this.obj4; if (5 == index) return this.obj5; if (6 == index) return this.obj6; if (7 == index) return this.obj7; if (8 == index) return this.obj8; if (9 == index) return this.obj9; throw new OutOfBoundsError(index) }, ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER }, ReflectiveInjectorInlineStrategy }(), ReflectiveInjectorDynamicStrategy = function () { function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) { this.protoStrategy = protoStrategy, this.injector = injector, this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED) } return ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0 }, ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) { return this.injector._new(provider) }, ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) { for (var p = this.protoStrategy, i = 0; i < p.keyIds.length; i++) if (p.keyIds[i] === keyId) return this.objs[i] === UNDEFINED && (this.objs[i] = this.injector._new(p.providers[i])), this.objs[i]; return UNDEFINED }, ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) { if (index < 0 || index >= this.objs.length) throw new OutOfBoundsError(index); return this.objs[index] }, ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length }, ReflectiveInjectorDynamicStrategy }(), ReflectiveInjector = function () { function ReflectiveInjector() { } return ReflectiveInjector.resolve = function (providers) { return resolveReflectiveProviders(providers) }, ReflectiveInjector.resolveAndCreate = function (providers, parent) { void 0 === parent && (parent = null); var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers); return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent) }, ReflectiveInjector.fromResolvedProviders = function (providers, parent) { return void 0 === parent && (parent = null), new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent) }, Object.defineProperty(ReflectiveInjector.prototype, "parent", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented() }, ReflectiveInjector.prototype.createChildFromResolved = function (providers) { return unimplemented() }, ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented() }, ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented() }, ReflectiveInjector.prototype.get = function (token, notFoundValue) { }, ReflectiveInjector }(), ReflectiveInjector_ = function () {
        function ReflectiveInjector_(_proto, _parent) { void 0 === _parent && (_parent = null), this._constructionCounter = 0, this._proto = _proto, this._parent = _parent, this._strategy = _proto._strategy.createInjectorStrategy(this) } return ReflectiveInjector_.prototype.get = function (token, notFoundValue) { return void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue) }, ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index) }, Object.defineProperty(ReflectiveInjector_.prototype, "parent", { get: function () { return this._parent }, enumerable: !0, configurable: !0 }), Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", { get: function () { return this._strategy }, enumerable: !0, configurable: !0 }), ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) { var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers); return this.createChildFromResolved(ResolvedReflectiveProviders) }, ReflectiveInjector_.prototype.createChildFromResolved = function (providers) { var proto = new ReflectiveProtoInjector(providers), inj = new ReflectiveInjector_(proto); return inj._parent = this, inj }, ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) { return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]) }, ReflectiveInjector_.prototype.instantiateResolved = function (provider) { return this._instantiateProvider(provider) }, ReflectiveInjector_.prototype._new = function (provider) { if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) throw new CyclicDependencyError(this, provider.key); return this._instantiateProvider(provider) }, ReflectiveInjector_.prototype._instantiateProvider = function (provider) { if (provider.multiProvider) { for (var res = new Array(provider.resolvedFactories.length), i = 0; i < provider.resolvedFactories.length; ++i) res[i] = this._instantiate(provider, provider.resolvedFactories[i]); return res } return this._instantiate(provider, provider.resolvedFactories[0]) }, ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
            var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, factory = ResolvedReflectiveFactory.factory, deps = ResolvedReflectiveFactory.dependencies, length = deps.length;
            try { d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null, d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null, d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null, d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null, d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null, d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null, d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null, d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null, d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null, d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null, d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null, d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null, d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null, d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null, d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null, d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null, d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null, d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null, d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null, d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null } catch (e) { throw (e instanceof AbstractProviderError || e instanceof InstantiationError) && e.addKey(this, provider.key), e } var obj; try { switch (length) { case 0: obj = factory(); break; case 1: obj = factory(d0); break; case 2: obj = factory(d0, d1); break; case 3: obj = factory(d0, d1, d2); break; case 4: obj = factory(d0, d1, d2, d3); break; case 5: obj = factory(d0, d1, d2, d3, d4); break; case 6: obj = factory(d0, d1, d2, d3, d4, d5); break; case 7: obj = factory(d0, d1, d2, d3, d4, d5, d6); break; case 8: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7); break; case 9: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8); break; case 10: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9); break; case 11: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10); break; case 12: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11); break; case 13: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12); break; case 14: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13); break; case 15: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14); break; case 16: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15); break; case 17: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16); break; case 18: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17); break; case 19: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18); break; case 20: obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19); break; default: throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies") } } catch (e) { throw new InstantiationError(this, e, e.stack, provider.key) } return obj
        }, ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) { return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND) }, ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) { return key === INJECTOR_KEY ? this : upperBoundVisibility instanceof Self ? this._getByKeySelf(key, notFoundValue) : this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility) }, ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) { if (notFoundValue !== THROW_IF_NOT_FOUND) return notFoundValue; throw new NoProviderError(this, key) }, ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) { var obj = this._strategy.getObjByKeyId(key.id); return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue) }, ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) { var inj; for (inj = lowerBoundVisibility instanceof SkipSelf ? this._parent : this; inj instanceof ReflectiveInjector_;) { var inj_ = inj, obj = inj_._strategy.getObjByKeyId(key.id); if (obj !== UNDEFINED) return obj; inj = inj_._parent } return null !== inj ? inj.get(key.token, notFoundValue) : this._throwOrNull(key, notFoundValue) }, Object.defineProperty(ReflectiveInjector_.prototype, "displayName", { get: function () { var providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" ' }).join(", "); return "ReflectiveInjector(providers: [" + providers + "])" }, enumerable: !0, configurable: !0 }), ReflectiveInjector_.prototype.toString = function () { return this.displayName }, ReflectiveInjector_
    }(), INJECTOR_KEY = ReflectiveKey.get(Injector), ErrorHandler = function () { function ErrorHandler(rethrowError) { void 0 === rethrowError && (rethrowError = !0), this._console = console, this.rethrowError = rethrowError } return ErrorHandler.prototype.handleError = function (error) { var originalError = this._findOriginalError(error), originalStack = this._findOriginalStack(error), context = this._findContext(error); if (this._console.error("EXCEPTION: " + this._extractMessage(error)), originalError && this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError)), originalStack && (this._console.error("ORIGINAL STACKTRACE:"), this._console.error(originalStack)), context && (this._console.error("ERROR CONTEXT:"), this._console.error(context)), this.rethrowError) throw error }, ErrorHandler.prototype._extractMessage = function (error) { return error instanceof Error ? error.message : error.toString() }, ErrorHandler.prototype._findContext = function (error) { return error ? error.context ? error.context : this._findContext(error.originalError) : null }, ErrorHandler.prototype._findOriginalError = function (error) { for (var e = error.originalError; e && e.originalError;) e = e.originalError; return e }, ErrorHandler.prototype._findOriginalStack = function (error) { if (!(error instanceof Error)) return null; for (var e = error, stack = e.stack; e instanceof Error && e.originalError;) e = e.originalError, e instanceof Error && e.stack && (stack = e.stack); return stack }, ErrorHandler }(), StringMapWrapper = function () { function StringMapWrapper() { } return StringMapWrapper.merge = function (m1, m2) { for (var m = {}, _i = 0, _a = Object.keys(m1) ; _i < _a.length; _i++) { var k = _a[_i]; m[k] = m1[k] } for (var _b = 0, _c = Object.keys(m2) ; _b < _c.length; _b++) { var k = _c[_b]; m[k] = m2[k] } return m }, StringMapWrapper.equals = function (m1, m2) { var k1 = Object.keys(m1), k2 = Object.keys(m2); if (k1.length != k2.length) return !1; for (var i = 0; i < k1.length; i++) { var key = k1[i]; if (m1[key] !== m2[key]) return !1 } return !0 }, StringMapWrapper }(), ListWrapper = function () { function ListWrapper() { } return ListWrapper.findLast = function (arr, condition) { for (var i = arr.length - 1; i >= 0; i--) if (condition(arr[i])) return arr[i]; return null }, ListWrapper.removeAll = function (list, items) { for (var i = 0; i < items.length; ++i) { var index = list.indexOf(items[i]); index > -1 && list.splice(index, 1) } }, ListWrapper.remove = function (list, el) { var index = list.indexOf(el); return index > -1 && (list.splice(index, 1), !0) }, ListWrapper.equals = function (a, b) { if (a.length != b.length) return !1; for (var i = 0; i < a.length; ++i) if (a[i] !== b[i]) return !1; return !0 }, ListWrapper.flatten = function (list) { return list.reduce(function (flat, item) { var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item; return flat.concat(flatItem) }, []) }, ListWrapper }(), APP_INITIALIZER = new OpaqueToken("Application Initializer"), ApplicationInitStatus = function () { function ApplicationInitStatus(appInits) { var _this = this; this._done = !1; var asyncInitPromises = []; if (appInits) for (var i = 0; i < appInits.length; i++) { var initResult = appInits[i](); isPromise(initResult) && asyncInitPromises.push(initResult) } this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = !0 }), 0 === asyncInitPromises.length && (this._done = !0) } return Object.defineProperty(ApplicationInitStatus.prototype, "done", { get: function () { return this._done }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", { get: function () { return this._donePromise }, enumerable: !0, configurable: !0 }), ApplicationInitStatus.decorators = [{ type: Injectable }], ApplicationInitStatus.ctorParameters = function () { return [{ type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER] }, { type: Optional }] }] }, ApplicationInitStatus }(), APP_ID = new OpaqueToken("AppId"), APP_ID_RANDOM_PROVIDER = { provide: APP_ID, useFactory: _appIdRandomProviderFactory, deps: [] }, PLATFORM_INITIALIZER = new OpaqueToken("Platform Initializer"), APP_BOOTSTRAP_LISTENER = new OpaqueToken("appBootstrapListener"), PACKAGE_ROOT_URL = new OpaqueToken("Application Packages Root URL"), Console = function () { function Console() { } return Console.prototype.log = function (message) { print(message) }, Console.prototype.warn = function (message) { warn(message) }, Console.decorators = [{ type: Injectable }], Console.ctorParameters = function () { return [] }, Console }(), __extends$4 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ComponentStillLoadingError = function (_super) { function ComponentStillLoadingError(compType) { _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!"), this.compType = compType } return __extends$4(ComponentStillLoadingError, _super), ComponentStillLoadingError }(BaseError), ModuleWithComponentFactories = function () { function ModuleWithComponentFactories(ngModuleFactory, componentFactories) { this.ngModuleFactory = ngModuleFactory, this.componentFactories = componentFactories } return ModuleWithComponentFactories }(), Compiler = function () { function Compiler() { } return Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError() }, Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError() }, Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) { throw _throwError() }, Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) { throw _throwError() }, Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError() }, Compiler.prototype.clearCache = function () { }, Compiler.prototype.clearCacheFor = function (type) { }, Compiler.decorators = [{ type: Injectable }], Compiler.ctorParameters = function () { return [] }, Compiler }(), COMPILER_OPTIONS = new OpaqueToken("compilerOptions"), CompilerFactory = function () { function CompilerFactory() { } return CompilerFactory.prototype.createCompiler = function (options) { }, CompilerFactory }(), ElementRef = function () { function ElementRef(nativeElement) { this.nativeElement = nativeElement } return ElementRef }(), __extends$6 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, EventEmitter = function (_super) { function EventEmitter(isAsync) { void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync } return __extends$6(EventEmitter, _super), EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value) }, EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) { var schedulerFn, errorFn = function (err) { return null }, completeFn = function () { return null }; return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext.next(value) }) } : function (value) { generatorOrNext.next(value) }, generatorOrNext.error && (errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err) }) } : function (err) { generatorOrNext.error(err) }), generatorOrNext.complete && (completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete() }) } : function () { generatorOrNext.complete() })) : (schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value) }) } : function (value) { generatorOrNext(value) }, error && (errorFn = this.__isAsync ? function (err) { setTimeout(function () { return error(err) }) } : function (err) { error(err) }), complete && (completeFn = this.__isAsync ? function () { setTimeout(function () { return complete() }) } : function () { complete() })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn) }, EventEmitter }(rxjs_Subject.Subject), NgZone = function () { function NgZone(_a) { var _b = _a.enableLongStackTrace, enableLongStackTrace = void 0 !== _b && _b; if (this._hasPendingMicrotasks = !1, this._hasPendingMacrotasks = !1, this._isStable = !0, this._nesting = 0, this._onUnstable = new EventEmitter((!1)), this._onMicrotaskEmpty = new EventEmitter((!1)), this._onStable = new EventEmitter((!1)), this._onErrorEvents = new EventEmitter((!1)), "undefined" == typeof Zone) throw new Error("Angular requires Zone.js prolyfill."); Zone.assertZonePatched(), this.outer = this.inner = Zone.current, Zone.wtfZoneSpec && (this.inner = this.inner.fork(Zone.wtfZoneSpec)), enableLongStackTrace && Zone.longStackTraceZoneSpec && (this.inner = this.inner.fork(Zone.longStackTraceZoneSpec)), this.forkInnerZoneWithAngularBehavior() } return NgZone.isInAngularZone = function () { return Zone.current.get("isAngularZone") === !0 }, NgZone.assertInAngularZone = function () { if (!NgZone.isInAngularZone()) throw new Error("Expected to be in Angular Zone, but it is not!") }, NgZone.assertNotInAngularZone = function () { if (NgZone.isInAngularZone()) throw new Error("Expected to not be in Angular Zone, but it is!") }, NgZone.prototype.run = function (fn) { return this.inner.run(fn) }, NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn) }, NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn) }, Object.defineProperty(NgZone.prototype, "onUnstable", { get: function () { return this._onUnstable }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", { get: function () { return this._onMicrotaskEmpty }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "onStable", { get: function () { return this._onStable }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "onError", { get: function () { return this._onErrorEvents }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "isStable", { get: function () { return this._isStable }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", { get: function () { return this._hasPendingMicrotasks }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", { get: function () { return this._hasPendingMacrotasks }, enumerable: !0, configurable: !0 }), NgZone.prototype.checkStable = function () { var _this = this; if (0 == this._nesting && !this._hasPendingMicrotasks && !this._isStable) try { this._nesting++, this._onMicrotaskEmpty.emit(null) } finally { if (this._nesting--, !this._hasPendingMicrotasks) try { this.runOutsideAngular(function () { return _this._onStable.emit(null) }) } finally { this._isStable = !0 } } }, NgZone.prototype.forkInnerZoneWithAngularBehavior = function () { var _this = this; this.inner = this.inner.fork({ name: "angular", properties: { isAngularZone: !0 }, onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) { try { return _this.onEnter(), delegate.invokeTask(target, task, applyThis, applyArgs) } finally { _this.onLeave() } }, onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) { try { return _this.onEnter(), delegate.invoke(target, callback, applyThis, applyArgs, source) } finally { _this.onLeave() } }, onHasTask: function (delegate, current, target, hasTaskState) { delegate.hasTask(target, hasTaskState), current === target && ("microTask" == hasTaskState.change ? _this.setHasMicrotask(hasTaskState.microTask) : "macroTask" == hasTaskState.change && _this.setHasMacrotask(hasTaskState.macroTask)) }, onHandleError: function (delegate, current, target, error) { return delegate.handleError(target, error), _this.triggerError(error), !1 } }) }, NgZone.prototype.onEnter = function () { this._nesting++, this._isStable && (this._isStable = !1, this._onUnstable.emit(null)) }, NgZone.prototype.onLeave = function () { this._nesting--, this.checkStable() }, NgZone.prototype.setHasMicrotask = function (hasMicrotasks) { this._hasPendingMicrotasks = hasMicrotasks, this.checkStable() }, NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks }, NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error) }, NgZone }(), AnimationQueue = function () { function AnimationQueue(_zone) { this._zone = _zone, this.entries = [] } return AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player) }, AnimationQueue.prototype.flush = function () { var _this = this; this.entries.length && this._zone.runOutsideAngular(function () { Promise.resolve(null).then(function () { return _this._triggerAnimations() }) }) }, AnimationQueue.prototype._triggerAnimations = function () { for (NgZone.assertNotInAngularZone() ; this.entries.length;) { var player = this.entries.shift(); player.hasStarted() || player.play() } }, AnimationQueue.decorators = [{ type: Injectable }], AnimationQueue.ctorParameters = function () { return [{ type: NgZone }] }, AnimationQueue }(), DefaultIterableDifferFactory = function () { function DefaultIterableDifferFactory() { } return DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj) }, DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) { return new DefaultIterableDiffer(trackByFn) }, DefaultIterableDifferFactory }(), trackByIdentity = function (index, item) { return item }, DefaultIterableDiffer = function () { function DefaultIterableDiffer(_trackByFn) { this._trackByFn = _trackByFn, this._length = null, this._collection = null, this._linkedRecords = null, this._unlinkedRecords = null, this._previousItHead = null, this._itHead = null, this._itTail = null, this._additionsHead = null, this._additionsTail = null, this._movesHead = null, this._movesTail = null, this._removalsHead = null, this._removalsTail = null, this._identityChangesHead = null, this._identityChangesTail = null, this._trackByFn = this._trackByFn || trackByIdentity } return Object.defineProperty(DefaultIterableDiffer.prototype, "collection", { get: function () { return this._collection }, enumerable: !0, configurable: !0 }), Object.defineProperty(DefaultIterableDiffer.prototype, "length", { get: function () { return this._length }, enumerable: !0, configurable: !0 }), DefaultIterableDiffer.prototype.forEachItem = function (fn) { var record; for (record = this._itHead; null !== record; record = record._next) fn(record) }, DefaultIterableDiffer.prototype.forEachOperation = function (fn) { for (var nextIt = this._itHead, nextRemove = this._removalsHead, addRemoveOffset = 0, moveOffsets = null; nextIt || nextRemove;) { var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove, adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets), currentIndex = record.currentIndex; if (record === nextRemove) addRemoveOffset--, nextRemove = nextRemove._nextRemoved; else if (nextIt = nextIt._next, null == record.previousIndex) addRemoveOffset++; else { moveOffsets || (moveOffsets = []); var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset, localCurrentIndex = currentIndex - addRemoveOffset; if (localMovePreviousIndex != localCurrentIndex) { for (var i = 0; i < localMovePreviousIndex; i++) { var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0, index = offset + i; localCurrentIndex <= index && index < localMovePreviousIndex && (moveOffsets[i] = offset + 1) } var previousIndex = record.previousIndex; moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex } } adjPreviousIndex !== currentIndex && fn(record, adjPreviousIndex, currentIndex) } }, DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) { var record; for (record = this._previousItHead; null !== record; record = record._nextPrevious) fn(record) }, DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) { var record; for (record = this._additionsHead; null !== record; record = record._nextAdded) fn(record) }, DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) { var record; for (record = this._movesHead; null !== record; record = record._nextMoved) fn(record) }, DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) { var record; for (record = this._removalsHead; null !== record; record = record._nextRemoved) fn(record) }, DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) { var record; for (record = this._identityChangesHead; null !== record; record = record._nextIdentityChange) fn(record) }, DefaultIterableDiffer.prototype.diff = function (collection) { if (isBlank(collection) && (collection = []), !isListLikeIterable(collection)) throw new Error("Error trying to diff '" + collection + "'"); return this.check(collection) ? this : null }, DefaultIterableDiffer.prototype.onDestroy = function () { }, DefaultIterableDiffer.prototype.check = function (collection) { var _this = this; this._reset(); var index, item, itemTrackBy, record = this._itHead, mayBeDirty = !1; if (Array.isArray(collection)) { var list = collection; this._length = collection.length; for (var index_1 = 0; index_1 < this._length; index_1++) item = list[index_1], itemTrackBy = this._trackByFn(index_1, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = this._verifyReinsertion(record, item, itemTrackBy, index_1)), looseIdentical(record.item, item) || this._addIdentityChange(record, item)) : (record = this._mismatch(record, item, itemTrackBy, index_1), mayBeDirty = !0), record = record._next } else index = 0, iterateListLike(collection, function (item) { itemTrackBy = _this._trackByFn(index, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = _this._verifyReinsertion(record, item, itemTrackBy, index)), looseIdentical(record.item, item) || _this._addIdentityChange(record, item)) : (record = _this._mismatch(record, item, itemTrackBy, index), mayBeDirty = !0), record = record._next, index++ }), this._length = index; return this._truncate(record), this._collection = collection, this.isDirty }, Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", { get: function () { return null !== this._additionsHead || null !== this._movesHead || null !== this._removalsHead || null !== this._identityChangesHead }, enumerable: !0, configurable: !0 }), DefaultIterableDiffer.prototype._reset = function () { if (this.isDirty) { var record = void 0, nextRecord = void 0; for (record = this._previousItHead = this._itHead; null !== record; record = record._next) record._nextPrevious = record._next; for (record = this._additionsHead; null !== record; record = record._nextAdded) record.previousIndex = record.currentIndex; for (this._additionsHead = this._additionsTail = null, record = this._movesHead; null !== record; record = nextRecord) record.previousIndex = record.currentIndex, nextRecord = record._nextMoved; this._movesHead = this._movesTail = null, this._removalsHead = this._removalsTail = null, this._identityChangesHead = this._identityChangesTail = null } }, DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) { var previousRecord; return null === record ? previousRecord = this._itTail : (previousRecord = record._prev, this._remove(record)), record = null === this._linkedRecords ? null : this._linkedRecords.get(itemTrackBy, index), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._moveAfter(record, previousRecord, index)) : (record = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._reinsertAfter(record, previousRecord, index)) : record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index)), record }, DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) { var reinsertRecord = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy); return null !== reinsertRecord ? record = this._reinsertAfter(reinsertRecord, record._prev, index) : record.currentIndex != index && (record.currentIndex = index, this._addToMoves(record, index)), record }, DefaultIterableDiffer.prototype._truncate = function (record) { for (; null !== record;) { var nextRecord = record._next; this._addToRemovals(this._unlink(record)), record = nextRecord } null !== this._unlinkedRecords && this._unlinkedRecords.clear(), null !== this._additionsTail && (this._additionsTail._nextAdded = null), null !== this._movesTail && (this._movesTail._nextMoved = null), null !== this._itTail && (this._itTail._next = null), null !== this._removalsTail && (this._removalsTail._nextRemoved = null), null !== this._identityChangesTail && (this._identityChangesTail._nextIdentityChange = null) }, DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) { null !== this._unlinkedRecords && this._unlinkedRecords.remove(record); var prev = record._prevRemoved, next = record._nextRemoved; return null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record }, DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) { return this._unlink(record), this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record }, DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) { return this._insertAfter(record, prevRecord, index), null === this._additionsTail ? this._additionsTail = this._additionsHead = record : this._additionsTail = this._additionsTail._nextAdded = record, record }, DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) { var next = null === prevRecord ? this._itHead : prevRecord._next; return record._next = next, record._prev = prevRecord, null === next ? this._itTail = record : next._prev = record, null === prevRecord ? this._itHead = record : prevRecord._next = record, null === this._linkedRecords && (this._linkedRecords = new _DuplicateMap), this._linkedRecords.put(record), record.currentIndex = index, record }, DefaultIterableDiffer.prototype._remove = function (record) { return this._addToRemovals(this._unlink(record)) }, DefaultIterableDiffer.prototype._unlink = function (record) { null !== this._linkedRecords && this._linkedRecords.remove(record); var prev = record._prev, next = record._next; return null === prev ? this._itHead = next : prev._next = next, null === next ? this._itTail = prev : next._prev = prev, record }, DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) { return record.previousIndex === toIndex ? record : (null === this._movesTail ? this._movesTail = this._movesHead = record : this._movesTail = this._movesTail._nextMoved = record, record) }, DefaultIterableDiffer.prototype._addToRemovals = function (record) { return null === this._unlinkedRecords && (this._unlinkedRecords = new _DuplicateMap), this._unlinkedRecords.put(record), record.currentIndex = null, record._nextRemoved = null, null === this._removalsTail ? (this._removalsTail = this._removalsHead = record, record._prevRemoved = null) : (record._prevRemoved = this._removalsTail, this._removalsTail = this._removalsTail._nextRemoved = record), record }, DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) { return record.item = item, null === this._identityChangesTail ? this._identityChangesTail = this._identityChangesHead = record : this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record, record }, DefaultIterableDiffer.prototype.toString = function () { var list = []; this.forEachItem(function (record) { return list.push(record) }); var previous = []; this.forEachPreviousItem(function (record) { return previous.push(record) }); var additions = []; this.forEachAddedItem(function (record) { return additions.push(record) }); var moves = []; this.forEachMovedItem(function (record) { return moves.push(record) }); var removals = []; this.forEachRemovedItem(function (record) { return removals.push(record) }); var identityChanges = []; return this.forEachIdentityChange(function (record) { return identityChanges.push(record) }), "collection: " + list.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nmoves: " + moves.join(", ") + "\nremovals: " + removals.join(", ") + "\nidentityChanges: " + identityChanges.join(", ") + "\n" }, DefaultIterableDiffer }(), CollectionChangeRecord = function () { function CollectionChangeRecord(item, trackById) { this.item = item, this.trackById = trackById, this.currentIndex = null, this.previousIndex = null, this._nextPrevious = null, this._prev = null, this._next = null, this._prevDup = null, this._nextDup = null, this._prevRemoved = null, this._nextRemoved = null, this._nextAdded = null, this._nextMoved = null, this._nextIdentityChange = null } return CollectionChangeRecord.prototype.toString = function () { return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + "[" + stringify(this.previousIndex) + "->" + stringify(this.currentIndex) + "]" }, CollectionChangeRecord }(), _DuplicateItemRecordList = function () { function _DuplicateItemRecordList() { this._head = null, this._tail = null } return _DuplicateItemRecordList.prototype.add = function (record) { null === this._head ? (this._head = this._tail = record, record._nextDup = null, record._prevDup = null) : (this._tail._nextDup = record, record._prevDup = this._tail, record._nextDup = null, this._tail = record) }, _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) { var record; for (record = this._head; null !== record; record = record._nextDup) if ((null === afterIndex || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) return record; return null }, _DuplicateItemRecordList.prototype.remove = function (record) { var prev = record._prevDup, next = record._nextDup; return null === prev ? this._head = next : prev._nextDup = next, null === next ? this._tail = prev : next._prevDup = prev, null === this._head }, _DuplicateItemRecordList }(), _DuplicateMap = function () { function _DuplicateMap() { this.map = new Map } return _DuplicateMap.prototype.put = function (record) { var key = record.trackById, duplicates = this.map.get(key); duplicates || (duplicates = new _DuplicateItemRecordList, this.map.set(key, duplicates)), duplicates.add(record) }, _DuplicateMap.prototype.get = function (trackById, afterIndex) { void 0 === afterIndex && (afterIndex = null); var key = trackById, recordList = this.map.get(key); return recordList ? recordList.get(trackById, afterIndex) : null }, _DuplicateMap.prototype.remove = function (record) { var key = record.trackById, recordList = this.map.get(key); return recordList.remove(record) && this.map.delete(key), record }, Object.defineProperty(_DuplicateMap.prototype, "isEmpty", { get: function () { return 0 === this.map.size }, enumerable: !0, configurable: !0 }), _DuplicateMap.prototype.clear = function () { this.map.clear() }, _DuplicateMap.prototype.toString = function () { return "_DuplicateMap(" + stringify(this.map) + ")" }, _DuplicateMap }(), DefaultKeyValueDifferFactory = function () { function DefaultKeyValueDifferFactory() { } return DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj) }, DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer }, DefaultKeyValueDifferFactory }(), DefaultKeyValueDiffer = function () {
        function DefaultKeyValueDiffer() { this._records = new Map, this._mapHead = null, this._previousMapHead = null, this._changesHead = null, this._changesTail = null, this._additionsHead = null, this._additionsTail = null, this._removalsHead = null, this._removalsTail = null } return Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", { get: function () { return null !== this._additionsHead || null !== this._changesHead || null !== this._removalsHead }, enumerable: !0, configurable: !0 }), DefaultKeyValueDiffer.prototype.forEachItem = function (fn) { var record; for (record = this._mapHead; null !== record; record = record._next) fn(record) }, DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) { var record; for (record = this._previousMapHead; null !== record; record = record._nextPrevious) fn(record) }, DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) { var record; for (record = this._changesHead; null !== record; record = record._nextChanged) fn(record) }, DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) { var record; for (record = this._additionsHead; null !== record; record = record._nextAdded) fn(record) }, DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) { var record; for (record = this._removalsHead; null !== record; record = record._nextRemoved) fn(record) }, DefaultKeyValueDiffer.prototype.diff = function (map) { if (map) { if (!(map instanceof Map || isJsObject(map))) throw new Error("Error trying to diff '" + map + "'") } else map = new Map; return this.check(map) ? this : null }, DefaultKeyValueDiffer.prototype.onDestroy = function () { }, DefaultKeyValueDiffer.prototype.check = function (map) {
            var _this = this; this._reset(); var records = this._records, oldSeqRecord = this._mapHead, lastOldSeqRecord = null, lastNewSeqRecord = null, seqChanged = !1; return this._forEach(map, function (value, key) {
                var newSeqRecord; oldSeqRecord && key === oldSeqRecord.key ? (newSeqRecord = oldSeqRecord, _this._maybeAddToChanges(newSeqRecord, value)) : (seqChanged = !0, null !== oldSeqRecord && (_this._removeFromSeq(lastOldSeqRecord, oldSeqRecord),
                _this._addToRemovals(oldSeqRecord)), records.has(key) ? (newSeqRecord = records.get(key), _this._maybeAddToChanges(newSeqRecord, value)) : (newSeqRecord = new KeyValueChangeRecord(key), records.set(key, newSeqRecord), newSeqRecord.currentValue = value, _this._addToAdditions(newSeqRecord))), seqChanged && (_this._isInRemovals(newSeqRecord) && _this._removeFromRemovals(newSeqRecord), null == lastNewSeqRecord ? _this._mapHead = newSeqRecord : lastNewSeqRecord._next = newSeqRecord), lastOldSeqRecord = oldSeqRecord, lastNewSeqRecord = newSeqRecord, oldSeqRecord = oldSeqRecord && oldSeqRecord._next
            }), this._truncate(lastOldSeqRecord, oldSeqRecord), this.isDirty
        }, DefaultKeyValueDiffer.prototype._reset = function () { if (this.isDirty) { var record = void 0; for (record = this._previousMapHead = this._mapHead; null !== record; record = record._next) record._nextPrevious = record._next; for (record = this._changesHead; null !== record; record = record._nextChanged) record.previousValue = record.currentValue; for (record = this._additionsHead; null != record; record = record._nextAdded) record.previousValue = record.currentValue; this._changesHead = this._changesTail = null, this._additionsHead = this._additionsTail = null, this._removalsHead = this._removalsTail = null } }, DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) { for (; null !== record;) { null === lastRecord ? this._mapHead = null : lastRecord._next = null; var nextRecord = record._next; this._addToRemovals(record), lastRecord = record, record = nextRecord } for (var rec = this._removalsHead; null !== rec; rec = rec._nextRemoved) rec.previousValue = rec.currentValue, rec.currentValue = null, this._records.delete(rec.key) }, DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) { looseIdentical(newValue, record.currentValue) || (record.previousValue = record.currentValue, record.currentValue = newValue, this._addToChanges(record)) }, DefaultKeyValueDiffer.prototype._isInRemovals = function (record) { return record === this._removalsHead || null !== record._nextRemoved || null !== record._prevRemoved }, DefaultKeyValueDiffer.prototype._addToRemovals = function (record) { null === this._removalsHead ? this._removalsHead = this._removalsTail = record : (this._removalsTail._nextRemoved = record, record._prevRemoved = this._removalsTail, this._removalsTail = record) }, DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) { var next = record._next; null === prev ? this._mapHead = next : prev._next = next, record._next = null }, DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) { var prev = record._prevRemoved, next = record._nextRemoved; null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, record._prevRemoved = record._nextRemoved = null }, DefaultKeyValueDiffer.prototype._addToAdditions = function (record) { null === this._additionsHead ? this._additionsHead = this._additionsTail = record : (this._additionsTail._nextAdded = record, this._additionsTail = record) }, DefaultKeyValueDiffer.prototype._addToChanges = function (record) { null === this._changesHead ? this._changesHead = this._changesTail = record : (this._changesTail._nextChanged = record, this._changesTail = record) }, DefaultKeyValueDiffer.prototype.toString = function () { var record, items = [], previous = [], changes = [], additions = [], removals = []; for (record = this._mapHead; null !== record; record = record._next) items.push(stringify(record)); for (record = this._previousMapHead; null !== record; record = record._nextPrevious) previous.push(stringify(record)); for (record = this._changesHead; null !== record; record = record._nextChanged) changes.push(stringify(record)); for (record = this._additionsHead; null !== record; record = record._nextAdded) additions.push(stringify(record)); for (record = this._removalsHead; null !== record; record = record._nextRemoved) removals.push(stringify(record)); return "map: " + items.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nchanges: " + changes.join(", ") + "\nremovals: " + removals.join(", ") + "\n" }, DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) { obj instanceof Map ? obj.forEach(fn) : Object.keys(obj).forEach(function (k) { return fn(obj[k], k) }) }, DefaultKeyValueDiffer
    }(), KeyValueChangeRecord = function () { function KeyValueChangeRecord(key) { this.key = key, this.previousValue = null, this.currentValue = null, this._nextPrevious = null, this._next = null, this._nextAdded = null, this._nextRemoved = null, this._prevRemoved = null, this._nextChanged = null } return KeyValueChangeRecord.prototype.toString = function () { return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + "[" + stringify(this.previousValue) + "->" + stringify(this.currentValue) + "]" }, KeyValueChangeRecord }(), IterableDiffers = function () { function IterableDiffers(factories) { this.factories = factories } return IterableDiffers.create = function (factories, parent) { if (isPresent(parent)) { var copied = parent.factories.slice(); return factories = factories.concat(copied), new IterableDiffers(factories) } return new IterableDiffers(factories) }, IterableDiffers.extend = function (factories) { return { provide: IterableDiffers, useFactory: function (parent) { if (!parent) throw new Error("Cannot extend IterableDiffers without a parent injector"); return IterableDiffers.create(factories, parent) }, deps: [[IterableDiffers, new SkipSelf, new Optional]] } }, IterableDiffers.prototype.find = function (iterable) { var factory = this.factories.find(function (f) { return f.supports(iterable) }); if (isPresent(factory)) return factory; throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'") }, IterableDiffers }(), KeyValueDiffers = function () { function KeyValueDiffers(factories) { this.factories = factories } return KeyValueDiffers.create = function (factories, parent) { if (isPresent(parent)) { var copied = parent.factories.slice(); return factories = factories.concat(copied), new KeyValueDiffers(factories) } return new KeyValueDiffers(factories) }, KeyValueDiffers.extend = function (factories) { return { provide: KeyValueDiffers, useFactory: function (parent) { if (!parent) throw new Error("Cannot extend KeyValueDiffers without a parent injector"); return KeyValueDiffers.create(factories, parent) }, deps: [[KeyValueDiffers, new SkipSelf, new Optional]] } }, KeyValueDiffers.prototype.find = function (kv) { var factory = this.factories.find(function (f) { return f.supports(kv) }); if (isPresent(factory)) return factory; throw new Error("Cannot find a differ supporting object '" + kv + "'") }, KeyValueDiffers }(), UNINITIALIZED = { toString: function () { return "CD_INIT_VALUE" } }, WrappedValue = function () { function WrappedValue(wrapped) { this.wrapped = wrapped } return WrappedValue.wrap = function (value) { return new WrappedValue(value) }, WrappedValue }(), ValueUnwrapper = function () { function ValueUnwrapper() { this.hasWrappedValue = !1 } return ValueUnwrapper.prototype.unwrap = function (value) { return value instanceof WrappedValue ? (this.hasWrappedValue = !0, value.wrapped) : value }, ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = !1 }, ValueUnwrapper }(), SimpleChange = function () { function SimpleChange(previousValue, currentValue) { this.previousValue = previousValue, this.currentValue = currentValue } return SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED }, SimpleChange }(), ChangeDetectorRef = function () { function ChangeDetectorRef() { } return ChangeDetectorRef.prototype.markForCheck = function () { }, ChangeDetectorRef.prototype.detach = function () { }, ChangeDetectorRef.prototype.detectChanges = function () { }, ChangeDetectorRef.prototype.checkNoChanges = function () { }, ChangeDetectorRef.prototype.reattach = function () { }, ChangeDetectorRef }(), keyValDiff = [new DefaultKeyValueDifferFactory], iterableDiff = [new DefaultIterableDifferFactory], defaultIterableDiffers = new IterableDiffers(iterableDiff), defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff), RenderComponentType = function () { function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) { this.id = id, this.templateUrl = templateUrl, this.slotCount = slotCount, this.encapsulation = encapsulation, this.styles = styles, this.animations = animations } return RenderComponentType }(), RenderDebugInfo = function () { function RenderDebugInfo() { } return Object.defineProperty(RenderDebugInfo.prototype, "injector", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderDebugInfo.prototype, "component", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderDebugInfo.prototype, "references", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderDebugInfo.prototype, "context", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderDebugInfo.prototype, "source", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), RenderDebugInfo }(), Renderer = function () { function Renderer() { } return Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { }, Renderer.prototype.createElement = function (parentElement, name, debugInfo) { }, Renderer.prototype.createViewRoot = function (hostElement) { }, Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { }, Renderer.prototype.createText = function (parentElement, value, debugInfo) { }, Renderer.prototype.projectNodes = function (parentElement, nodes) { }, Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { }, Renderer.prototype.detachView = function (viewRootNodes) { }, Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { }, Renderer.prototype.listen = function (renderElement, name, callback) { }, Renderer.prototype.listenGlobal = function (target, name, callback) { }, Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { }, Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { }, Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { }, Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { }, Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { }, Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { }, Renderer.prototype.setText = function (renderNode, text) { }, Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { }, Renderer }(), RootRenderer = function () { function RootRenderer() { } return RootRenderer.prototype.renderComponent = function (componentType) { }, RootRenderer }(), SecurityContext = {}; SecurityContext.NONE = 0, SecurityContext.HTML = 1, SecurityContext.STYLE = 2, SecurityContext.SCRIPT = 3, SecurityContext.URL = 4, SecurityContext.RESOURCE_URL = 5, SecurityContext[SecurityContext.NONE] = "NONE", SecurityContext[SecurityContext.HTML] = "HTML", SecurityContext[SecurityContext.STYLE] = "STYLE", SecurityContext[SecurityContext.SCRIPT] = "SCRIPT", SecurityContext[SecurityContext.URL] = "URL", SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL"; var trace, events, _platform, Sanitizer = function () { function Sanitizer() { } return Sanitizer.prototype.sanitize = function (context, value) { }, Sanitizer }(), __extends$7 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ExpressionChangedAfterItHasBeenCheckedError = function (_super) { function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) { var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'."; oldValue === UNINITIALIZED && (msg += " It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook ?"), _super.call(this, msg) } return __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super), ExpressionChangedAfterItHasBeenCheckedError }(BaseError), ViewWrappedError = function (_super) { function ViewWrappedError(originalError, context) { _super.call(this, "Error in " + context.source, originalError), this.context = context } return __extends$7(ViewWrappedError, _super), ViewWrappedError }(WrappedError), ViewDestroyedError = function (_super) { function ViewDestroyedError(details) { _super.call(this, "Attempt to use a destroyed view: " + details) } return __extends$7(ViewDestroyedError, _super), ViewDestroyedError }(BaseError), ViewUtils = function () { function ViewUtils(_renderer, sanitizer, animationQueue) { this._renderer = _renderer, this.animationQueue = animationQueue, this._nextCompTypeId = 0, this.sanitizer = sanitizer } return ViewUtils.prototype.renderComponent = function (renderComponentType) { return this._renderer.renderComponent(renderComponentType) }, ViewUtils.decorators = [{ type: Injectable }], ViewUtils.ctorParameters = function () { return [{ type: RootRenderer }, { type: Sanitizer }, { type: AnimationQueue }] }, ViewUtils }(), nextRenderComponentTypeId = 0, EMPTY_ARRAY = [], EMPTY_MAP = {}, CAMEL_CASE_REGEXP = /([A-Z])/g, InlineArray0 = function () { function InlineArray0() { this.length = 0 } return InlineArray0.prototype.get = function (index) { }, InlineArray0.prototype.set = function (index, value) { }, InlineArray0 }(), InlineArray2 = function () { function InlineArray2(length, _v0, _v1) { this.length = length, this._v0 = _v0, this._v1 = _v1 } return InlineArray2.prototype.get = function (index) { switch (index) { case 0: return this._v0; case 1: return this._v1; default: return } }, InlineArray2.prototype.set = function (index, value) { switch (index) { case 0: this._v0 = value; break; case 1: this._v1 = value } }, InlineArray2 }(), InlineArray4 = function () { function InlineArray4(length, _v0, _v1, _v2, _v3) { this.length = length, this._v0 = _v0, this._v1 = _v1, this._v2 = _v2, this._v3 = _v3 } return InlineArray4.prototype.get = function (index) { switch (index) { case 0: return this._v0; case 1: return this._v1; case 2: return this._v2; case 3: return this._v3; default: return } }, InlineArray4.prototype.set = function (index, value) { switch (index) { case 0: this._v0 = value; break; case 1: this._v1 = value; break; case 2: this._v2 = value; break; case 3: this._v3 = value } }, InlineArray4 }(), InlineArray8 = function () { function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) { this.length = length, this._v0 = _v0, this._v1 = _v1, this._v2 = _v2, this._v3 = _v3, this._v4 = _v4, this._v5 = _v5, this._v6 = _v6, this._v7 = _v7 } return InlineArray8.prototype.get = function (index) { switch (index) { case 0: return this._v0; case 1: return this._v1; case 2: return this._v2; case 3: return this._v3; case 4: return this._v4; case 5: return this._v5; case 6: return this._v6; case 7: return this._v7; default: return } }, InlineArray8.prototype.set = function (index, value) { switch (index) { case 0: this._v0 = value; break; case 1: this._v1 = value; break; case 2: this._v2 = value; break; case 3: this._v3 = value; break; case 4: this._v4 = value; break; case 5: this._v5 = value; break; case 6: this._v6 = value; break; case 7: this._v7 = value } }, InlineArray8 }(), InlineArray16 = function () { function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) { this.length = length, this._v0 = _v0, this._v1 = _v1, this._v2 = _v2, this._v3 = _v3, this._v4 = _v4, this._v5 = _v5, this._v6 = _v6, this._v7 = _v7, this._v8 = _v8, this._v9 = _v9, this._v10 = _v10, this._v11 = _v11, this._v12 = _v12, this._v13 = _v13, this._v14 = _v14, this._v15 = _v15 } return InlineArray16.prototype.get = function (index) { switch (index) { case 0: return this._v0; case 1: return this._v1; case 2: return this._v2; case 3: return this._v3; case 4: return this._v4; case 5: return this._v5; case 6: return this._v6; case 7: return this._v7; case 8: return this._v8; case 9: return this._v9; case 10: return this._v10; case 11: return this._v11; case 12: return this._v12; case 13: return this._v13; case 14: return this._v14; case 15: return this._v15; default: return } }, InlineArray16.prototype.set = function (index, value) { switch (index) { case 0: this._v0 = value; break; case 1: this._v1 = value; break; case 2: this._v2 = value; break; case 3: this._v3 = value; break; case 4: this._v4 = value; break; case 5: this._v5 = value; break; case 6: this._v6 = value; break; case 7: this._v7 = value; break; case 8: this._v8 = value; break; case 9: this._v9 = value; break; case 10: this._v10 = value; break; case 11: this._v11 = value; break; case 12: this._v12 = value; break; case 13: this._v13 = value; break; case 14: this._v14 = value; break; case 15: this._v15 = value } }, InlineArray16 }(), InlineArrayDynamic = function () { function InlineArrayDynamic(length) { for (var values = [], _i = 1; _i < arguments.length; _i++) values[_i - 1] = arguments[_i]; this.length = length, this._values = values } return InlineArrayDynamic.prototype.get = function (index) { return this._values[index] }, InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value }, InlineArrayDynamic }(), EMPTY_INLINE_ARRAY = new InlineArray0, view_utils = Object.freeze({ ViewUtils: ViewUtils, createRenderComponentType: createRenderComponentType, addToArray: addToArray, interpolate: interpolate, inlineInterpolate: inlineInterpolate, checkBinding: checkBinding, castByValue: castByValue, EMPTY_ARRAY: EMPTY_ARRAY, EMPTY_MAP: EMPTY_MAP, pureProxy1: pureProxy1, pureProxy2: pureProxy2, pureProxy3: pureProxy3, pureProxy4: pureProxy4, pureProxy5: pureProxy5, pureProxy6: pureProxy6, pureProxy7: pureProxy7, pureProxy8: pureProxy8, pureProxy9: pureProxy9, pureProxy10: pureProxy10, setBindingDebugInfoForChanges: setBindingDebugInfoForChanges, setBindingDebugInfo: setBindingDebugInfo, createRenderElement: createRenderElement, selectOrCreateRenderHostElement: selectOrCreateRenderHostElement, subscribeToRenderElement: subscribeToRenderElement, noop: noop, InlineArray2: InlineArray2, InlineArray4: InlineArray4, InlineArray8: InlineArray8, InlineArray16: InlineArray16, InlineArrayDynamic: InlineArrayDynamic, EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY }), __extends$5 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ComponentRef = function () { function ComponentRef() { } return Object.defineProperty(ComponentRef.prototype, "location", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef.prototype, "injector", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef.prototype, "instance", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef.prototype, "hostView", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef.prototype, "componentType", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ComponentRef.prototype.destroy = function () { }, ComponentRef.prototype.onDestroy = function (callback) { }, ComponentRef }(), ComponentRef_ = function (_super) { function ComponentRef_(_index, _parentView, _nativeElement, _component) { _super.call(this), this._index = _index, this._parentView = _parentView, this._nativeElement = _nativeElement, this._component = _component } return __extends$5(ComponentRef_, _super), Object.defineProperty(ComponentRef_.prototype, "location", { get: function () { return new ElementRef(this._nativeElement) }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "injector", { get: function () { return this._parentView.injector(this._index) }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "instance", { get: function () { return this._component }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "hostView", { get: function () { return this._parentView.ref }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", { get: function () { return this._parentView.ref }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "componentType", { get: function () { return this._component.constructor }, enumerable: !0, configurable: !0 }), ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy() }, ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback) }, ComponentRef_ }(ComponentRef), ComponentFactory = function () { function ComponentFactory(selector, _viewClass, _componentType) { this.selector = selector, this._viewClass = _viewClass, this._componentType = _componentType } return Object.defineProperty(ComponentFactory.prototype, "componentType", { get: function () { return this._componentType }, enumerable: !0, configurable: !0 }), ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) { void 0 === projectableNodes && (projectableNodes = null), void 0 === rootSelectorOrNode && (rootSelectorOrNode = null); var vu = injector.get(ViewUtils); projectableNodes || (projectableNodes = []); var hostView = new this._viewClass(vu, null, null, null); return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes) }, ComponentFactory }(), __extends$8 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, NoComponentFactoryError = function (_super) { function NoComponentFactoryError(component) { _super.call(this, "No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?"), this.component = component } return __extends$8(NoComponentFactoryError, _super), NoComponentFactoryError }(BaseError), _NullComponentFactoryResolver = function () { function _NullComponentFactoryResolver() { } return _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { throw new NoComponentFactoryError(component) }, _NullComponentFactoryResolver }(), ComponentFactoryResolver = function () { function ComponentFactoryResolver() { } return ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { }, ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver, ComponentFactoryResolver }(), CodegenComponentFactoryResolver = function () { function CodegenComponentFactoryResolver(factories, _parent) { this._parent = _parent, this._factories = new Map; for (var i = 0; i < factories.length; i++) { var factory = factories[i]; this._factories.set(factory.componentType, factory) } } return CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { var result = this._factories.get(component); return result || (result = this._parent.resolveComponentFactory(component)), result }, CodegenComponentFactoryResolver }(), wtfEnabled = detectWTF(), wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope }, wtfLeave = wtfEnabled ? leave : function (s, r) { return r }, wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null }, wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null }, Testability = function () { function Testability(_ngZone) { this._ngZone = _ngZone, this._pendingCount = 0, this._isZoneStable = !0, this._didWork = !1, this._callbacks = [], this._watchAngularEvents() } return Testability.prototype._watchAngularEvents = function () { var _this = this; this._ngZone.onUnstable.subscribe({ next: function () { _this._didWork = !0, _this._isZoneStable = !1 } }), this._ngZone.runOutsideAngular(function () { _this._ngZone.onStable.subscribe({ next: function () { NgZone.assertNotInAngularZone(), scheduleMicroTask(function () { _this._isZoneStable = !0, _this._runCallbacksIfReady() }) } }) }) }, Testability.prototype.increasePendingRequestCount = function () { return this._pendingCount += 1, this._didWork = !0, this._pendingCount }, Testability.prototype.decreasePendingRequestCount = function () { if (this._pendingCount -= 1, this._pendingCount < 0) throw new Error("pending async requests below zero"); return this._runCallbacksIfReady(), this._pendingCount }, Testability.prototype.isStable = function () { return this._isZoneStable && 0 == this._pendingCount && !this._ngZone.hasPendingMacrotasks }, Testability.prototype._runCallbacksIfReady = function () { var _this = this; this.isStable() ? scheduleMicroTask(function () { for (; 0 !== _this._callbacks.length;) _this._callbacks.pop()(_this._didWork); _this._didWork = !1 }) : this._didWork = !0 }, Testability.prototype.whenStable = function (callback) { this._callbacks.push(callback), this._runCallbacksIfReady() }, Testability.prototype.getPendingRequestCount = function () { return this._pendingCount }, Testability.prototype.findBindings = function (using, provider, exactMatch) { return [] }, Testability.prototype.findProviders = function (using, provider, exactMatch) { return [] }, Testability.decorators = [{ type: Injectable }], Testability.ctorParameters = function () { return [{ type: NgZone }] }, Testability }(), TestabilityRegistry = function () { function TestabilityRegistry() { this._applications = new Map, _testabilityGetter.addToWindow(this) } return TestabilityRegistry.prototype.registerApplication = function (token, testability) { this._applications.set(token, testability) }, TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) }, TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()) }, TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()) }, TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) { return void 0 === findInAncestors && (findInAncestors = !0), _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors) }, TestabilityRegistry.decorators = [{ type: Injectable }], TestabilityRegistry.ctorParameters = function () { return [] }, TestabilityRegistry }(), _NoopGetTestability = function () { function _NoopGetTestability() { } return _NoopGetTestability.prototype.addToWindow = function (registry) { }, _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) { return null }, _NoopGetTestability }(), _testabilityGetter = new _NoopGetTestability, __extends$3 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _devMode = !0, _runModeLocked = !1, NgProbeToken = function () { function NgProbeToken(name, token) { this.name = name, this.token = token } return NgProbeToken }(), PlatformRef = function () { function PlatformRef() { } return PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { throw unimplemented() }, PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { throw void 0 === compilerOptions && (compilerOptions = []), unimplemented() }, PlatformRef.prototype.onDestroy = function (callback) { }, Object.defineProperty(PlatformRef.prototype, "injector", { get: function () { throw unimplemented() }, enumerable: !0, configurable: !0 }), PlatformRef.prototype.destroy = function () { }, Object.defineProperty(PlatformRef.prototype, "destroyed", { get: function () { throw unimplemented() }, enumerable: !0, configurable: !0 }), PlatformRef }(), PlatformRef_ = function (_super) { function PlatformRef_(_injector) { _super.call(this), this._injector = _injector, this._modules = [], this._destroyListeners = [], this._destroyed = !1 } return __extends$3(PlatformRef_, _super), PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback) }, Object.defineProperty(PlatformRef_.prototype, "injector", { get: function () { return this._injector }, enumerable: !0, configurable: !0 }), Object.defineProperty(PlatformRef_.prototype, "destroyed", { get: function () { return this._destroyed }, enumerable: !0, configurable: !0 }), PlatformRef_.prototype.destroy = function () { if (this._destroyed) throw new Error("The platform has already been destroyed!"); this._modules.slice().forEach(function (module) { return module.destroy() }), this._destroyListeners.forEach(function (listener) { return listener() }), this._destroyed = !0 }, PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) { return this._bootstrapModuleFactoryWithZone(moduleFactory, null) }, PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) { var _this = this; return ngZone || (ngZone = new NgZone({ enableLongStackTrace: isDevMode() })), ngZone.run(function () { var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector), moduleRef = moduleFactory.create(ngZoneInjector), exceptionHandler = moduleRef.injector.get(ErrorHandler, null); if (!exceptionHandler) throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?"); return moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef) }), ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error) } }), _callAndReportToErrorHandler(exceptionHandler, function () { var initStatus = moduleRef.injector.get(ApplicationInitStatus); return initStatus.donePromise.then(function () { return _this._moduleDoBootstrap(moduleRef), moduleRef }) }) }) }, PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) { return void 0 === compilerOptions && (compilerOptions = []), this._bootstrapModuleWithZone(moduleType, compilerOptions, null) }, PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) { var _this = this; void 0 === compilerOptions && (compilerOptions = []); var compilerFactory = this.injector.get(CompilerFactory), compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]); return componentFactoryCallback ? compiler.compileModuleAndAllComponentsAsync(moduleType).then(function (_a) { var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories; return componentFactoryCallback(componentFactories), _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone) }) : compiler.compileModuleAsync(moduleType).then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone) }) }, PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) { var appRef = moduleRef.injector.get(ApplicationRef); if (moduleRef.bootstrapFactories.length > 0) moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory) }); else { if (!moduleRef.instance.ngDoBootstrap) throw new Error("The module " + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.'); moduleRef.instance.ngDoBootstrap(appRef) } }, PlatformRef_.decorators = [{ type: Injectable }], PlatformRef_.ctorParameters = function () { return [{ type: Injector }] }, PlatformRef_ }(PlatformRef), ApplicationRef = function () { function ApplicationRef() { } return ApplicationRef.prototype.bootstrap = function (componentFactory) { }, ApplicationRef.prototype.tick = function () { }, Object.defineProperty(ApplicationRef.prototype, "componentTypes", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationRef.prototype, "components", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ApplicationRef.prototype.attachView = function (view) { unimplemented() }, ApplicationRef.prototype.detachView = function (view) { unimplemented() }, Object.defineProperty(ApplicationRef.prototype, "viewCount", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ApplicationRef }(), ApplicationRef_ = function (_super) {
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) { var _this = this; _super.call(this), this._zone = _zone, this._console = _console, this._injector = _injector, this._exceptionHandler = _exceptionHandler, this._componentFactoryResolver = _componentFactoryResolver, this._initStatus = _initStatus, this._testabilityRegistry = _testabilityRegistry, this._testability = _testability, this._bootstrapListeners = [], this._rootComponents = [], this._rootComponentTypes = [], this._views = [], this._runningTick = !1, this._enforceNoNewChanges = !1, this._enforceNoNewChanges = isDevMode(), this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick() }) } }) } return __extends$3(ApplicationRef_, _super), ApplicationRef_.prototype.attachView = function (viewRef) { var view = viewRef.internalView; this._views.push(view), view.attachToAppRef(this) }, ApplicationRef_.prototype.detachView = function (viewRef) { var view = viewRef.internalView; ListWrapper.remove(this._views, view), view.detach() }, ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
            var _this = this; if (!this._initStatus.done) throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module."); var componentFactory; componentFactory = componentOrFactory instanceof ComponentFactory ? componentOrFactory : this._componentFactoryResolver.resolveComponentFactory(componentOrFactory),
            this._rootComponentTypes.push(componentFactory.componentType); var compRef = componentFactory.create(this._injector, [], componentFactory.selector); compRef.onDestroy(function () { _this._unloadComponent(compRef) }); var testability = compRef.injector.get(Testability, null); return testability && compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability), this._loadComponent(compRef), isDevMode() && this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode."), compRef
        }, ApplicationRef_.prototype._loadComponent = function (componentRef) { this.attachView(componentRef.hostView), this.tick(), this._rootComponents.push(componentRef); var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners); listeners.forEach(function (listener) { return listener(componentRef) }) }, ApplicationRef_.prototype._unloadComponent = function (componentRef) { this.detachView(componentRef.hostView), ListWrapper.remove(this._rootComponents, componentRef) }, ApplicationRef_.prototype.tick = function () { if (this._runningTick) throw new Error("ApplicationRef.tick is called recursively"); var scope = ApplicationRef_._tickScope(); try { this._runningTick = !0, this._views.forEach(function (view) { return view.ref.detectChanges() }), this._enforceNoNewChanges && this._views.forEach(function (view) { return view.ref.checkNoChanges() }) } finally { this._runningTick = !1, wtfLeave(scope) } }, ApplicationRef_.prototype.ngOnDestroy = function () { this._views.slice().forEach(function (view) { return view.destroy() }) }, Object.defineProperty(ApplicationRef_.prototype, "viewCount", { get: function () { return this._views.length }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationRef_.prototype, "componentTypes", { get: function () { return this._rootComponentTypes }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationRef_.prototype, "components", { get: function () { return this._rootComponents }, enumerable: !0, configurable: !0 }), ApplicationRef_._tickScope = wtfCreateScope("ApplicationRef#tick()"), ApplicationRef_.decorators = [{ type: Injectable }], ApplicationRef_.ctorParameters = function () { return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }, { type: TestabilityRegistry, decorators: [{ type: Optional }] }, { type: Testability, decorators: [{ type: Optional }] }] }, ApplicationRef_
    }(ApplicationRef), __extends$9 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, NgModuleRef = function () { function NgModuleRef() { } return Object.defineProperty(NgModuleRef.prototype, "injector", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModuleRef.prototype, "instance", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), NgModuleRef.prototype.destroy = function () { }, NgModuleRef.prototype.onDestroy = function (callback) { }, NgModuleRef }(), NgModuleFactory = function () { function NgModuleFactory(_injectorClass, _moduleType) { this._injectorClass = _injectorClass, this._moduleType = _moduleType } return Object.defineProperty(NgModuleFactory.prototype, "moduleType", { get: function () { return this._moduleType }, enumerable: !0, configurable: !0 }), NgModuleFactory.prototype.create = function (parentInjector) { parentInjector || (parentInjector = Injector.NULL); var instance = new this._injectorClass(parentInjector); return instance.create(), instance }, NgModuleFactory }(), _UNDEFINED = new Object, NgModuleInjector = function (_super) { function NgModuleInjector(parent, factories, bootstrapFactories) { _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL)), this.parent = parent, this.bootstrapFactories = bootstrapFactories, this._destroyListeners = [], this._destroyed = !1 } return __extends$9(NgModuleInjector, _super), NgModuleInjector.prototype.create = function () { this.instance = this.createInternal() }, NgModuleInjector.prototype.createInternal = function () { }, NgModuleInjector.prototype.get = function (token, notFoundValue) { if (void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), token === Injector || token === ComponentFactoryResolver) return this; var result = this.getInternal(token, _UNDEFINED); return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result }, NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { }, Object.defineProperty(NgModuleInjector.prototype, "injector", { get: function () { return this }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", { get: function () { return this }, enumerable: !0, configurable: !0 }), NgModuleInjector.prototype.destroy = function () { if (this._destroyed) throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed."); this._destroyed = !0, this.destroyInternal(), this._destroyListeners.forEach(function (listener) { return listener() }) }, NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback) }, NgModuleInjector.prototype.destroyInternal = function () { }, NgModuleInjector }(CodegenComponentFactoryResolver), NgModuleFactoryLoader = function () { function NgModuleFactoryLoader() { } return NgModuleFactoryLoader.prototype.load = function (path) { }, NgModuleFactoryLoader }(), moduleFactories = new Map, QueryList = function () { function QueryList() { this._dirty = !0, this._results = [], this._emitter = new EventEmitter } return Object.defineProperty(QueryList.prototype, "changes", { get: function () { return this._emitter }, enumerable: !0, configurable: !0 }), Object.defineProperty(QueryList.prototype, "length", { get: function () { return this._results.length }, enumerable: !0, configurable: !0 }), Object.defineProperty(QueryList.prototype, "first", { get: function () { return this._results[0] }, enumerable: !0, configurable: !0 }), Object.defineProperty(QueryList.prototype, "last", { get: function () { return this._results[this.length - 1] }, enumerable: !0, configurable: !0 }), QueryList.prototype.map = function (fn) { return this._results.map(fn) }, QueryList.prototype.filter = function (fn) { return this._results.filter(fn) }, QueryList.prototype.find = function (fn) { return this._results.find(fn) }, QueryList.prototype.reduce = function (fn, init) { return this._results.reduce(fn, init) }, QueryList.prototype.forEach = function (fn) { this._results.forEach(fn) }, QueryList.prototype.some = function (fn) { return this._results.some(fn) }, QueryList.prototype.toArray = function () { return this._results.slice() }, QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()]() }, QueryList.prototype.toString = function () { return this._results.toString() }, QueryList.prototype.reset = function (res) { this._results = ListWrapper.flatten(res), this._dirty = !1 }, QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this) }, QueryList.prototype.setDirty = function () { this._dirty = !0 }, Object.defineProperty(QueryList.prototype, "dirty", { get: function () { return this._dirty }, enumerable: !0, configurable: !0 }), QueryList }(), _SEPARATOR = "#", FACTORY_CLASS_SUFFIX = "NgFactory", SystemJsNgModuleLoaderConfig = function () { function SystemJsNgModuleLoaderConfig() { } return SystemJsNgModuleLoaderConfig }(), DEFAULT_CONFIG = { factoryPathPrefix: "", factoryPathSuffix: ".ngfactory" }, SystemJsNgModuleLoader = function () { function SystemJsNgModuleLoader(_compiler, config) { this._compiler = _compiler, this._config = config || DEFAULT_CONFIG } return SystemJsNgModuleLoader.prototype.load = function (path) { var offlineMode = this._compiler instanceof Compiler; return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path) }, SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) { var _this = this, _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1]; return void 0 === exportName && (exportName = "default"), System.import(module).then(function (module) { return module[exportName] }).then(function (type) { return checkNotEmpty(type, module, exportName) }).then(function (type) { return _this._compiler.compileModuleAsync(type) }) }, SystemJsNgModuleLoader.prototype.loadFactory = function (path) { var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1], factoryClassSuffix = FACTORY_CLASS_SUFFIX; return void 0 === exportName && (exportName = "default", factoryClassSuffix = ""), System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) { return module[exportName + factoryClassSuffix] }).then(function (factory) { return checkNotEmpty(factory, module, exportName) }) }, SystemJsNgModuleLoader.decorators = [{ type: Injectable }], SystemJsNgModuleLoader.ctorParameters = function () { return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }] }, SystemJsNgModuleLoader }(), __extends$10 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, TemplateRef = function () { function TemplateRef() { } return Object.defineProperty(TemplateRef.prototype, "elementRef", { get: function () { return null }, enumerable: !0, configurable: !0 }), TemplateRef.prototype.createEmbeddedView = function (context) { }, TemplateRef }(), TemplateRef_ = function (_super) { function TemplateRef_(_parentView, _nodeIndex, _nativeElement) { _super.call(this), this._parentView = _parentView, this._nodeIndex = _nodeIndex, this._nativeElement = _nativeElement } return __extends$10(TemplateRef_, _super), TemplateRef_.prototype.createEmbeddedView = function (context) { var view = this._parentView.createEmbeddedViewInternal(this._nodeIndex); return view.create(context || {}), view.ref }, Object.defineProperty(TemplateRef_.prototype, "elementRef", { get: function () { return new ElementRef(this._nativeElement) }, enumerable: !0, configurable: !0 }), TemplateRef_ }(TemplateRef), ViewContainerRef = function () { function ViewContainerRef() { } return Object.defineProperty(ViewContainerRef.prototype, "element", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef.prototype, "injector", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef.prototype, "parentInjector", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ViewContainerRef.prototype.clear = function () { }, ViewContainerRef.prototype.get = function (index) { }, Object.defineProperty(ViewContainerRef.prototype, "length", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { }, ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { }, ViewContainerRef.prototype.insert = function (viewRef, index) { }, ViewContainerRef.prototype.move = function (viewRef, currentIndex) { }, ViewContainerRef.prototype.indexOf = function (viewRef) { }, ViewContainerRef.prototype.remove = function (index) { }, ViewContainerRef.prototype.detach = function (index) { }, ViewContainerRef }(), ViewContainerRef_ = function () { function ViewContainerRef_(_element) { this._element = _element, this._createComponentInContainerScope = wtfCreateScope("ViewContainerRef#createComponent()"), this._insertScope = wtfCreateScope("ViewContainerRef#insert()"), this._removeScope = wtfCreateScope("ViewContainerRef#remove()"), this._detachScope = wtfCreateScope("ViewContainerRef#detach()") } return ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref }, Object.defineProperty(ViewContainerRef_.prototype, "length", { get: function () { var views = this._element.nestedViews; return isPresent(views) ? views.length : 0 }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef_.prototype, "element", { get: function () { return this._element.elementRef }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef_.prototype, "injector", { get: function () { return this._element.injector }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", { get: function () { return this._element.parentInjector }, enumerable: !0, configurable: !0 }), ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) { void 0 === context && (context = null), void 0 === index && (index = -1); var viewRef = templateRef.createEmbeddedView(context); return this.insert(viewRef, index), viewRef }, ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { void 0 === index && (index = -1), void 0 === injector && (injector = null), void 0 === projectableNodes && (projectableNodes = null); var s = this._createComponentInContainerScope(), contextInjector = injector || this._element.parentInjector, componentRef = componentFactory.create(contextInjector, projectableNodes); return this.insert(componentRef.hostView, index), wtfLeave(s, componentRef) }, ViewContainerRef_.prototype.insert = function (viewRef, index) { void 0 === index && (index = -1); var s = this._insertScope(); index == -1 && (index = this.length); var viewRef_ = viewRef; return this._element.attachView(viewRef_.internalView, index), wtfLeave(s, viewRef_) }, ViewContainerRef_.prototype.move = function (viewRef, currentIndex) { var s = this._insertScope(); if (currentIndex != -1) { var viewRef_ = viewRef; return this._element.moveView(viewRef_.internalView, currentIndex), wtfLeave(s, viewRef_) } }, ViewContainerRef_.prototype.indexOf = function (viewRef) { return this._element.nestedViews.indexOf(viewRef.internalView) }, ViewContainerRef_.prototype.remove = function (index) { void 0 === index && (index = -1); var s = this._removeScope(); index == -1 && (index = this.length - 1); var view = this._element.detachView(index); view.destroy(), wtfLeave(s) }, ViewContainerRef_.prototype.detach = function (index) { void 0 === index && (index = -1); var s = this._detachScope(); index == -1 && (index = this.length - 1); var view = this._element.detachView(index); return wtfLeave(s, view.ref) }, ViewContainerRef_.prototype.clear = function () { for (var i = this.length - 1; i >= 0; i--) this.remove(i) }, ViewContainerRef_ }(), __extends$11 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ViewRef = function (_super) { function ViewRef() { _super.apply(this, arguments) } return __extends$11(ViewRef, _super), ViewRef.prototype.destroy = function () { }, Object.defineProperty(ViewRef.prototype, "destroyed", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), ViewRef.prototype.onDestroy = function (callback) { }, ViewRef }(ChangeDetectorRef), EmbeddedViewRef = function (_super) { function EmbeddedViewRef() { _super.apply(this, arguments) } return __extends$11(EmbeddedViewRef, _super), Object.defineProperty(EmbeddedViewRef.prototype, "context", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), EmbeddedViewRef }(ViewRef), ViewRef_ = function () { function ViewRef_(_view, animationQueue) { this._view = _view, this.animationQueue = animationQueue, this._view = _view, this._originalMode = this._view.cdMode } return Object.defineProperty(ViewRef_.prototype, "internalView", { get: function () { return this._view }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewRef_.prototype, "rootNodes", { get: function () { return this._view.flatRootNodes }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewRef_.prototype, "context", { get: function () { return this._view.context }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewRef_.prototype, "destroyed", { get: function () { return this._view.destroyed }, enumerable: !0, configurable: !0 }), ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce() }, ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached }, ViewRef_.prototype.detectChanges = function () { this._view.detectChanges(!1), this.animationQueue.flush() }, ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(!0) }, ViewRef_.prototype.reattach = function () { this._view.cdMode = this._originalMode, this.markForCheck() }, ViewRef_.prototype.onDestroy = function (callback) { this._view.disposables || (this._view.disposables = []), this._view.disposables.push(callback) }, ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy() }, ViewRef_ }(), __extends$12 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, EventListener = function () { function EventListener(name, callback) { this.name = name, this.callback = callback } return EventListener }(), DebugNode = function () { function DebugNode(nativeNode, parent, _debugInfo) { this._debugInfo = _debugInfo, this.nativeNode = nativeNode, parent && parent instanceof DebugElement ? parent.addChild(this) : this.parent = null, this.listeners = [] } return Object.defineProperty(DebugNode.prototype, "injector", { get: function () { return this._debugInfo ? this._debugInfo.injector : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "componentInstance", { get: function () { return this._debugInfo ? this._debugInfo.component : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "context", { get: function () { return this._debugInfo ? this._debugInfo.context : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "references", { get: function () { return this._debugInfo ? this._debugInfo.references : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "providerTokens", { get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "source", { get: function () { return this._debugInfo ? this._debugInfo.source : null }, enumerable: !0, configurable: !0 }), DebugNode }(), DebugElement = function (_super) { function DebugElement(nativeNode, parent, _debugInfo) { _super.call(this, nativeNode, parent, _debugInfo), this.properties = {}, this.attributes = {}, this.classes = {}, this.styles = {}, this.childNodes = [], this.nativeElement = nativeNode } return __extends$12(DebugElement, _super), DebugElement.prototype.addChild = function (child) { child && (this.childNodes.push(child), child.parent = this) }, DebugElement.prototype.removeChild = function (child) { var childIndex = this.childNodes.indexOf(child); childIndex !== -1 && (child.parent = null, this.childNodes.splice(childIndex, 1)) }, DebugElement.prototype.insertChildrenAfter = function (child, newChildren) { var siblingIndex = this.childNodes.indexOf(child); if (siblingIndex !== -1) { var previousChildren = this.childNodes.slice(0, siblingIndex + 1), nextChildren = this.childNodes.slice(siblingIndex + 1); this.childNodes = previousChildren.concat(newChildren, nextChildren); for (var i = 0; i < newChildren.length; ++i) { var newChild = newChildren[i]; newChild.parent && newChild.parent.removeChild(newChild), newChild.parent = this } } }, DebugElement.prototype.query = function (predicate) { var results = this.queryAll(predicate); return results[0] || null }, DebugElement.prototype.queryAll = function (predicate) { var matches = []; return _queryElementChildren(this, predicate, matches), matches }, DebugElement.prototype.queryAllNodes = function (predicate) { var matches = []; return _queryNodeChildren(this, predicate, matches), matches }, Object.defineProperty(DebugElement.prototype, "children", { get: function () { return this.childNodes.filter(function (node) { return node instanceof DebugElement }) }, enumerable: !0, configurable: !0 }), DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) { this.listeners.forEach(function (listener) { listener.name == eventName && listener.callback(eventObj) }) }, DebugElement }(DebugNode), _nativeNodeToDebugNode = new Map, _CORE_PLATFORM_PROVIDERS = [PlatformRef_, { provide: PlatformRef, useExisting: PlatformRef_ }, { provide: Reflector, useFactory: _reflector, deps: [] }, { provide: ReflectorReader, useExisting: Reflector }, TestabilityRegistry, Console], platformCore = createPlatformFactory(null, "core", _CORE_PLATFORM_PROVIDERS), LOCALE_ID = new OpaqueToken("LocaleId"), TRANSLATIONS = new OpaqueToken("Translations"), TRANSLATIONS_FORMAT = new OpaqueToken("TranslationsFormat"), ApplicationModule = function () { function ApplicationModule() { } return ApplicationModule.decorators = [{ type: NgModule, args: [{ providers: [ApplicationRef_, { provide: ApplicationRef, useExisting: ApplicationRef_ }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, AnimationQueue, { provide: IterableDiffers, useFactory: _iterableDiffersFactory }, { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory }, { provide: LOCALE_ID, useValue: "en-US" }] }] }], ApplicationModule.ctorParameters = function () { return [] }, ApplicationModule }(), FILL_STYLE_FLAG = "true", ANY_STATE = "*", DEFAULT_STATE = "*", EMPTY_STATE = "void", AnimationGroupPlayer = function () { function AnimationGroupPlayer(_players) { var _this = this; this._players = _players, this._onDoneFns = [], this._onStartFns = [], this._finished = !1, this._started = !1, this._destroyed = !1, this.parentPlayer = null; var count = 0, total = this._players.length; 0 == total ? scheduleMicroTask(function () { return _this._onFinish() }) : this._players.forEach(function (player) { player.parentPlayer = _this, player.onDone(function () { ++count >= total && _this._onFinish() }) }) } return AnimationGroupPlayer.prototype._onFinish = function () { this._finished || (this._finished = !0, this._onDoneFns.forEach(function (fn) { return fn() }), this._onDoneFns = []) }, AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init() }) }, AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn) }, AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn) }, AnimationGroupPlayer.prototype.hasStarted = function () { return this._started }, AnimationGroupPlayer.prototype.play = function () { isPresent(this.parentPlayer) || this.init(), this.hasStarted() || (this._onStartFns.forEach(function (fn) { return fn() }), this._onStartFns = [], this._started = !0), this._players.forEach(function (player) { return player.play() }) }, AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause() }) }, AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart() }) }, AnimationGroupPlayer.prototype.finish = function () { this._onFinish(), this._players.forEach(function (player) { return player.finish() }) }, AnimationGroupPlayer.prototype.destroy = function () { this._destroyed || (this._onFinish(), this._players.forEach(function (player) { return player.destroy() }), this._destroyed = !0) }, AnimationGroupPlayer.prototype.reset = function () { this._players.forEach(function (player) { return player.reset() }), this._destroyed = !1, this._finished = !1, this._started = !1 }, AnimationGroupPlayer.prototype.setPosition = function (p) { this._players.forEach(function (player) { player.setPosition(p) }) }, AnimationGroupPlayer.prototype.getPosition = function () { var min = 0; return this._players.forEach(function (player) { var p = player.getPosition(); min = Math.min(p, min) }), min }, Object.defineProperty(AnimationGroupPlayer.prototype, "players", { get: function () { return this._players }, enumerable: !0, configurable: !0 }), AnimationGroupPlayer }(), AnimationKeyframe = function () { function AnimationKeyframe(offset, styles) { this.offset = offset, this.styles = styles } return AnimationKeyframe }(), AnimationPlayer = function () { function AnimationPlayer() { } return AnimationPlayer.prototype.onDone = function (fn) { }, AnimationPlayer.prototype.onStart = function (fn) { }, AnimationPlayer.prototype.init = function () { }, AnimationPlayer.prototype.hasStarted = function () { }, AnimationPlayer.prototype.play = function () { }, AnimationPlayer.prototype.pause = function () { }, AnimationPlayer.prototype.restart = function () { }, AnimationPlayer.prototype.finish = function () { }, AnimationPlayer.prototype.destroy = function () { }, AnimationPlayer.prototype.reset = function () { }, AnimationPlayer.prototype.setPosition = function (p) { }, AnimationPlayer.prototype.getPosition = function () { }, Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", { get: function () { throw new Error("NOT IMPLEMENTED: Base Class") }, set: function (player) { throw new Error("NOT IMPLEMENTED: Base Class") }, enumerable: !0, configurable: !0 }), AnimationPlayer }(), NoOpAnimationPlayer = function () { function NoOpAnimationPlayer() { var _this = this; this._onDoneFns = [], this._onStartFns = [], this._started = !1, this.parentPlayer = null, scheduleMicroTask(function () { return _this._onFinish() }) } return NoOpAnimationPlayer.prototype._onFinish = function () { this._onDoneFns.forEach(function (fn) { return fn() }), this._onDoneFns = [] }, NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn) }, NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn) }, NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started }, NoOpAnimationPlayer.prototype.init = function () { }, NoOpAnimationPlayer.prototype.play = function () { this.hasStarted() || (this._onStartFns.forEach(function (fn) { return fn() }), this._onStartFns = []), this._started = !0 }, NoOpAnimationPlayer.prototype.pause = function () { }, NoOpAnimationPlayer.prototype.restart = function () { }, NoOpAnimationPlayer.prototype.finish = function () { this._onFinish() }, NoOpAnimationPlayer.prototype.destroy = function () { }, NoOpAnimationPlayer.prototype.reset = function () { }, NoOpAnimationPlayer.prototype.setPosition = function (p) { }, NoOpAnimationPlayer.prototype.getPosition = function () { return 0 }, NoOpAnimationPlayer }(), AnimationSequencePlayer = function () { function AnimationSequencePlayer(_players) { var _this = this; this._players = _players, this._currentIndex = 0, this._onDoneFns = [], this._onStartFns = [], this._finished = !1, this._started = !1, this._destroyed = !1, this.parentPlayer = null, this._players.forEach(function (player) { player.parentPlayer = _this }), this._onNext(!1) } return AnimationSequencePlayer.prototype._onNext = function (start) { var _this = this; if (!this._finished) if (0 == this._players.length) this._activePlayer = new NoOpAnimationPlayer, scheduleMicroTask(function () { return _this._onFinish() }); else if (this._currentIndex >= this._players.length) this._activePlayer = new NoOpAnimationPlayer, this._onFinish(); else { var player = this._players[this._currentIndex++]; player.onDone(function () { return _this._onNext(!0) }), this._activePlayer = player, start && player.play() } }, AnimationSequencePlayer.prototype._onFinish = function () { this._finished || (this._finished = !0, this._onDoneFns.forEach(function (fn) { return fn() }), this._onDoneFns = []) }, AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init() }) }, AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn) }, AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn) }, AnimationSequencePlayer.prototype.hasStarted = function () { return this._started }, AnimationSequencePlayer.prototype.play = function () { isPresent(this.parentPlayer) || this.init(), this.hasStarted() || (this._onStartFns.forEach(function (fn) { return fn() }), this._onStartFns = [], this._started = !0), this._activePlayer.play() }, AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause() }, AnimationSequencePlayer.prototype.restart = function () { this.reset(), this._players.length > 0 && this._players[0].restart() }, AnimationSequencePlayer.prototype.reset = function () { this._players.forEach(function (player) { return player.reset() }), this._destroyed = !1, this._finished = !1, this._started = !1 }, AnimationSequencePlayer.prototype.finish = function () { this._onFinish(), this._players.forEach(function (player) { return player.finish() }) }, AnimationSequencePlayer.prototype.destroy = function () { this._destroyed || (this._onFinish(), this._players.forEach(function (player) { return player.destroy() }), this._destroyed = !0, this._activePlayer = new NoOpAnimationPlayer) }, AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p) }, AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition() }, Object.defineProperty(AnimationSequencePlayer.prototype, "players", { get: function () { return this._players }, enumerable: !0, configurable: !0 }), AnimationSequencePlayer }(), __extends$13 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, AUTO_STYLE = "*", AnimationEntryMetadata = function () { function AnimationEntryMetadata(name, definitions) { this.name = name, this.definitions = definitions } return AnimationEntryMetadata }(), AnimationStateMetadata = function () { function AnimationStateMetadata() { } return AnimationStateMetadata }(), AnimationStateDeclarationMetadata = function (_super) { function AnimationStateDeclarationMetadata(stateNameExpr, styles) { _super.call(this), this.stateNameExpr = stateNameExpr, this.styles = styles } return __extends$13(AnimationStateDeclarationMetadata, _super), AnimationStateDeclarationMetadata }(AnimationStateMetadata), AnimationStateTransitionMetadata = function (_super) { function AnimationStateTransitionMetadata(stateChangeExpr, steps) { _super.call(this), this.stateChangeExpr = stateChangeExpr, this.steps = steps } return __extends$13(AnimationStateTransitionMetadata, _super), AnimationStateTransitionMetadata }(AnimationStateMetadata), AnimationMetadata = function () { function AnimationMetadata() { } return AnimationMetadata }(), AnimationKeyframesSequenceMetadata = function (_super) { function AnimationKeyframesSequenceMetadata(steps) { _super.call(this), this.steps = steps } return __extends$13(AnimationKeyframesSequenceMetadata, _super), AnimationKeyframesSequenceMetadata }(AnimationMetadata), AnimationStyleMetadata = function (_super) { function AnimationStyleMetadata(styles, offset) { void 0 === offset && (offset = null), _super.call(this), this.styles = styles, this.offset = offset } return __extends$13(AnimationStyleMetadata, _super), AnimationStyleMetadata }(AnimationMetadata), AnimationAnimateMetadata = function (_super) { function AnimationAnimateMetadata(timings, styles) { _super.call(this), this.timings = timings, this.styles = styles } return __extends$13(AnimationAnimateMetadata, _super), AnimationAnimateMetadata }(AnimationMetadata), AnimationWithStepsMetadata = function (_super) { function AnimationWithStepsMetadata() { _super.call(this) } return __extends$13(AnimationWithStepsMetadata, _super), Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", { get: function () { throw new Error("NOT IMPLEMENTED: Base Class") }, enumerable: !0, configurable: !0 }), AnimationWithStepsMetadata }(AnimationMetadata), AnimationSequenceMetadata = function (_super) { function AnimationSequenceMetadata(_steps) { _super.call(this), this._steps = _steps } return __extends$13(AnimationSequenceMetadata, _super), Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", { get: function () { return this._steps }, enumerable: !0, configurable: !0 }), AnimationSequenceMetadata }(AnimationWithStepsMetadata), AnimationGroupMetadata = function (_super) { function AnimationGroupMetadata(_steps) { _super.call(this), this._steps = _steps } return __extends$13(AnimationGroupMetadata, _super), Object.defineProperty(AnimationGroupMetadata.prototype, "steps", { get: function () { return this._steps }, enumerable: !0, configurable: !0 }), AnimationGroupMetadata }(AnimationWithStepsMetadata), AnimationStyles = function () { function AnimationStyles(styles) { this.styles = styles } return AnimationStyles }(), AnimationTransitionEvent = function () { function AnimationTransitionEvent(_a) { var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName; this.fromState = fromState, this.toState = toState, this.totalTime = totalTime, this.phaseName = phaseName } return AnimationTransitionEvent }(), AnimationTransition = function () { function AnimationTransition(_player, _fromState, _toState, _totalTime) { this._player = _player, this._fromState = _fromState, this._toState = _toState, this._totalTime = _totalTime } return AnimationTransition.prototype._createEvent = function (phaseName) { return new AnimationTransitionEvent({ fromState: this._fromState, toState: this._toState, totalTime: this._totalTime, phaseName: phaseName }) }, AnimationTransition.prototype.onStart = function (callback) { var _this = this, fn = Zone.current.wrap(function () { return callback(_this._createEvent("start")) }, "player.onStart"); this._player.onStart(fn) }, AnimationTransition.prototype.onDone = function (callback) { var _this = this, fn = Zone.current.wrap(function () { return callback(_this._createEvent("done")) }, "player.onDone"); this._player.onDone(fn) }, AnimationTransition }(), DebugDomRootRenderer = function () {
        function DebugDomRootRenderer(_delegate) {
            this._delegate = _delegate
        } return DebugDomRootRenderer.prototype.renderComponent = function (componentProto) { return new DebugDomRenderer(this._delegate.renderComponent(componentProto)) }, DebugDomRootRenderer
    }(), DebugDomRenderer = function () { function DebugDomRenderer(_delegate) { this._delegate = _delegate } return DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo), debugEl = new DebugElement(nativeEl, null, debugInfo); return indexDebugNode(debugEl), nativeEl }, DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) { var nativeEl = this._delegate.createElement(parentElement, name, debugInfo), debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo); return debugEl.name = name, indexDebugNode(debugEl), nativeEl }, DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement) }, DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo), debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo); return indexDebugNode(debugEl), comment }, DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) { var text = this._delegate.createText(parentElement, value, debugInfo), debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo); return indexDebugNode(debugEl), text }, DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) { var debugParent = getDebugNode(parentElement); if (isPresent(debugParent) && debugParent instanceof DebugElement) { var debugElement_1 = debugParent; nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)) }) } this._delegate.projectNodes(parentElement, nodes) }, DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { var debugNode = getDebugNode(node); if (isPresent(debugNode)) { var debugParent = debugNode.parent; if (viewRootNodes.length > 0 && isPresent(debugParent)) { var debugViewRootNodes_1 = []; viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)) }), debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1) } } this._delegate.attachViewAfter(node, viewRootNodes) }, DebugDomRenderer.prototype.detachView = function (viewRootNodes) { viewRootNodes.forEach(function (node) { var debugNode = getDebugNode(node); isPresent(debugNode) && isPresent(debugNode.parent) && debugNode.parent.removeChild(debugNode) }), this._delegate.detachView(viewRootNodes) }, DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) { viewAllNodes = viewAllNodes || [], viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)) }), this._delegate.destroyView(hostElement, viewAllNodes) }, DebugDomRenderer.prototype.listen = function (renderElement, name, callback) { var debugEl = getDebugNode(renderElement); return isPresent(debugEl) && debugEl.listeners.push(new EventListener(name, callback)), this._delegate.listen(renderElement, name, callback) }, DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) { return this._delegate.listenGlobal(target, name, callback) }, DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { var debugEl = getDebugNode(renderElement); isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.properties[propertyName] = propertyValue), this._delegate.setElementProperty(renderElement, propertyName, propertyValue) }, DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { var debugEl = getDebugNode(renderElement); isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.attributes[attributeName] = attributeValue), this._delegate.setElementAttribute(renderElement, attributeName, attributeValue) }, DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue) }, DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) { var debugEl = getDebugNode(renderElement); isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.classes[className] = isAdd), this._delegate.setElementClass(renderElement, className, isAdd) }, DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { var debugEl = getDebugNode(renderElement); isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.styles[styleName] = styleValue), this._delegate.setElementStyle(renderElement, styleName, styleValue) }, DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { this._delegate.invokeElementMethod(renderElement, methodName, args) }, DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text) }, DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { return void 0 === previousPlayers && (previousPlayers = []), this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) }, DebugDomRenderer }(), ViewType = {}; ViewType.HOST = 0, ViewType.COMPONENT = 1, ViewType.EMBEDDED = 2, ViewType[ViewType.HOST] = "HOST", ViewType[ViewType.COMPONENT] = "COMPONENT", ViewType[ViewType.EMBEDDED] = "EMBEDDED"; var StaticNodeDebugInfo = function () { function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) { this.providerTokens = providerTokens, this.componentToken = componentToken, this.refTokens = refTokens } return StaticNodeDebugInfo }(), DebugContext = function () { function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) { this._view = _view, this._nodeIndex = _nodeIndex, this._tplRow = _tplRow, this._tplCol = _tplCol } return Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", { get: function () { return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "context", { get: function () { return this._view.context }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "component", { get: function () { var staticNodeInfo = this._staticNodeInfo; return isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken) ? this.injector.get(staticNodeInfo.componentToken) : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "componentRenderElement", { get: function () { for (var componentView = this._view; isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT;) componentView = componentView.parentView; return componentView.parentElement }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "injector", { get: function () { return this._view.injector(this._nodeIndex) }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "renderNode", { get: function () { return isPresent(this._nodeIndex) && this._view.allNodes ? this._view.allNodes[this._nodeIndex] : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "providerTokens", { get: function () { var staticNodeInfo = this._staticNodeInfo; return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "source", { get: function () { return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext.prototype, "references", { get: function () { var _this = this, varValues = {}, staticNodeInfo = this._staticNodeInfo; if (isPresent(staticNodeInfo)) { var refs_1 = staticNodeInfo.refTokens; Object.keys(refs_1).forEach(function (refName) { var varValue, refToken = refs_1[refName]; varValue = isBlank(refToken) ? _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null : _this._view.injectorGet(refToken, _this._nodeIndex, null), varValues[refName] = varValue }) } return varValues }, enumerable: !0, configurable: !0 }), DebugContext }(), ViewAnimationMap = function () { function ViewAnimationMap() { this._map = new Map, this._allPlayers = [] } return ViewAnimationMap.prototype.find = function (element, animationName) { var playersByAnimation = this._map.get(element); if (isPresent(playersByAnimation)) return playersByAnimation[animationName] }, ViewAnimationMap.prototype.findAllPlayersByElement = function (element) { var el = this._map.get(element); return el ? Object.keys(el).map(function (k) { return el[k] }) : [] }, ViewAnimationMap.prototype.set = function (element, animationName, player) { var playersByAnimation = this._map.get(element); isPresent(playersByAnimation) || (playersByAnimation = {}); var existingEntry = playersByAnimation[animationName]; isPresent(existingEntry) && this.remove(element, animationName), playersByAnimation[animationName] = player, this._allPlayers.push(player), this._map.set(element, playersByAnimation) }, ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers }, ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) { void 0 === targetPlayer && (targetPlayer = null); var playersByAnimation = this._map.get(element); if (playersByAnimation) { var player = playersByAnimation[animationName]; if (!targetPlayer || player === targetPlayer) { delete playersByAnimation[animationName]; var index = this._allPlayers.indexOf(player); this._allPlayers.splice(index, 1), 0 === Object.keys(playersByAnimation).length && this._map.delete(element) } } }, ViewAnimationMap }(), AnimationViewContext = function () { function AnimationViewContext(_animationQueue) { this._animationQueue = _animationQueue, this._players = new ViewAnimationMap } return AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) { var activeAnimationPlayers = this._players.getAllPlayers(); activeAnimationPlayers.length ? new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback() }) : callback() }, AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) { var _this = this; this._animationQueue.enqueue(player), this._players.set(element, animationName, player), player.onDone(function () { return _this._players.remove(element, animationName, player) }) }, AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) { void 0 === animationName && (animationName = null); var players = []; if (animationName) { var currentPlayer = this._players.find(element, animationName); currentPlayer && _recursePlayers(currentPlayer, players) } else this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players) }); return players }, AnimationViewContext }(), __extends$15 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ElementInjector = function (_super) { function ElementInjector(_view, _nodeIndex) { _super.call(this), this._view = _view, this._nodeIndex = _nodeIndex } return __extends$15(ElementInjector, _super), ElementInjector.prototype.get = function (token, notFoundValue) { return void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), this._view.injectorGet(token, this._nodeIndex, notFoundValue) }, ElementInjector }(Injector), __extends$14 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _scope_check = wtfCreateScope("AppView#check(ascii id)"), EMPTY_CONTEXT$1 = new Object, UNDEFINED$1 = new Object, AppView = function () { function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) { void 0 === declaredViewContainer && (declaredViewContainer = null), this.clazz = clazz, this.componentType = componentType, this.type = type, this.viewUtils = viewUtils, this.parentView = parentView, this.parentIndex = parentIndex, this.parentElement = parentElement, this.cdMode = cdMode, this.declaredViewContainer = declaredViewContainer, this.numberOfChecks = 0, this.ref = new ViewRef_(this, viewUtils.animationQueue), type === ViewType.COMPONENT || type === ViewType.HOST ? this.renderer = viewUtils.renderComponent(componentType) : this.renderer = parentView.renderer, this._directRenderer = this.renderer.directRenderer } return Object.defineProperty(AppView.prototype, "animationContext", { get: function () { return this._animationContext || (this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue)), this._animationContext }, enumerable: !0, configurable: !0 }), Object.defineProperty(AppView.prototype, "destroyed", { get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed }, enumerable: !0, configurable: !0 }), AppView.prototype.create = function (context) { return this.context = context, this.createInternal(null) }, AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) { return this.context = EMPTY_CONTEXT$1, this._hasExternalHostElement = isPresent(rootSelectorOrNode), this._hostInjector = hostInjector, this._hostProjectableNodes = projectableNodes, this.createInternal(rootSelectorOrNode) }, AppView.prototype.createInternal = function (rootSelectorOrNode) { return null }, AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null }, AppView.prototype.init = function (lastRootNode, allNodes, disposables) { this.lastRootNode = lastRootNode, this.allNodes = allNodes, this.disposables = disposables, this.type === ViewType.COMPONENT && this.dirtyParentQueriesInternal() }, AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) { void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND); for (var result = UNDEFINED$1, view = this; result === UNDEFINED$1;) isPresent(nodeIndex) && (result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1)), result === UNDEFINED$1 && view.type === ViewType.HOST && (result = view._hostInjector.get(token, notFoundValue)), nodeIndex = view.parentIndex, view = view.parentView; return result }, AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) { return notFoundResult }, AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex) }, AppView.prototype.detachAndDestroy = function () { this.viewContainer ? this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this)) : this.appRef ? this.appRef.detachView(this.ref) : this._hasExternalHostElement && this.detach(), this.destroy() }, AppView.prototype.destroy = function () { var _this = this; if (this.cdMode !== ChangeDetectorStatus.Destroyed) { var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null; if (this.disposables) for (var i = 0; i < this.disposables.length; i++) this.disposables[i](); this.destroyInternal(), this.dirtyParentQueriesInternal(), this._animationContext ? this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes) }) : this.renderer.destroyView(hostElement, this.allNodes), this.cdMode = ChangeDetectorStatus.Destroyed } }, AppView.prototype.destroyInternal = function () { }, AppView.prototype.detachInternal = function () { }, AppView.prototype.detach = function () { var _this = this; if (this.detachInternal(), this._animationContext ? this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach() }) : this._renderDetach(), this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer && this.declaredViewContainer.projectedViews) { var projectedViews = this.declaredViewContainer.projectedViews, index = projectedViews.indexOf(this); index >= projectedViews.length - 1 ? projectedViews.pop() : projectedViews.splice(index, 1) } this.appRef = null, this.viewContainer = null, this.dirtyParentQueriesInternal() }, AppView.prototype._renderDetach = function () { this._directRenderer ? this.visitRootNodesInternal(this._directRenderer.remove, null) : this.renderer.detachView(this.flatRootNodes) }, AppView.prototype.attachToAppRef = function (appRef) { if (this.viewContainer) throw new Error("This view is already attached to a ViewContainer!"); this.appRef = appRef, this.dirtyParentQueriesInternal() }, AppView.prototype.attachAfter = function (viewContainer, prevView) { if (this.appRef) throw new Error("This view is already attached directly to the ApplicationRef!"); this._renderAttach(viewContainer, prevView), this.viewContainer = viewContainer, this.declaredViewContainer && this.declaredViewContainer !== viewContainer && (this.declaredViewContainer.projectedViews || (this.declaredViewContainer.projectedViews = []), this.declaredViewContainer.projectedViews.push(this)), this.dirtyParentQueriesInternal() }, AppView.prototype.moveAfter = function (viewContainer, prevView) { this._renderAttach(viewContainer, prevView), this.dirtyParentQueriesInternal() }, AppView.prototype._renderAttach = function (viewContainer, prevView) { var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement; if (this._directRenderer) { var nextSibling = this._directRenderer.nextSibling(prevNode); if (nextSibling) this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling); else { var parentElement = this._directRenderer.parentElement(prevNode); parentElement && this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement) } } else this.renderer.attachViewAfter(prevNode, this.flatRootNodes) }, Object.defineProperty(AppView.prototype, "changeDetectorRef", { get: function () { return this.ref }, enumerable: !0, configurable: !0 }), Object.defineProperty(AppView.prototype, "flatRootNodes", { get: function () { var nodes = []; return this.visitRootNodesInternal(addToArray, nodes), nodes }, enumerable: !0, configurable: !0 }), AppView.prototype.projectNodes = function (parentElement, ngContentIndex) { if (this._directRenderer) this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement); else { var nodes = []; this.visitProjectedNodes(ngContentIndex, addToArray, nodes), this.renderer.projectNodes(parentElement, nodes) } }, AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) { switch (this.type) { case ViewType.EMBEDDED: this.parentView.visitProjectedNodes(ngContentIndex, cb, c); break; case ViewType.COMPONENT: if (this.parentView.type === ViewType.HOST) for (var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [], i = 0; i < nodes.length; i++) cb(nodes[i], c); else this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c) } }, AppView.prototype.visitRootNodesInternal = function (cb, c) { }, AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { }, AppView.prototype.dirtyParentQueriesInternal = function () { }, AppView.prototype.internalDetectChanges = function (throwOnChange) { this.cdMode !== ChangeDetectorStatus.Detached && this.detectChanges(throwOnChange) }, AppView.prototype.detectChanges = function (throwOnChange) { var s = _scope_check(this.clazz); this.cdMode !== ChangeDetectorStatus.Checked && this.cdMode !== ChangeDetectorStatus.Errored && (this.cdMode === ChangeDetectorStatus.Destroyed && this.throwDestroyedError("detectChanges"), this.detectChangesInternal(throwOnChange), this.cdMode === ChangeDetectorStatus.CheckOnce && (this.cdMode = ChangeDetectorStatus.Checked), this.numberOfChecks++, wtfLeave(s)) }, AppView.prototype.detectChangesInternal = function (throwOnChange) { }, AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce }, AppView.prototype.markPathToRootAsCheckOnce = function () { for (var c = this; isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached;) c.cdMode === ChangeDetectorStatus.Checked && (c.cdMode = ChangeDetectorStatus.CheckOnce), c = c.type === ViewType.COMPONENT ? c.parentView : c.viewContainer ? c.viewContainer.parentView : null }, AppView.prototype.eventHandler = function (cb) { return cb }, AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details) }, AppView }(), DebugAppView = function (_super) { function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) { void 0 === declaredViewContainer && (declaredViewContainer = null), _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer), this.staticNodeDebugInfos = staticNodeDebugInfos, this._currentDebugContext = null } return __extends$14(DebugAppView, _super), DebugAppView.prototype.create = function (context) { this._resetDebug(); try { return _super.prototype.create.call(this, context) } catch (e) { throw this._rethrowWithContext(e), e } }, DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) { void 0 === projectableNodes && (projectableNodes = null), this._resetDebug(); try { return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes) } catch (e) { throw this._rethrowWithContext(e), e } }, DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) { this._resetDebug(); try { return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult) } catch (e) { throw this._rethrowWithContext(e), e } }, DebugAppView.prototype.detach = function () { this._resetDebug(); try { _super.prototype.detach.call(this) } catch (e) { throw this._rethrowWithContext(e), e } }, DebugAppView.prototype.destroy = function () { this._resetDebug(); try { _super.prototype.destroy.call(this) } catch (e) { throw this._rethrowWithContext(e), e } }, DebugAppView.prototype.detectChanges = function (throwOnChange) { this._resetDebug(); try { _super.prototype.detectChanges.call(this, throwOnChange) } catch (e) { throw this._rethrowWithContext(e), e } }, DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null }, DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) { return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum) }, DebugAppView.prototype._rethrowWithContext = function (e) { if (!(e instanceof ViewWrappedError) && (e instanceof ExpressionChangedAfterItHasBeenCheckedError || (this.cdMode = ChangeDetectorStatus.Errored), isPresent(this._currentDebugContext))) throw new ViewWrappedError(e, this._currentDebugContext) }, DebugAppView.prototype.eventHandler = function (cb) { var _this = this, superHandler = _super.prototype.eventHandler.call(this, cb); return function (eventName, event) { _this._resetDebug(); try { return superHandler.call(_this, eventName, event) } catch (e) { throw _this._rethrowWithContext(e), e } } }, DebugAppView }(AppView), ViewContainer = function () { function ViewContainer(index, parentIndex, parentView, nativeElement) { this.index = index, this.parentIndex = parentIndex, this.parentView = parentView, this.nativeElement = nativeElement } return Object.defineProperty(ViewContainer.prototype, "elementRef", { get: function () { return new ElementRef(this.nativeElement) }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainer.prototype, "vcRef", { get: function () { return new ViewContainerRef_(this) }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainer.prototype, "parentInjector", { get: function () { return this.parentView.injector(this.parentIndex) }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainer.prototype, "injector", { get: function () { return this.parentView.injector(this.index) }, enumerable: !0, configurable: !0 }), ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) { if (this.nestedViews) for (var i = 0; i < this.nestedViews.length; i++) this.nestedViews[i].detectChanges(throwOnChange) }, ViewContainer.prototype.destroyNestedViews = function () { if (this.nestedViews) for (var i = 0; i < this.nestedViews.length; i++) this.nestedViews[i].destroy() }, ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) { if (this.nestedViews) for (var i = 0; i < this.nestedViews.length; i++) this.nestedViews[i].visitRootNodesInternal(cb, c) }, ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) { var result = []; if (this.nestedViews) for (var i = 0; i < this.nestedViews.length; i++) { var nestedView = this.nestedViews[i]; nestedView.clazz === nestedViewClass && result.push(callback(nestedView)) } if (this.projectedViews) for (var i = 0; i < this.projectedViews.length; i++) { var projectedView = this.projectedViews[i]; projectedView.clazz === nestedViewClass && result.push(callback(projectedView)) } return result }, ViewContainer.prototype.moveView = function (view, currentIndex) { var previousIndex = this.nestedViews.indexOf(view); if (view.type === ViewType.COMPONENT) throw new Error("Component views can't be moved!"); var nestedViews = this.nestedViews; null == nestedViews && (nestedViews = [], this.nestedViews = nestedViews), nestedViews.splice(previousIndex, 1), nestedViews.splice(currentIndex, 0, view); var prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null; view.moveAfter(this, prevView) }, ViewContainer.prototype.attachView = function (view, viewIndex) { if (view.type === ViewType.COMPONENT) throw new Error("Component views can't be moved!"); var nestedViews = this.nestedViews; null == nestedViews && (nestedViews = [], this.nestedViews = nestedViews), viewIndex >= nestedViews.length ? nestedViews.push(view) : nestedViews.splice(viewIndex, 0, view); var prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null; view.attachAfter(this, prevView) }, ViewContainer.prototype.detachView = function (viewIndex) { var view = this.nestedViews[viewIndex]; if (viewIndex >= this.nestedViews.length - 1 ? this.nestedViews.pop() : this.nestedViews.splice(viewIndex, 1), view.type === ViewType.COMPONENT) throw new Error("Component views can't be moved!"); return view.detach(), view }, ViewContainer }(), __core_private__ = { isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy, ChangeDetectorStatus: ChangeDetectorStatus, constructDependencies: constructDependencies, LifecycleHooks: LifecycleHooks, LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES, ReflectorReader: ReflectorReader, CodegenComponentFactoryResolver: CodegenComponentFactoryResolver, ComponentRef_: ComponentRef_, ViewContainer: ViewContainer, AppView: AppView, DebugAppView: DebugAppView, NgModuleInjector: NgModuleInjector, registerModuleFactory: registerModuleFactory, ViewType: ViewType, view_utils: view_utils, ViewMetadata: ViewMetadata, DebugContext: DebugContext, StaticNodeDebugInfo: StaticNodeDebugInfo, devModeEqual: devModeEqual, UNINITIALIZED: UNINITIALIZED, ValueUnwrapper: ValueUnwrapper, RenderDebugInfo: RenderDebugInfo, TemplateRef_: TemplateRef_, ReflectionCapabilities: ReflectionCapabilities, makeDecorator: makeDecorator, DebugDomRootRenderer: DebugDomRootRenderer, Console: Console, reflector: reflector, Reflector: Reflector, NoOpAnimationPlayer: NoOpAnimationPlayer, AnimationPlayer: AnimationPlayer, AnimationSequencePlayer: AnimationSequencePlayer, AnimationGroupPlayer: AnimationGroupPlayer, AnimationKeyframe: AnimationKeyframe, prepareFinalAnimationStyles: prepareFinalAnimationStyles, balanceAnimationKeyframes: balanceAnimationKeyframes, flattenStyles: flattenStyles, clearStyles: clearStyles, renderStyles: renderStyles, collectAndResolveStyles: collectAndResolveStyles, APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER, AnimationStyles: AnimationStyles, ANY_STATE: ANY_STATE, DEFAULT_STATE: DEFAULT_STATE, EMPTY_STATE: EMPTY_STATE, FILL_STYLE_FLAG: FILL_STYLE_FLAG, ComponentStillLoadingError: ComponentStillLoadingError, isPromise: isPromise, AnimationTransition: AnimationTransition }; exports.createPlatform = createPlatform, exports.assertPlatform = assertPlatform, exports.destroyPlatform = destroyPlatform, exports.getPlatform = getPlatform, exports.PlatformRef = PlatformRef, exports.ApplicationRef = ApplicationRef, exports.enableProdMode = enableProdMode, exports.isDevMode = isDevMode, exports.createPlatformFactory = createPlatformFactory, exports.NgProbeToken = NgProbeToken, exports.APP_ID = APP_ID, exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL, exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER, exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER, exports.APP_INITIALIZER = APP_INITIALIZER, exports.ApplicationInitStatus = ApplicationInitStatus, exports.DebugElement = DebugElement, exports.DebugNode = DebugNode, exports.asNativeElements = asNativeElements, exports.getDebugNode = getDebugNode, exports.Testability = Testability, exports.TestabilityRegistry = TestabilityRegistry, exports.setTestabilityGetter = setTestabilityGetter, exports.TRANSLATIONS = TRANSLATIONS, exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT, exports.LOCALE_ID = LOCALE_ID, exports.ApplicationModule = ApplicationModule, exports.wtfCreateScope = wtfCreateScope, exports.wtfLeave = wtfLeave, exports.wtfStartTimeRange = wtfStartTimeRange, exports.wtfEndTimeRange = wtfEndTimeRange, exports.Type = Type, exports.EventEmitter = EventEmitter, exports.ErrorHandler = ErrorHandler, exports.AnimationTransitionEvent = AnimationTransitionEvent, exports.AnimationPlayer = AnimationPlayer, exports.Sanitizer = Sanitizer, exports.SecurityContext = SecurityContext, exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS, exports.Attribute = Attribute, exports.ContentChild = ContentChild, exports.ContentChildren = ContentChildren, exports.Query = Query, exports.ViewChild = ViewChild, exports.ViewChildren = ViewChildren, exports.Component = Component, exports.Directive = Directive, exports.HostBinding = HostBinding, exports.HostListener = HostListener, exports.Input = Input, exports.Output = Output, exports.Pipe = Pipe, exports.AfterContentChecked = AfterContentChecked, exports.AfterContentInit = AfterContentInit, exports.AfterViewChecked = AfterViewChecked, exports.AfterViewInit = AfterViewInit, exports.DoCheck = DoCheck, exports.OnChanges = OnChanges, exports.OnDestroy = OnDestroy, exports.OnInit = OnInit, exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA, exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA, exports.NgModule = NgModule, exports.ViewEncapsulation = ViewEncapsulation, exports.Version = Version, exports.VERSION = VERSION, exports.Class = Class, exports.forwardRef = forwardRef, exports.resolveForwardRef = resolveForwardRef, exports.Injector = Injector, exports.ReflectiveInjector = ReflectiveInjector, exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory, exports.ReflectiveKey = ReflectiveKey, exports.OpaqueToken = OpaqueToken, exports.Inject = Inject, exports.Optional = Optional, exports.Injectable = Injectable, exports.Self = Self, exports.SkipSelf = SkipSelf, exports.Host = Host, exports.NgZone = NgZone, exports.RenderComponentType = RenderComponentType, exports.Renderer = Renderer, exports.RootRenderer = RootRenderer, exports.COMPILER_OPTIONS = COMPILER_OPTIONS, exports.Compiler = Compiler, exports.CompilerFactory = CompilerFactory, exports.ModuleWithComponentFactories = ModuleWithComponentFactories, exports.ComponentFactory = ComponentFactory, exports.ComponentRef = ComponentRef, exports.ComponentFactoryResolver = ComponentFactoryResolver, exports.ElementRef = ElementRef, exports.NgModuleFactory = NgModuleFactory, exports.NgModuleRef = NgModuleRef, exports.NgModuleFactoryLoader = NgModuleFactoryLoader, exports.getModuleFactory = getModuleFactory, exports.QueryList = QueryList, exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader, exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig, exports.TemplateRef = TemplateRef, exports.ViewContainerRef = ViewContainerRef, exports.EmbeddedViewRef = EmbeddedViewRef, exports.ViewRef = ViewRef, exports.ChangeDetectionStrategy = ChangeDetectionStrategy, exports.ChangeDetectorRef = ChangeDetectorRef, exports.CollectionChangeRecord = CollectionChangeRecord, exports.DefaultIterableDiffer = DefaultIterableDiffer, exports.IterableDiffers = IterableDiffers, exports.KeyValueChangeRecord = KeyValueChangeRecord, exports.KeyValueDiffers = KeyValueDiffers, exports.SimpleChange = SimpleChange, exports.WrappedValue = WrappedValue, exports.platformCore = platformCore, exports.__core_private__ = __core_private__, exports.AUTO_STYLE = AUTO_STYLE, exports.AnimationEntryMetadata = AnimationEntryMetadata, exports.AnimationStateMetadata = AnimationStateMetadata, exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata, exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata, exports.AnimationMetadata = AnimationMetadata, exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata, exports.AnimationStyleMetadata = AnimationStyleMetadata, exports.AnimationAnimateMetadata = AnimationAnimateMetadata, exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata, exports.AnimationSequenceMetadata = AnimationSequenceMetadata, exports.AnimationGroupMetadata = AnimationGroupMetadata, exports.animate = animate, exports.group = group, exports.sequence = sequence, exports.style = style, exports.state = state, exports.keyframes = keyframes, exports.transition = transition, exports.trigger = trigger
});
/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core")) : "function" == typeof define && define.amd ? define(["exports", "@angular/core"], factory) : factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core) }(this, function (exports, _angular_core) {
    "use strict"; function getTypeNameForDebugging(type) { return type.name || typeof type } function isPresent(obj) { return null != obj } function isBlank(obj) { return null == obj } function isDate(obj) { return obj instanceof Date && !isNaN(obj.valueOf()) } function stringify(token) { if ("string" == typeof token) return token; if (null == token) return "" + token; if (token.overriddenName) return "" + token.overriddenName; if (token.name) return "" + token.name; var res = token.toString(), newLineIndex = res.indexOf("\n"); return newLineIndex === -1 ? res : res.substring(0, newLineIndex) } function isJsObject(o) { return null !== o && ("function" == typeof o || "object" == typeof o) } function getSymbolIterator() { if (!_symbolIterator) if (globalScope.Symbol && Symbol.iterator) _symbolIterator = Symbol.iterator; else for (var keys = Object.getOwnPropertyNames(Map.prototype), i = 0; i < keys.length; ++i) { var key = keys[i]; "entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key) } return _symbolIterator } function _stripBaseHref(baseHref, url) { return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url } function _stripIndexHtml(url) { return url.replace(/\/index.html$/, "") } function getPluralCategory(value, cases, ngLocalization) { var key = "=" + value; if (cases.indexOf(key) > -1) return key; if (key = ngLocalization.getPluralCategory(value), cases.indexOf(key) > -1) return key; if (cases.indexOf("other") > -1) return "other"; throw new Error('No plural message found for value "' + value + '"') } function getPluralCase(locale, nLike) { "string" == typeof nLike && (nLike = parseInt(nLike, 10)); var n = nLike, nDecimal = n.toString().replace(/^[^.]*\.?/, ""), i = Math.floor(Math.abs(n)), v = nDecimal.length, f = parseInt(nDecimal, 10), t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ""), 10) || 0, lang = locale.split("-")[0].toLowerCase(); switch (lang) { case "af": case "asa": case "az": case "bem": case "bez": case "bg": case "brx": case "ce": case "cgg": case "chr": case "ckb": case "ee": case "el": case "eo": case "es": case "eu": case "fo": case "fur": case "gsw": case "ha": case "haw": case "hu": case "jgo": case "jmc": case "ka": case "kk": case "kkj": case "kl": case "ks": case "ksb": case "ky": case "lb": case "lg": case "mas": case "mgo": case "ml": case "mn": case "nb": case "nd": case "ne": case "nn": case "nnh": case "nyn": case "om": case "or": case "os": case "ps": case "rm": case "rof": case "rwk": case "saq": case "seh": case "sn": case "so": case "sq": case "ta": case "te": case "teo": case "tk": case "tr": case "ug": case "uz": case "vo": case "vun": case "wae": case "xog": return 1 === n ? Plural.One : Plural.Other; case "agq": case "bas": case "cu": case "dav": case "dje": case "dua": case "dyo": case "ebu": case "ewo": case "guz": case "kam": case "khq": case "ki": case "kln": case "kok": case "ksf": case "lrc": case "lu": case "luo": case "luy": case "mer": case "mfe": case "mgh": case "mua": case "mzn": case "nmg": case "nus": case "qu": case "rn": case "rw": case "sbp": case "twq": case "vai": case "yav": case "yue": case "zgh": case "ak": case "ln": case "mg": case "pa": case "ti": return n === Math.floor(n) && n >= 0 && n <= 1 ? Plural.One : Plural.Other; case "am": case "as": case "bn": case "fa": case "gu": case "hi": case "kn": case "mr": case "zu": return 0 === i || 1 === n ? Plural.One : Plural.Other; case "ar": return 0 === n ? Plural.Zero : 1 === n ? Plural.One : 2 === n ? Plural.Two : n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10 ? Plural.Few : n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99 ? Plural.Many : Plural.Other; case "ast": case "ca": case "de": case "en": case "et": case "fi": case "fy": case "gl": case "it": case "nl": case "sv": case "sw": case "ur": case "yi": return 1 === i && 0 === v ? Plural.One : Plural.Other; case "be": return n % 10 === 1 && n % 100 !== 11 ? Plural.One : n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14) ? Plural.Few : n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14 ? Plural.Many : Plural.Other; case "br": return n % 10 === 1 && n % 100 !== 11 && n % 100 !== 71 && n % 100 !== 91 ? Plural.One : n % 10 === 2 && n % 100 !== 12 && n % 100 !== 72 && n % 100 !== 92 ? Plural.Two : n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99) ? Plural.Few : 0 !== n && n % 1e6 === 0 ? Plural.Many : Plural.Other; case "bs": case "hr": case "sr": return 0 === v && i % 10 === 1 && i % 100 !== 11 || f % 10 === 1 && f % 100 !== 11 ? Plural.One : 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14) ? Plural.Few : Plural.Other; case "cs": case "sk": return 1 === i && 0 === v ? Plural.One : i === Math.floor(i) && i >= 2 && i <= 4 && 0 === v ? Plural.Few : 0 !== v ? Plural.Many : Plural.Other; case "cy": return 0 === n ? Plural.Zero : 1 === n ? Plural.One : 2 === n ? Plural.Two : 3 === n ? Plural.Few : 6 === n ? Plural.Many : Plural.Other; case "da": return 1 === n || 0 !== t && (0 === i || 1 === i) ? Plural.One : Plural.Other; case "dsb": case "hsb": return 0 === v && i % 100 === 1 || f % 100 === 1 ? Plural.One : 0 === v && i % 100 === 2 || f % 100 === 2 ? Plural.Two : 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4 ? Plural.Few : Plural.Other; case "ff": case "fr": case "hy": case "kab": return 0 === i || 1 === i ? Plural.One : Plural.Other; case "fil": return 0 === v && (1 === i || 2 === i || 3 === i) || 0 === v && i % 10 !== 4 && i % 10 !== 6 && i % 10 !== 9 || 0 !== v && f % 10 !== 4 && f % 10 !== 6 && f % 10 !== 9 ? Plural.One : Plural.Other; case "ga": return 1 === n ? Plural.One : 2 === n ? Plural.Two : n === Math.floor(n) && n >= 3 && n <= 6 ? Plural.Few : n === Math.floor(n) && n >= 7 && n <= 10 ? Plural.Many : Plural.Other; case "gd": return 1 === n || 11 === n ? Plural.One : 2 === n || 12 === n ? Plural.Two : n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19) ? Plural.Few : Plural.Other; case "gv": return 0 === v && i % 10 === 1 ? Plural.One : 0 === v && i % 10 === 2 ? Plural.Two : 0 !== v || i % 100 !== 0 && i % 100 !== 20 && i % 100 !== 40 && i % 100 !== 60 && i % 100 !== 80 ? 0 !== v ? Plural.Many : Plural.Other : Plural.Few; case "he": return 1 === i && 0 === v ? Plural.One : 2 === i && 0 === v ? Plural.Two : 0 !== v || n >= 0 && n <= 10 || n % 10 !== 0 ? Plural.Other : Plural.Many; case "is": return 0 === t && i % 10 === 1 && i % 100 !== 11 || 0 !== t ? Plural.One : Plural.Other; case "ksh": return 0 === n ? Plural.Zero : 1 === n ? Plural.One : Plural.Other; case "kw": case "naq": case "se": case "smn": return 1 === n ? Plural.One : 2 === n ? Plural.Two : Plural.Other; case "lag": return 0 === n ? Plural.Zero : 0 !== i && 1 !== i || 0 === n ? Plural.Other : Plural.One; case "lt": return n % 10 !== 1 || n % 100 >= 11 && n % 100 <= 19 ? n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19) ? Plural.Few : 0 !== f ? Plural.Many : Plural.Other : Plural.One; case "lv": case "prg": return n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || 2 === v && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19 ? Plural.Zero : n % 10 === 1 && n % 100 !== 11 || 2 === v && f % 10 === 1 && f % 100 !== 11 || 2 !== v && f % 10 === 1 ? Plural.One : Plural.Other; case "mk": return 0 === v && i % 10 === 1 || f % 10 === 1 ? Plural.One : Plural.Other; case "mt": return 1 === n ? Plural.One : 0 === n || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10 ? Plural.Few : n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ? Plural.Many : Plural.Other; case "pl": return 1 === i && 0 === v ? Plural.One : 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) ? Plural.Few : 0 === v && 1 !== i && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14 ? Plural.Many : Plural.Other; case "pt": return n === Math.floor(n) && n >= 0 && n <= 2 && 2 !== n ? Plural.One : Plural.Other; case "ro": return 1 === i && 0 === v ? Plural.One : 0 !== v || 0 === n || 1 !== n && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19 ? Plural.Few : Plural.Other; case "ru": case "uk": return 0 === v && i % 10 === 1 && i % 100 !== 11 ? Plural.One : 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) ? Plural.Few : 0 === v && i % 10 === 0 || 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14 ? Plural.Many : Plural.Other; case "shi": return 0 === i || 1 === n ? Plural.One : n === Math.floor(n) && n >= 2 && n <= 10 ? Plural.Few : Plural.Other; case "si": return 0 === n || 1 === n || 0 === i && 1 === f ? Plural.One : Plural.Other; case "sl": return 0 === v && i % 100 === 1 ? Plural.One : 0 === v && i % 100 === 2 ? Plural.Two : 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || 0 !== v ? Plural.Few : Plural.Other; case "tzm": return n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99 ? Plural.One : Plural.Other; default: return Plural.Other } } function isListLikeIterable(obj) { return !!isJsObject(obj) && (Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj) } function digitModifier(inner) { return function (date, locale) { var result = inner(date, locale); return 1 == result.length ? "0" + result : result } } function hourClockExtractor(inner) { return function (date, locale) { return inner(date, locale).split(" ")[1] } } function hourExtractor(inner) { return function (date, locale) { return inner(date, locale).split(" ")[0] } } function intlDateFormat(date, locale, options) { return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, "") } function timeZoneGetter(timezone) { var options = { hour: "2-digit", hour12: !1, timeZoneName: timezone }; return function (date, locale) { var result = intlDateFormat(date, locale, options); return result ? result.substring(3) : "" } } function hour12Modify(options, value) { return options.hour12 = value, options } function digitCondition(prop, len) { var result = {}; return result[prop] = 2 === len ? "2-digit" : "numeric", result } function nameCondition(prop, len) { var result = {}; return len < 4 ? result[prop] = len > 1 ? "short" : "narrow" : result[prop] = "long", result } function combine(options) { return (_a = Object).assign.apply(_a, [{}].concat(options)); var _a } function datePartGetterFactory(ret) { return function (date, locale) { return intlDateFormat(date, locale, ret) } } function dateFormatter(format, date, locale) { var fn = PATTERN_ALIASES[format]; if (fn) return fn(date, locale); var cacheKey = format, parts = DATE_FORMATTER_CACHE.get(cacheKey); if (!parts) { parts = []; var match = void 0; for (DATE_FORMATS_SPLIT.exec(format) ; format;) match = DATE_FORMATS_SPLIT.exec(format), match ? (parts = parts.concat(match.slice(1)), format = parts.pop()) : (parts.push(format), format = null); DATE_FORMATTER_CACHE.set(cacheKey, parts) } return parts.reduce(function (text, part) { var fn = DATE_FORMATS[part]; return text + (fn ? fn(date, locale) : partToTime(part)) }, "") } function partToTime(part) { return "''" === part ? "'" : part.replace(/(^'|'$)/g, "").replace(/''/g, "'") } function isBlank$1(obj) { return null == obj || "" === obj } function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) { if (void 0 === currency && (currency = null), void 0 === currencyAsSymbol && (currencyAsSymbol = !1), isBlank(value)) return null; if (value = "string" == typeof value && NumberWrapper.isNumeric(value) ? +value : value, "number" != typeof value) throw new InvalidPipeArgumentError(pipe, value); var minInt, minFraction, maxFraction; if (style !== NumberFormatStyle.Currency && (minInt = 1, minFraction = 0, maxFraction = 3), digits) { var parts = digits.match(_NUMBER_FORMAT_REGEXP); if (null === parts) throw new Error(digits + " is not a valid digit info for number pipes"); isPresent(parts[1]) && (minInt = NumberWrapper.parseIntAutoRadix(parts[1])), isPresent(parts[3]) && (minFraction = NumberWrapper.parseIntAutoRadix(parts[3])), isPresent(parts[5]) && (maxFraction = NumberWrapper.parseIntAutoRadix(parts[5])) } return NumberFormatter.format(value, locale, style, { minimumIntegerDigits: minInt, minimumFractionDigits: minFraction, maximumFractionDigits: maxFraction, currency: currency, currencyAsSymbol: currencyAsSymbol }) } var globalScope, PlatformLocation = function () { function PlatformLocation() { } return PlatformLocation.prototype.getBaseHrefFromDOM = function () { }, PlatformLocation.prototype.onPopState = function (fn) { }, PlatformLocation.prototype.onHashChange = function (fn) { }, Object.defineProperty(PlatformLocation.prototype, "pathname", { get: function () { return null }, enumerable: !0, configurable: !0 }), Object.defineProperty(PlatformLocation.prototype, "search", { get: function () { return null }, enumerable: !0, configurable: !0 }), Object.defineProperty(PlatformLocation.prototype, "hash", { get: function () { return null }, enumerable: !0, configurable: !0 }), PlatformLocation.prototype.replaceState = function (state, title, url) { }, PlatformLocation.prototype.pushState = function (state, title, url) { }, PlatformLocation.prototype.forward = function () { }, PlatformLocation.prototype.back = function () { }, PlatformLocation }(), LocationStrategy = function () { function LocationStrategy() { } return LocationStrategy.prototype.path = function (includeHash) { }, LocationStrategy.prototype.prepareExternalUrl = function (internal) { }, LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { }, LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { }, LocationStrategy.prototype.forward = function () { }, LocationStrategy.prototype.back = function () { }, LocationStrategy.prototype.onPopState = function (fn) { }, LocationStrategy.prototype.getBaseHref = function () { }, LocationStrategy }(), APP_BASE_HREF = new _angular_core.OpaqueToken("appBaseHref"); globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window; var _global = globalScope; _global.assert = function (condition) { }; var NumberWrapper = function () { function NumberWrapper() { } return NumberWrapper.parseIntAutoRadix = function (text) { var result = parseInt(text); if (isNaN(result)) throw new Error("Invalid integer literal when parsing " + text); return result }, NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)) }, NumberWrapper }(), _symbolIterator = null, Location = function () { function Location(platformStrategy) { var _this = this; this._subject = new _angular_core.EventEmitter, this._platformStrategy = platformStrategy; var browserBaseHref = this._platformStrategy.getBaseHref(); this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref)), this._platformStrategy.onPopState(function (ev) { _this._subject.emit({ url: _this.path(!0), pop: !0, type: ev.type }) }) } return Location.prototype.path = function (includeHash) { return void 0 === includeHash && (includeHash = !1), this.normalize(this._platformStrategy.path(includeHash)) }, Location.prototype.isCurrentPathEqualTo = function (path, query) { return void 0 === query && (query = ""), this.path() == this.normalize(path + Location.normalizeQueryParams(query)) }, Location.prototype.normalize = function (url) { return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url))) }, Location.prototype.prepareExternalUrl = function (url) { return url && "/" !== url[0] && (url = "/" + url), this._platformStrategy.prepareExternalUrl(url) }, Location.prototype.go = function (path, query) { void 0 === query && (query = ""), this._platformStrategy.pushState(null, "", path, query) }, Location.prototype.replaceState = function (path, query) { void 0 === query && (query = ""), this._platformStrategy.replaceState(null, "", path, query) }, Location.prototype.forward = function () { this._platformStrategy.forward() }, Location.prototype.back = function () { this._platformStrategy.back() }, Location.prototype.subscribe = function (onNext, onThrow, onReturn) { return void 0 === onThrow && (onThrow = null), void 0 === onReturn && (onReturn = null), this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn }) }, Location.normalizeQueryParams = function (params) { return params && "?" !== params[0] ? "?" + params : params }, Location.joinWithSlash = function (start, end) { if (0 == start.length) return end; if (0 == end.length) return start; var slashes = 0; return start.endsWith("/") && slashes++, end.startsWith("/") && slashes++, 2 == slashes ? start + end.substring(1) : 1 == slashes ? start + end : start + "/" + end }, Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, "") }, Location.decorators = [{ type: _angular_core.Injectable }], Location.ctorParameters = function () { return [{ type: LocationStrategy }] }, Location }(), __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, HashLocationStrategy = function (_super) { function HashLocationStrategy(_platformLocation, _baseHref) { _super.call(this), this._platformLocation = _platformLocation, this._baseHref = "", isPresent(_baseHref) && (this._baseHref = _baseHref) } return __extends(HashLocationStrategy, _super), HashLocationStrategy.prototype.onPopState = function (fn) { this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn) }, HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref }, HashLocationStrategy.prototype.path = function (includeHash) { void 0 === includeHash && (includeHash = !1); var path = this._platformLocation.hash; return isPresent(path) || (path = "#"), path.length > 0 ? path.substring(1) : path }, HashLocationStrategy.prototype.prepareExternalUrl = function (internal) { var url = Location.joinWithSlash(this._baseHref, internal); return url.length > 0 ? "#" + url : url }, HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) { var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams)); 0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.pushState(state, title, url) }, HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) { var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams)); 0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.replaceState(state, title, url) }, HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward() }, HashLocationStrategy.prototype.back = function () { this._platformLocation.back() }, HashLocationStrategy.decorators = [{ type: _angular_core.Injectable }], HashLocationStrategy.ctorParameters = function () { return [{ type: PlatformLocation }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF] }] }] }, HashLocationStrategy }(LocationStrategy), __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, PathLocationStrategy = function (_super) { function PathLocationStrategy(_platformLocation, href) { if (_super.call(this), this._platformLocation = _platformLocation, isBlank(href) && (href = this._platformLocation.getBaseHrefFromDOM()), isBlank(href)) throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document."); this._baseHref = href } return __extends$1(PathLocationStrategy, _super), PathLocationStrategy.prototype.onPopState = function (fn) { this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn) }, PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref }, PathLocationStrategy.prototype.prepareExternalUrl = function (internal) { return Location.joinWithSlash(this._baseHref, internal) }, PathLocationStrategy.prototype.path = function (includeHash) { void 0 === includeHash && (includeHash = !1); var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search), hash = this._platformLocation.hash; return hash && includeHash ? "" + pathname + hash : pathname }, PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) { var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams)); this._platformLocation.pushState(state, title, externalUrl) }, PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams)); this._platformLocation.replaceState(state, title, externalUrl) }, PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward() }, PathLocationStrategy.prototype.back = function () { this._platformLocation.back() }, PathLocationStrategy.decorators = [{ type: _angular_core.Injectable }], PathLocationStrategy.ctorParameters = function () { return [{ type: PlatformLocation }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF] }] }] }, PathLocationStrategy }(LocationStrategy), __extends$2 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, NgLocalization = function () { function NgLocalization() { } return NgLocalization.prototype.getPluralCategory = function (value) { }, NgLocalization }(), NgLocaleLocalization = function (_super) { function NgLocaleLocalization(_locale) { _super.call(this), this._locale = _locale } return __extends$2(NgLocaleLocalization, _super), NgLocaleLocalization.prototype.getPluralCategory = function (value) { var plural = getPluralCase(this._locale, value); switch (plural) { case Plural.Zero: return "zero"; case Plural.One: return "one"; case Plural.Two: return "two"; case Plural.Few: return "few"; case Plural.Many: return "many"; default: return "other" } }, NgLocaleLocalization.decorators = [{ type: _angular_core.Injectable }], NgLocaleLocalization.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }] }, NgLocaleLocalization }(NgLocalization), Plural = {}; Plural.Zero = 0, Plural.One = 1, Plural.Two = 2, Plural.Few = 3, Plural.Many = 4, Plural.Other = 5, Plural[Plural.Zero] = "Zero", Plural[Plural.One] = "One", Plural[Plural.Two] = "Two", Plural[Plural.Few] = "Few", Plural[Plural.Many] = "Many", Plural[Plural.Other] = "Other"; var NgClass = function () { function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) { this._iterableDiffers = _iterableDiffers, this._keyValueDiffers = _keyValueDiffers, this._ngEl = _ngEl, this._renderer = _renderer, this._initialClasses = [] } return Object.defineProperty(NgClass.prototype, "klass", { set: function (v) { this._applyInitialClasses(!0), this._initialClasses = "string" == typeof v ? v.split(/\s+/) : [], this._applyInitialClasses(!1), this._applyClasses(this._rawClass, !1) }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgClass.prototype, "ngClass", { set: function (v) { this._cleanupClasses(this._rawClass), this._iterableDiffer = null, this._keyValueDiffer = null, this._rawClass = "string" == typeof v ? v.split(/\s+/) : v, this._rawClass && (isListLikeIterable(this._rawClass) ? this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null) : this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null)) }, enumerable: !0, configurable: !0 }), NgClass.prototype.ngDoCheck = function () { if (this._iterableDiffer) { var changes = this._iterableDiffer.diff(this._rawClass); changes && this._applyIterableChanges(changes) } else if (this._keyValueDiffer) { var changes = this._keyValueDiffer.diff(this._rawClass); changes && this._applyKeyValueChanges(changes) } }, NgClass.prototype._cleanupClasses = function (rawClassVal) { this._applyClasses(rawClassVal, !0), this._applyInitialClasses(!1) }, NgClass.prototype._applyKeyValueChanges = function (changes) { var _this = this; changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue) }), changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue) }), changes.forEachRemovedItem(function (record) { record.previousValue && _this._toggleClass(record.key, !1) }) }, NgClass.prototype._applyIterableChanges = function (changes) { var _this = this; changes.forEachAddedItem(function (record) { if ("string" != typeof record.item) throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item)); _this._toggleClass(record.item, !0) }), changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, !1) }) }, NgClass.prototype._applyInitialClasses = function (isCleanup) { var _this = this; this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup) }) }, NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) { var _this = this; rawClassVal && (Array.isArray(rawClassVal) || rawClassVal instanceof Set ? rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup) }) : Object.keys(rawClassVal).forEach(function (klass) { isPresent(rawClassVal[klass]) && _this._toggleClass(klass, !isCleanup) })) }, NgClass.prototype._toggleClass = function (klass, enabled) { var _this = this; klass = klass.trim(), klass && klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled) }) }, NgClass.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngClass]" }] }], NgClass.ctorParameters = function () { return [{ type: _angular_core.IterableDiffers }, { type: _angular_core.KeyValueDiffers }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }] }, NgClass.propDecorators = { klass: [{ type: _angular_core.Input, args: ["class"] }], ngClass: [{ type: _angular_core.Input }] }, NgClass }(), NgForRow = function () { function NgForRow($implicit, index, count) { this.$implicit = $implicit, this.index = index, this.count = count } return Object.defineProperty(NgForRow.prototype, "first", { get: function () { return 0 === this.index }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForRow.prototype, "last", { get: function () { return this.index === this.count - 1 }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForRow.prototype, "even", { get: function () { return this.index % 2 === 0 }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForRow.prototype, "odd", { get: function () { return !this.even }, enumerable: !0, configurable: !0 }), NgForRow }(), NgFor = function () { function NgFor(_viewContainer, _template, _differs, _cdr) { this._viewContainer = _viewContainer, this._template = _template, this._differs = _differs, this._cdr = _cdr, this._differ = null } return Object.defineProperty(NgFor.prototype, "ngForTrackBy", { get: function () { return this._trackByFn }, set: function (fn) { if ("function" != typeof fn) throw new Error("trackBy must be a function, but received " + JSON.stringify(fn)); this._trackByFn = fn }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgFor.prototype, "ngForTemplate", { set: function (value) { value && (this._template = value) }, enumerable: !0, configurable: !0 }), NgFor.prototype.ngOnChanges = function (changes) { if ("ngForOf" in changes) { var value = changes.ngForOf.currentValue; if (!this._differ && value) try { this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy) } catch (e) { throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.") } } }, NgFor.prototype.ngDoCheck = function () { if (this._differ) { var changes = this._differ.diff(this.ngForOf); changes && this._applyChanges(changes) } }, NgFor.prototype._applyChanges = function (changes) { var _this = this, insertTuples = []; changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) { if (null == item.previousIndex) { var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex), tuple = new RecordViewTuple(item, view); insertTuples.push(tuple) } else if (null == currentIndex) _this._viewContainer.remove(adjustedPreviousIndex); else { var view = _this._viewContainer.get(adjustedPreviousIndex); _this._viewContainer.move(view, currentIndex); var tuple = new RecordViewTuple(item, view); insertTuples.push(tuple) } }); for (var i = 0; i < insertTuples.length; i++) this._perViewChange(insertTuples[i].view, insertTuples[i].record); for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) { var viewRef = this._viewContainer.get(i); viewRef.context.index = i, viewRef.context.count = ilen } changes.forEachIdentityChange(function (record) { var viewRef = _this._viewContainer.get(record.currentIndex); viewRef.context.$implicit = record.item }) }, NgFor.prototype._perViewChange = function (view, record) { view.context.$implicit = record.item }, NgFor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngFor][ngForOf]" }] }], NgFor.ctorParameters = function () { return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: _angular_core.IterableDiffers }, { type: _angular_core.ChangeDetectorRef }] }, NgFor.propDecorators = { ngForOf: [{ type: _angular_core.Input }], ngForTrackBy: [{ type: _angular_core.Input }], ngForTemplate: [{ type: _angular_core.Input }] }, NgFor }(), RecordViewTuple = function () { function RecordViewTuple(record, view) { this.record = record, this.view = view } return RecordViewTuple }(), NgIf = function () { function NgIf(_viewContainer, _template) { this._viewContainer = _viewContainer, this._template = _template, this._hasView = !1 } return Object.defineProperty(NgIf.prototype, "ngIf", { set: function (condition) { condition && !this._hasView ? (this._hasView = !0, this._viewContainer.createEmbeddedView(this._template)) : !condition && this._hasView && (this._hasView = !1, this._viewContainer.clear()) }, enumerable: !0, configurable: !0 }), NgIf.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngIf]" }] }], NgIf.ctorParameters = function () { return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }] }, NgIf.propDecorators = { ngIf: [{ type: _angular_core.Input }] }, NgIf }(), SwitchView = function () { function SwitchView(_viewContainerRef, _templateRef) { this._viewContainerRef = _viewContainerRef, this._templateRef = _templateRef, this._created = !1 } return SwitchView.prototype.create = function () { this._created = !0, this._viewContainerRef.createEmbeddedView(this._templateRef) }, SwitchView.prototype.destroy = function () { this._created = !1, this._viewContainerRef.clear() }, SwitchView.prototype.enforceState = function (created) { created && !this._created ? this.create() : !created && this._created && this.destroy() }, SwitchView }(), NgSwitch = function () { function NgSwitch() { this._defaultUsed = !1, this._caseCount = 0, this._lastCaseCheckIndex = 0, this._lastCasesMatched = !1 } return Object.defineProperty(NgSwitch.prototype, "ngSwitch", { set: function (newValue) { this._ngSwitch = newValue, 0 === this._caseCount && this._updateDefaultCases(!0) }, enumerable: !0, configurable: !0 }), NgSwitch.prototype._addCase = function () { return this._caseCount++ }, NgSwitch.prototype._addDefault = function (view) { this._defaultViews || (this._defaultViews = []), this._defaultViews.push(view) }, NgSwitch.prototype._matchCase = function (value) { var matched = value == this._ngSwitch; return this._lastCasesMatched = this._lastCasesMatched || matched, this._lastCaseCheckIndex++, this._lastCaseCheckIndex === this._caseCount && (this._updateDefaultCases(!this._lastCasesMatched), this._lastCaseCheckIndex = 0, this._lastCasesMatched = !1), matched }, NgSwitch.prototype._updateDefaultCases = function (useDefault) { if (this._defaultViews && useDefault !== this._defaultUsed) { this._defaultUsed = useDefault; for (var i = 0; i < this._defaultViews.length; i++) { var defaultView = this._defaultViews[i]; defaultView.enforceState(useDefault) } } }, NgSwitch.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngSwitch]" }] }], NgSwitch.ctorParameters = function () { return [] }, NgSwitch.propDecorators = { ngSwitch: [{ type: _angular_core.Input }] }, NgSwitch }(), NgSwitchCase = function () { function NgSwitchCase(viewContainer, templateRef, ngSwitch) { this.ngSwitch = ngSwitch, ngSwitch._addCase(), this._view = new SwitchView(viewContainer, templateRef) } return NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)) }, NgSwitchCase.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngSwitchCase]" }] }], NgSwitchCase.ctorParameters = function () { return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _angular_core.Host }] }] }, NgSwitchCase.propDecorators = { ngSwitchCase: [{ type: _angular_core.Input }] }, NgSwitchCase }(), NgSwitchDefault = function () { function NgSwitchDefault(viewContainer, templateRef, ngSwitch) { ngSwitch._addDefault(new SwitchView(viewContainer, templateRef)) } return NgSwitchDefault.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngSwitchDefault]" }] }], NgSwitchDefault.ctorParameters = function () { return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _angular_core.Host }] }] }, NgSwitchDefault }(), NgPlural = function () { function NgPlural(_localization) { this._localization = _localization, this._caseViews = {} } return Object.defineProperty(NgPlural.prototype, "ngPlural", { set: function (value) { this._switchValue = value, this._updateView() }, enumerable: !0, configurable: !0 }), NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView }, NgPlural.prototype._updateView = function () { this._clearViews(); var cases = Object.keys(this._caseViews), key = getPluralCategory(this._switchValue, cases, this._localization); this._activateView(this._caseViews[key]) }, NgPlural.prototype._clearViews = function () { this._activeView && this._activeView.destroy() }, NgPlural.prototype._activateView = function (view) { view && (this._activeView = view, this._activeView.create()) }, NgPlural.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngPlural]" }] }], NgPlural.ctorParameters = function () { return [{ type: NgLocalization }] }, NgPlural.propDecorators = { ngPlural: [{ type: _angular_core.Input }] }, NgPlural }(), NgPluralCase = function () {
        function NgPluralCase(value, template, viewContainer, ngPlural) { this.value = value, ngPlural.addCase(value, new SwitchView(viewContainer, template)) } return NgPluralCase.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngPluralCase]" }] }], NgPluralCase.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Attribute, args: ["ngPluralCase"] }] }, { type: _angular_core.TemplateRef }, { type: _angular_core.ViewContainerRef }, { type: NgPlural, decorators: [{ type: _angular_core.Host }] }] }, NgPluralCase
    }(), NgStyle = function () { function NgStyle(_differs, _ngEl, _renderer) { this._differs = _differs, this._ngEl = _ngEl, this._renderer = _renderer } return Object.defineProperty(NgStyle.prototype, "ngStyle", { set: function (v) { this._ngStyle = v, !this._differ && v && (this._differ = this._differs.find(v).create(null)) }, enumerable: !0, configurable: !0 }), NgStyle.prototype.ngDoCheck = function () { if (this._differ) { var changes = this._differ.diff(this._ngStyle); changes && this._applyChanges(changes) } }, NgStyle.prototype._applyChanges = function (changes) { var _this = this; changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null) }), changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue) }), changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue) }) }, NgStyle.prototype._setStyle = function (nameAndUnit, value) { var _a = nameAndUnit.split("."), name = _a[0], unit = _a[1]; value = value && unit ? "" + value + unit : value, this._renderer.setElementStyle(this._ngEl.nativeElement, name, value) }, NgStyle.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngStyle]" }] }], NgStyle.ctorParameters = function () { return [{ type: _angular_core.KeyValueDiffers }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }] }, NgStyle.propDecorators = { ngStyle: [{ type: _angular_core.Input }] }, NgStyle }(), NgTemplateOutlet = function () { function NgTemplateOutlet(_viewContainerRef) { this._viewContainerRef = _viewContainerRef } return Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", { set: function (context) { this._context = context }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", { set: function (templateRef) { this._templateRef = templateRef }, enumerable: !0, configurable: !0 }), NgTemplateOutlet.prototype.ngOnChanges = function (changes) { this._viewRef && this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef)), this._templateRef && (this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context)) }, NgTemplateOutlet.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngTemplateOutlet]" }] }], NgTemplateOutlet.ctorParameters = function () { return [{ type: _angular_core.ViewContainerRef }] }, NgTemplateOutlet.propDecorators = { ngOutletContext: [{ type: _angular_core.Input }], ngTemplateOutlet: [{ type: _angular_core.Input }] }, NgTemplateOutlet }(), COMMON_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase], isPromise = _angular_core.__core_private__.isPromise, __extends$4 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, BaseError = function (_super) { function BaseError(message) { _super.call(this, message); var nativeError = new Error(message); this._nativeError = nativeError } return __extends$4(BaseError, _super), Object.defineProperty(BaseError.prototype, "message", { get: function () { return this._nativeError.message }, set: function (message) { this._nativeError.message = message }, enumerable: !0, configurable: !0 }), Object.defineProperty(BaseError.prototype, "name", { get: function () { return this._nativeError.name }, enumerable: !0, configurable: !0 }), Object.defineProperty(BaseError.prototype, "stack", { get: function () { return this._nativeError.stack }, set: function (value) { this._nativeError.stack = value }, enumerable: !0, configurable: !0 }), BaseError.prototype.toString = function () { return this._nativeError.toString() }, BaseError }(Error), __extends$3 = (function (_super) { function WrappedError(message, error) { _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error)), this.originalError = error } return __extends$4(WrappedError, _super), Object.defineProperty(WrappedError.prototype, "stack", { get: function () { return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack }, enumerable: !0, configurable: !0 }), WrappedError }(BaseError), this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }), InvalidPipeArgumentError = function (_super) { function InvalidPipeArgumentError(type, value) { _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'") } return __extends$3(InvalidPipeArgumentError, _super), InvalidPipeArgumentError }(BaseError), ObservableStrategy = function () { function ObservableStrategy() { } return ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) { return async.subscribe({ next: updateLatestValue, error: function (e) { throw e } }) }, ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe() }, ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe() }, ObservableStrategy }(), PromiseStrategy = function () { function PromiseStrategy() { } return PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) { return async.then(updateLatestValue, function (e) { throw e }) }, PromiseStrategy.prototype.dispose = function (subscription) { }, PromiseStrategy.prototype.onDestroy = function (subscription) { }, PromiseStrategy }(), _promiseStrategy = new PromiseStrategy, _observableStrategy = new ObservableStrategy, AsyncPipe = function () { function AsyncPipe(_ref) { this._ref = _ref, this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null, this._strategy = null } return AsyncPipe.prototype.ngOnDestroy = function () { this._subscription && this._dispose() }, AsyncPipe.prototype.transform = function (obj) { return this._obj ? obj !== this._obj ? (this._dispose(), this.transform(obj)) : this._latestValue === this._latestReturnedValue ? this._latestReturnedValue : (this._latestReturnedValue = this._latestValue, _angular_core.WrappedValue.wrap(this._latestValue)) : (obj && this._subscribe(obj), this._latestReturnedValue = this._latestValue, this._latestValue) }, AsyncPipe.prototype._subscribe = function (obj) { var _this = this; this._obj = obj, this._strategy = this._selectStrategy(obj), this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value) }) }, AsyncPipe.prototype._selectStrategy = function (obj) { if (isPromise(obj)) return _promiseStrategy; if (obj.subscribe) return _observableStrategy; throw new InvalidPipeArgumentError(AsyncPipe, obj) }, AsyncPipe.prototype._dispose = function () { this._strategy.dispose(this._subscription), this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null }, AsyncPipe.prototype._updateLatestValue = function (async, value) { async === this._obj && (this._latestValue = value, this._ref.markForCheck()) }, AsyncPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "async", pure: !1 }] }], AsyncPipe.ctorParameters = function () { return [{ type: _angular_core.ChangeDetectorRef }] }, AsyncPipe }(), NumberFormatStyle = {}; NumberFormatStyle.Decimal = 0, NumberFormatStyle.Percent = 1, NumberFormatStyle.Currency = 2, NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal", NumberFormatStyle[NumberFormatStyle.Percent] = "Percent", NumberFormatStyle[NumberFormatStyle.Currency] = "Currency"; var NumberFormatter = function () { function NumberFormatter() { } return NumberFormatter.format = function (num, locale, style, _a) { var _b = void 0 === _a ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = void 0 !== _c && _c, options = { minimumIntegerDigits: minimumIntegerDigits, minimumFractionDigits: minimumFractionDigits, maximumFractionDigits: maximumFractionDigits, style: NumberFormatStyle[style].toLowerCase() }; return style == NumberFormatStyle.Currency && (options.currency = currency, options.currencyDisplay = currencyAsSymbol ? "symbol" : "code"), new Intl.NumberFormat(locale, options).format(num) }, NumberFormatter }(), DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/, PATTERN_ALIASES = { yMMMdjms: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1), digitCondition("second", 1)])), yMdjm: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1)])), yMMMMEEEEd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), nameCondition("weekday", 4), digitCondition("day", 1)])), yMMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), digitCondition("day", 1)])), yMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1)])), yMd: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1)])), jms: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("second", 1), digitCondition("minute", 1)])), jm: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("minute", 1)])) }, DATE_FORMATS = { yyyy: datePartGetterFactory(digitCondition("year", 4)), yy: datePartGetterFactory(digitCondition("year", 2)), y: datePartGetterFactory(digitCondition("year", 1)), MMMM: datePartGetterFactory(nameCondition("month", 4)), MMM: datePartGetterFactory(nameCondition("month", 3)), MM: datePartGetterFactory(digitCondition("month", 2)), M: datePartGetterFactory(digitCondition("month", 1)), LLLL: datePartGetterFactory(nameCondition("month", 4)), L: datePartGetterFactory(nameCondition("month", 1)), dd: datePartGetterFactory(digitCondition("day", 2)), d: datePartGetterFactory(digitCondition("day", 1)), HH: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !1)))), H: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !1))), hh: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !0)))), h: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))), jj: datePartGetterFactory(digitCondition("hour", 2)), j: datePartGetterFactory(digitCondition("hour", 1)), mm: digitModifier(datePartGetterFactory(digitCondition("minute", 2))), m: datePartGetterFactory(digitCondition("minute", 1)), ss: digitModifier(datePartGetterFactory(digitCondition("second", 2))), s: datePartGetterFactory(digitCondition("second", 1)), sss: datePartGetterFactory(digitCondition("second", 3)), EEEE: datePartGetterFactory(nameCondition("weekday", 4)), EEE: datePartGetterFactory(nameCondition("weekday", 3)), EE: datePartGetterFactory(nameCondition("weekday", 2)), E: datePartGetterFactory(nameCondition("weekday", 1)), a: hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))), Z: timeZoneGetter("short"), z: timeZoneGetter("long"), ww: datePartGetterFactory({}), w: datePartGetterFactory({}), G: datePartGetterFactory(nameCondition("era", 1)), GG: datePartGetterFactory(nameCondition("era", 2)), GGG: datePartGetterFactory(nameCondition("era", 3)), GGGG: datePartGetterFactory(nameCondition("era", 4)) }, DATE_FORMATTER_CACHE = new Map, DateFormatter = function () { function DateFormatter() { } return DateFormatter.format = function (date, locale, pattern) { return dateFormatter(pattern, date, locale) }, DateFormatter }(), DatePipe = function () { function DatePipe(_locale) { this._locale = _locale } return DatePipe.prototype.transform = function (value, pattern) { void 0 === pattern && (pattern = "mediumDate"); var date; if (isBlank$1(value)) return null; if ("string" == typeof value && (value = value.trim()), isDate(value)) date = value; else if (NumberWrapper.isNumeric(value)) date = new Date(parseFloat(value)); else if ("string" == typeof value && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) { var _a = value.split("-").map(function (val) { return parseInt(val, 10) }), y = _a[0], m = _a[1], d = _a[2]; date = new Date(y, m - 1, d) } else date = new Date(value); if (!isDate(date)) throw new InvalidPipeArgumentError(DatePipe, value); return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern) }, DatePipe._ALIASES = { medium: "yMMMdjms", short: "yMdjm", fullDate: "yMMMMEEEEd", longDate: "yMMMMd", mediumDate: "yMMMd", shortDate: "yMd", mediumTime: "jms", shortTime: "jm" }, DatePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "date", pure: !0 }] }], DatePipe.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }] }, DatePipe }(), _INTERPOLATION_REGEXP = /#/g, I18nPluralPipe = function () { function I18nPluralPipe(_localization) { this._localization = _localization } return I18nPluralPipe.prototype.transform = function (value, pluralMap) { if (isBlank(value)) return ""; if ("object" != typeof pluralMap || null === pluralMap) throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap); var key = getPluralCategory(value, Object.keys(pluralMap), this._localization); return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString()) }, I18nPluralPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "i18nPlural", pure: !0 }] }], I18nPluralPipe.ctorParameters = function () { return [{ type: NgLocalization }] }, I18nPluralPipe }(), I18nSelectPipe = function () { function I18nSelectPipe() { } return I18nSelectPipe.prototype.transform = function (value, mapping) { if (null == value) return ""; if ("object" != typeof mapping || "string" != typeof value) throw new InvalidPipeArgumentError(I18nSelectPipe, mapping); return mapping.hasOwnProperty(value) ? mapping[value] : mapping.hasOwnProperty("other") ? mapping.other : "" }, I18nSelectPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "i18nSelect", pure: !0 }] }], I18nSelectPipe.ctorParameters = function () { return [] }, I18nSelectPipe }(), JsonPipe = function () { function JsonPipe() { } return JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2) }, JsonPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "json", pure: !1 }] }], JsonPipe.ctorParameters = function () { return [] }, JsonPipe }(), LowerCasePipe = function () { function LowerCasePipe() { } return LowerCasePipe.prototype.transform = function (value) { if (isBlank(value)) return value; if ("string" != typeof value) throw new InvalidPipeArgumentError(LowerCasePipe, value); return value.toLowerCase() }, LowerCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "lowercase" }] }], LowerCasePipe.ctorParameters = function () { return [] }, LowerCasePipe }(), _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/, DecimalPipe = function () { function DecimalPipe(_locale) { this._locale = _locale } return DecimalPipe.prototype.transform = function (value, digits) { return void 0 === digits && (digits = null), formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits) }, DecimalPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "number" }] }], DecimalPipe.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }] }, DecimalPipe }(), PercentPipe = function () { function PercentPipe(_locale) { this._locale = _locale } return PercentPipe.prototype.transform = function (value, digits) { return void 0 === digits && (digits = null), formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits) }, PercentPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "percent" }] }], PercentPipe.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }] }, PercentPipe }(), CurrencyPipe = function () { function CurrencyPipe(_locale) { this._locale = _locale } return CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) { return void 0 === currencyCode && (currencyCode = "USD"), void 0 === symbolDisplay && (symbolDisplay = !1), void 0 === digits && (digits = null), formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay) }, CurrencyPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "currency" }] }], CurrencyPipe.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }] }, CurrencyPipe }(), SlicePipe = function () { function SlicePipe() { } return SlicePipe.prototype.transform = function (value, start, end) { if (isBlank(value)) return value; if (!this.supports(value)) throw new InvalidPipeArgumentError(SlicePipe, value); return value.slice(start, end) }, SlicePipe.prototype.supports = function (obj) { return "string" == typeof obj || Array.isArray(obj) }, SlicePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "slice", pure: !1 }] }], SlicePipe.ctorParameters = function () { return [] }, SlicePipe }(), UpperCasePipe = function () { function UpperCasePipe() { } return UpperCasePipe.prototype.transform = function (value) { if (isBlank(value)) return value; if ("string" != typeof value) throw new InvalidPipeArgumentError(UpperCasePipe, value); return value.toUpperCase() }, UpperCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "uppercase" }] }], UpperCasePipe.ctorParameters = function () { return [] }, UpperCasePipe }(), COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe], CommonModule = function () { function CommonModule() { } return CommonModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: [COMMON_DIRECTIVES, COMMON_PIPES], exports: [COMMON_DIRECTIVES, COMMON_PIPES], providers: [{ provide: NgLocalization, useClass: NgLocaleLocalization }] }] }], CommonModule.ctorParameters = function () { return [] }, CommonModule }(), VERSION = new _angular_core.Version("2.4.1"); exports.NgLocalization = NgLocalization, exports.CommonModule = CommonModule, exports.NgClass = NgClass, exports.NgFor = NgFor, exports.NgIf = NgIf, exports.NgPlural = NgPlural, exports.NgPluralCase = NgPluralCase, exports.NgStyle = NgStyle, exports.NgSwitch = NgSwitch, exports.NgSwitchCase = NgSwitchCase, exports.NgSwitchDefault = NgSwitchDefault, exports.NgTemplateOutlet = NgTemplateOutlet, exports.AsyncPipe = AsyncPipe, exports.DatePipe = DatePipe, exports.I18nPluralPipe = I18nPluralPipe, exports.I18nSelectPipe = I18nSelectPipe, exports.JsonPipe = JsonPipe, exports.LowerCasePipe = LowerCasePipe, exports.CurrencyPipe = CurrencyPipe, exports.DecimalPipe = DecimalPipe, exports.PercentPipe = PercentPipe, exports.SlicePipe = SlicePipe, exports.UpperCasePipe = UpperCasePipe, exports.VERSION = VERSION, exports.Version = _angular_core.Version, exports.PlatformLocation = PlatformLocation, exports.LocationStrategy = LocationStrategy, exports.APP_BASE_HREF = APP_BASE_HREF, exports.HashLocationStrategy = HashLocationStrategy, exports.PathLocationStrategy = PathLocationStrategy, exports.Location = Location
});
/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core")) : "function" == typeof define && define.amd ? define(["exports", "@angular/core"], factory) : factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core) }(this, function (exports, _angular_core) {
    "use strict"; function templateVisitAll(visitor, asts, context) { void 0 === context && (context = null); var result = [], visit = visitor.visit ? function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context) } : function (ast) { return ast.visit(visitor, context) }; return asts.forEach(function (ast) { var astResult = visit(ast); astResult && result.push(astResult) }), result } function isPresent(obj) { return null != obj } function isBlank(obj) { return null == obj } function isStrictStringMap(obj) { return "object" == typeof obj && null !== obj && Object.getPrototypeOf(obj) === STRING_MAP_PROTO } function stringify(token) { if ("string" == typeof token) return token; if (null == token) return "" + token; if (token.overriddenName) return "" + token.overriddenName; if (token.name) return "" + token.name; var res = token.toString(), newLineIndex = res.indexOf("\n"); return newLineIndex === -1 ? res : res.substring(0, newLineIndex) } function isJsObject(o) { return null !== o && ("function" == typeof o || "object" == typeof o) } function isPrimitive(obj) { return !isJsObject(obj) } function escapeRegExp(s) { return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1") } function splitNsName(elementName) { if (":" != elementName[0]) return [null, elementName]; var colonIndex = elementName.indexOf(":", 1); if (colonIndex == -1) throw new Error('Unsupported format "' + elementName + '" expecting ":namespace:name"'); return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)] } function getNsPrefix(fullName) { return null === fullName ? null : splitNsName(fullName)[0] } function mergeNsAndName(prefix, localName) { return prefix ? ":" + prefix + ":" + localName : localName } function getHtmlTagDefinition(tagName) { return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION } function dashCaseToCamelCase(input) { return input.replace(DASH_CASE_REGEXP, function () { for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; return m[1].toUpperCase() }) } function splitAtColon(input, defaultValues) { return _splitAt(input, ":", defaultValues) } function splitAtPeriod(input, defaultValues) { return _splitAt(input, ".", defaultValues) } function _splitAt(input, character, defaultValues) { var characterIndex = input.indexOf(character); return characterIndex == -1 ? defaultValues : [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()] } function visitValue(value, visitor, context) { return Array.isArray(value) ? visitor.visitArray(value, context) : isStrictStringMap(value) ? visitor.visitStringMap(value, context) : null == value || isPrimitive(value) ? visitor.visitPrimitive(value, context) : visitor.visitOther(value, context) } function _sanitizeIdentifier(name) { return name.replace(/\W/g, "_") } function identifierName(compileIdentifier) { if (!compileIdentifier || !compileIdentifier.reference) return null; var ref = compileIdentifier.reference; if (ref instanceof StaticSymbol) return ref.name; if (ref.__anonymousType) return ref.__anonymousType; var identifier = stringify(ref); return identifier.indexOf("(") >= 0 ? (identifier = "anonymous_" + _anonymousTypeIndex++, ref.__anonymousType = identifier) : identifier = _sanitizeIdentifier(identifier), identifier } function identifierModuleUrl(compileIdentifier) { var ref = compileIdentifier.reference; return ref instanceof StaticSymbol ? ref.filePath : reflector.importUri(ref) } function tokenName(token) { return isPresent(token.value) ? _sanitizeIdentifier(token.value) : identifierName(token.identifier) } function tokenReference(token) { return isPresent(token.identifier) ? token.identifier.reference : token.value } function createHostComponentMeta(typeReference, compMeta) { var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate(); return CompileDirectiveMetadata.create({ isHost: !0, type: { reference: typeReference, diDeps: [], lifecycleHooks: [] }, template: new CompileTemplateMetadata({ encapsulation: _angular_core.ViewEncapsulation.None, template: template, templateUrl: "", styles: [], styleUrls: [], ngContentSelectors: [], animations: [] }), changeDetection: _angular_core.ChangeDetectionStrategy.Default, inputs: [], outputs: [], host: {}, isComponent: !0, selector: "*", providers: [], viewProviders: [], queries: [], viewQueries: [] }) } function _normalizeArray(obj) { return obj || [] } function isWhitespace(code) { return code >= $TAB && code <= $SPACE || code == $NBSP } function isDigit(code) { return $0 <= code && code <= $9 } function isAsciiLetter(code) { return code >= $a && code <= $z || code >= $A && code <= $Z } function isAsciiHexDigit(code) { return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code) } function CompilerInjectable() { return function (x) { return x } } function assertArrayOfStrings(identifier, value) { if (_angular_core.isDevMode() && !isBlank(value)) { if (!Array.isArray(value)) throw new Error("Expected '" + identifier + "' to be an array of strings."); for (var i = 0; i < value.length; i += 1) if ("string" != typeof value[i]) throw new Error("Expected '" + identifier + "' to be an array of strings.") } } function assertInterpolationSymbols(identifier, value) { if (isPresent(value) && (!Array.isArray(value) || 2 != value.length)) throw new Error("Expected '" + identifier + "' to be an array, [start, end]."); if (_angular_core.isDevMode() && !isBlank(value)) { var start_1 = value[0], end_1 = value[1]; INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) { if (regexp.test(start_1) || regexp.test(end_1)) throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.") }) } } function newCharacterToken(index, code) { return new Token(index, TokenType.Character, code, String.fromCharCode(code)) } function newIdentifierToken(index, text) { return new Token(index, TokenType.Identifier, 0, text) } function newKeywordToken(index, text) { return new Token(index, TokenType.Keyword, 0, text) } function newOperatorToken(index, text) { return new Token(index, TokenType.Operator, 0, text) } function newStringToken(index, text) { return new Token(index, TokenType.String, 0, text) } function newNumberToken(index, n) { return new Token(index, TokenType.Number, n, "") } function newErrorToken(index, message) { return new Token(index, TokenType.Error, 0, message) } function isIdentifierStart(code) { return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$ } function isIdentifier(input) { if (0 == input.length) return !1; var scanner = new _Scanner(input); if (!isIdentifierStart(scanner.peek)) return !1; for (scanner.advance() ; scanner.peek !== $EOF;) { if (!isIdentifierPart(scanner.peek)) return !1; scanner.advance() } return !0 } function isIdentifierPart(code) { return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$ } function isExponentStart(code) { return code == $e || code == $E } function isExponentSign(code) { return code == $MINUS || code == $PLUS } function isQuote(code) { return code === $SQ || code === $DQ || code === $BT } function unescape(code) { switch (code) { case $n: return $LF; case $f: return $FF; case $r: return $CR; case $t: return $TAB; case $v: return $VTAB; default: return code } } function _createInterpolateRegExp(config) { var pattern = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end); return new RegExp(pattern, "g") } function visitAll(visitor, nodes, context) { void 0 === context && (context = null); var result = [], visit = visitor.visit ? function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context) } : function (ast) { return ast.visit(visitor, context) }; return nodes.forEach(function (ast) { var astResult = visit(ast); astResult && result.push(astResult) }), result } function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) { return void 0 === tokenizeExpansionForms && (tokenizeExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize() } function _unexpectedCharacterErrorMsg(charCode) { var char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode); return 'Unexpected character "' + char + '"' } function _unknownEntityErrorMsg(entitySrc) { return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax' } function isNotWhitespace(code) { return !isWhitespace(code) || code === $EOF } function isNameEnd(code) { return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ } function isPrefixEnd(code) { return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9) } function isDigitEntityEnd(code) { return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code) } function isNamedEntityEnd(code) { return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code) } function isExpansionFormStart(input, offset, interpolationConfig) { var isInterpolationStart = !!interpolationConfig && input.indexOf(interpolationConfig.start, offset) == offset; return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart } function isExpansionCaseStart(peek) { return peek === $EQ || isAsciiLetter(peek) } function compareCharCodeCaseInsensitive(code1, code2) { return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2) } function toUpperCaseCharCode(code) { return code >= $a && code <= $z ? code - $a + $A : code } function mergeTextTokens(srcTokens) { for (var lastDstToken, dstTokens = [], i = 0; i < srcTokens.length; i++) { var token = srcTokens[i]; lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT ? (lastDstToken.parts[0] += token.parts[0], lastDstToken.sourceSpan.end = token.sourceSpan.end) : (lastDstToken = token, dstTokens.push(lastDstToken)) } return dstTokens } function lastOnStack(stack, element) { return stack.length > 0 && stack[stack.length - 1] === element } function createI18nMessageFactory(interpolationConfig) { var visitor = new _I18nVisitor(_expParser, interpolationConfig); return function (nodes, meaning, description) { return visitor.toI18nMessage(nodes, meaning, description) } } function _extractPlaceholderName(input) { return input.split(_CUSTOM_PH_EXP)[1] } function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) { var visitor = new _Visitor(implicitTags, implicitAttrs); return visitor.extract(nodes, interpolationConfig) } function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) { var visitor = new _Visitor(implicitTags, implicitAttrs); return visitor.merge(nodes, translations, interpolationConfig) } function _isOpeningComment(n) { return n instanceof Comment && n.value && n.value.startsWith("i18n") } function _isClosingComment(n) { return n instanceof Comment && n.value && "/i18n" === n.value } function _getI18nAttr(p) { return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR }) || null } function _splitMeaningAndDesc(i18n) { if (!i18n) return ["", ""]; var pipeIndex = i18n.indexOf("|"); return pipeIndex == -1 ? ["", i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)] } function getXmlTagDefinition(tagName) { return _TAG_DEFINITION } function digest(message) { return sha1(serializeNodes(message.nodes).join("") + ("[" + message.meaning + "]")) } function decimalDigest(message) { var visitor = new _SerializerIgnoreIcuExpVisitor, parts = message.nodes.map(function (a) { return a.visit(visitor, null) }); return computeMsgId(parts.join(""), message.meaning) } function serializeNodes(nodes) { return nodes.map(function (a) { return a.visit(serializerVisitor, null) }) } function sha1(str) { var utf8 = utf8Encode(str), words32 = stringToWords32(utf8, Endian.Big), len = 8 * utf8.length, w = new Array(80), _a = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4]; words32[len >> 5] |= 128 << 24 - len % 32, words32[(len + 64 >> 9 << 4) + 15] = len; for (var i = 0; i < words32.length; i += 16) { for (var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4], j = 0; j < 80; j++) { j < 16 ? w[j] = words32[i + j] : w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1); var _c = fk(j, b, c, d), f = _c[0], k = _c[1], temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32); _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4] } _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4] } return byteStringToHexString(words32ToByteString([a, b, c, d, e])); var _d, _e } function fk(index, b, c, d) { return index < 20 ? [b & c | ~b & d, 1518500249] : index < 40 ? [b ^ c ^ d, 1859775393] : index < 60 ? [b & c | b & d | c & d, 2400959708] : [b ^ c ^ d, 3395469782] } function fingerprint(str) { var utf8 = utf8Encode(str), _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1]; return 0 != hi || 0 != lo && 1 != lo || (hi = 319790063 ^ hi, lo ^= -1801410264), [hi, lo] } function computeMsgId(msg, meaning) { var _a = fingerprint(msg), hi = _a[0], lo = _a[1]; if (meaning) { var _b = fingerprint(meaning), him = _b[0], lom = _b[1]; _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1] } return byteStringToDecString(words32ToByteString([2147483647 & hi, lo])); var _c } function hash32(str, c) { var i, _a = [2654435769, 2654435769], a = _a[0], b = _a[1], len = str.length; for (i = 0; i + 12 <= len; i += 12) a = add32(a, wordAt(str, i, Endian.Little)), b = add32(b, wordAt(str, i + 4, Endian.Little)), c = add32(c, wordAt(str, i + 8, Endian.Little)), _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2]; return a = add32(a, wordAt(str, i, Endian.Little)), b = add32(b, wordAt(str, i + 4, Endian.Little)), c = add32(c, len), c = add32(c, wordAt(str, i + 8, Endian.Little) << 8), mix([a, b, c])[2]; var _b } function mix(_a) { var a = _a[0], b = _a[1], c = _a[2]; return a = sub32(a, b), a = sub32(a, c), a ^= c >>> 13, b = sub32(b, c), b = sub32(b, a), b ^= a << 8, c = sub32(c, a), c = sub32(c, b), c ^= b >>> 13, a = sub32(a, b), a = sub32(a, c), a ^= c >>> 12, b = sub32(b, c), b = sub32(b, a), b ^= a << 16, c = sub32(c, a), c = sub32(c, b), c ^= b >>> 5, a = sub32(a, b), a = sub32(a, c), a ^= c >>> 3, b = sub32(b, c), b = sub32(b, a), b ^= a << 10, c = sub32(c, a), c = sub32(c, b), c ^= b >>> 15, [a, b, c] } function utf8Encode(str) { for (var encoded = "", index = 0; index < str.length; index++) { var codePoint = decodeSurrogatePairs(str, index); codePoint <= 127 ? encoded += String.fromCharCode(codePoint) : codePoint <= 2047 ? encoded += String.fromCharCode(192 | codePoint >>> 6, 128 | 63 & codePoint) : codePoint <= 65535 ? encoded += String.fromCharCode(224 | codePoint >>> 12, 128 | codePoint >>> 6 & 63, 128 | 63 & codePoint) : codePoint <= 2097151 && (encoded += String.fromCharCode(240 | codePoint >>> 18, 128 | codePoint >>> 12 & 63, 128 | codePoint >>> 6 & 63, 128 | 63 & codePoint)) } return encoded } function decodeSurrogatePairs(str, index) { if (index < 0 || index >= str.length) throw new Error("index=" + index + ' is out of range in "' + str + '"'); var high = str.charCodeAt(index); if (high >= 55296 && high <= 57343 && str.length > index + 1) { var low = byteAt(str, index + 1); if (low >= 56320 && low <= 57343) return 1024 * (high - 55296) + low - 56320 + 65536 } return high } function add32(a, b) { return add32to64(a, b)[1] } function add32to64(a, b) { var low = (65535 & a) + (65535 & b), high = (a >>> 16) + (b >>> 16) + (low >>> 16); return [high >>> 16, high << 16 | 65535 & low] } function add64(_a, _b) { var ah = _a[0], al = _a[1], bh = _b[0], bl = _b[1], _c = add32to64(al, bl), carry = _c[0], l = _c[1], h = add32(add32(ah, bh), carry); return [h, l] } function sub32(a, b) { var low = (65535 & a) - (65535 & b), high = (a >> 16) - (b >> 16) + (low >> 16); return high << 16 | 65535 & low } function rol32(a, count) { return a << count | a >>> 32 - count } function rol64(_a, count) { var hi = _a[0], lo = _a[1], h = hi << count | lo >>> 32 - count, l = lo << count | hi >>> 32 - count; return [h, l] } function stringToWords32(str, endian) { for (var words32 = Array(str.length + 3 >>> 2), i = 0; i < words32.length; i++) words32[i] = wordAt(str, 4 * i, endian); return words32 } function byteAt(str, index) { return index >= str.length ? 0 : 255 & str.charCodeAt(index) } function wordAt(str, index, endian) { var word = 0; if (endian === Endian.Big) for (var i = 0; i < 4; i++) word += byteAt(str, index + i) << 24 - 8 * i; else for (var i = 0; i < 4; i++) word += byteAt(str, index + i) << 8 * i; return word } function words32ToByteString(words32) { return words32.reduce(function (str, word) { return str + word32ToByteString(word) }, "") } function word32ToByteString(word) { for (var str = "", i = 0; i < 4; i++) str += String.fromCharCode(word >>> 8 * (3 - i) & 255); return str } function byteStringToHexString(str) { for (var hex = "", i = 0; i < str.length; i++) { var b = byteAt(str, i); hex += (b >>> 4).toString(16) + (15 & b).toString(16) } return hex.toLowerCase() } function byteStringToDecString(str) { for (var decimal = "", toThePower = "1", i = str.length - 1; i >= 0; i--) decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower)), toThePower = numberTimesBigInt(256, toThePower); return decimal.split("").reverse().join("") } function addBigInt(x, y) { for (var sum = "", len = Math.max(x.length, y.length), i = 0, carry = 0; i < len || carry; i++) { var tmpSum = carry + +(x[i] || 0) + +(y[i] || 0); tmpSum >= 10 ? (carry = 1, sum += tmpSum - 10) : (carry = 0, sum += tmpSum) } return sum } function numberTimesBigInt(num, b) { for (var product = "", bToThePower = b; 0 !== num; num >>>= 1) 1 & num && (product = addBigInt(product, bToThePower)), bToThePower = addBigInt(bToThePower, bToThePower); return product } function serialize(nodes) { return nodes.map(function (node) { return node.visit(_visitor) }).join("") } function _escapeXml(text) { return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]) }, text) } function getCtypeForTag(tag) { switch (tag.toLowerCase()) { case "br": return "lb"; case "img": return "image"; default: return "x-" + tag } } function digest$1(message) { return decimalDigest(message) } function assetUrl(pkg, path, type) { return void 0 === path && (path = null), void 0 === type && (type = "src"), null == path ? "@angular/" + pkg + "/index" : "@angular/" + pkg + "/" + type + "/" + path } function resolveIdentifier(identifier) { return reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime) } function createIdentifier(identifier) { var reference = reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime); return { reference: reference } } function identifierToken(identifier) { return { identifier: identifier } } function createIdentifierToken(identifier) { return identifierToken(createIdentifier(identifier)) } function createEnumIdentifier(enumType, name) { var resolvedEnum = reflector.resolveEnum(resolveIdentifier(enumType), name); return { reference: resolvedEnum } } function expandNodes(nodes) { var expander = new _Expander; return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors) } function _expandPluralForm(ast, errors) { var children = ast.cases.map(function (c) { PLURAL_CASES.indexOf(c.value) != -1 || c.value.match(/^=\d+$/) || errors.push(new ExpansionError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", "))); var expansionResult = expandNodes(c.expression); return errors.push.apply(errors, expansionResult.errors), new Element("template", [new Attribute$1("ngPluralCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan) }), switchAttr = new Attribute$1("[ngPlural]", ast.switchValue, ast.switchValueSourceSpan); return new Element("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan) } function _expandDefaultForm(ast, errors) { var children = ast.cases.map(function (c) { var expansionResult = expandNodes(c.expression); return errors.push.apply(errors, expansionResult.errors), "other" === c.value ? new Element("template", [new Attribute$1("ngSwitchDefault", "", c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan) : new Element("template", [new Attribute$1("ngSwitchCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan) }), switchAttr = new Attribute$1("[ngSwitch]", ast.switchValue, ast.switchValueSourceSpan); return new Element("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan) } function _transformProvider(provider, _a) { var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps; return { token: provider.token, useClass: provider.useClass, useExisting: useExisting, useFactory: provider.useFactory, useValue: useValue, deps: deps, multi: provider.multi } } function _transformProviderAst(provider, _a) { var eager = _a.eager, providers = _a.providers; return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan) } function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) { var providersByToken = new Map; directives.forEach(function (directive) { var dirProvider = { token: { identifier: directive.type }, useClass: directive.type }; _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, !0, sourceSpan, targetErrors, providersByToken) }); var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent }).concat(directives.filter(function (dir) { return !dir.isComponent })); return directivesWithComponentFirst.forEach(function (directive) { _resolveProviders(directive.providers, ProviderAstType.PublicService, !1, sourceSpan, targetErrors, providersByToken), _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, !1, sourceSpan, targetErrors, providersByToken) }), providersByToken } function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) { providers.forEach(function (provider) { var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token)); if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider != !!provider.multi && targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan)), resolvedProvider) provider.multi || (resolvedProvider.providers.length = 0), resolvedProvider.providers.push(provider); else { var lifecycleHooks = provider.token.identifier && provider.token.identifier.lifecycleHooks ? provider.token.identifier.lifecycleHooks : []; resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan), targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider) } }) } function _getViewQueries(component) { var viewQueries = new Map; return isPresent(component.viewQueries) && component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query) }), viewQueries } function _getContentQueries(directives) { var contentQueries = new Map; return directives.forEach(function (directive) { isPresent(directive.queries) && directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query) }) }), contentQueries } function _addQueryToTokenMap(map, query) { query.selectors.forEach(function (token) { var entry = map.get(tokenReference(token)); entry || (entry = [], map.set(tokenReference(token), entry)), entry.push(query) }) } function isStyleUrlResolvable(url) { if (null == url || 0 === url.length || "/" == url[0]) return !1; var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP); return null === schemeMatch || "package" == schemeMatch[1] || "asset" == schemeMatch[1] } function extractStyleUrls(resolver, baseUrl, cssText) { var foundUrls = [], modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, "").replace(CSS_IMPORT_REGEXP, function () { for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; var url = m[1] || m[2]; return isStyleUrlResolvable(url) ? (foundUrls.push(resolver.resolve(baseUrl, url)), "") : m[0] }); return new StyleWithImports(modifiedCssText, foundUrls) } function _isAnimationLabel(name) { return "@" == name[0] } function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) { var ctxs = []; return CssSelector.parse(selector).forEach(function (selector) { var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames(), notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector() }).map(function (selector) { return selector.element })), possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName) }); ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute) })) }), 0 === ctxs.length ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort() } function preparseElement(ast) { var selectAttr = null, hrefAttr = null, relAttr = null, nonBindable = !1, projectAs = null; ast.attrs.forEach(function (attr) { var lcAttrName = attr.name.toLowerCase(); lcAttrName == NG_CONTENT_SELECT_ATTR ? selectAttr = attr.value : lcAttrName == LINK_STYLE_HREF_ATTR ? hrefAttr = attr.value : lcAttrName == LINK_STYLE_REL_ATTR ? relAttr = attr.value : attr.name == NG_NON_BINDABLE_ATTR ? nonBindable = !0 : attr.name == NG_PROJECT_AS && attr.value.length > 0 && (projectAs = attr.value) }), selectAttr = normalizeNgContentSelect(selectAttr); var nodeName = ast.name.toLowerCase(), type = PreparsedElementType.OTHER; return splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT ? type = PreparsedElementType.NG_CONTENT : nodeName == STYLE_ELEMENT ? type = PreparsedElementType.STYLE : nodeName == SCRIPT_ELEMENT ? type = PreparsedElementType.SCRIPT : nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE && (type = PreparsedElementType.STYLESHEET), new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) } function normalizeNgContentSelect(selectAttr) { return null === selectAttr || 0 === selectAttr.length ? "*" : selectAttr } function splitClasses(classAttrValue) { return classAttrValue.trim().split(/\s+/g) } function createElementCssSelector(elementName, matchableAttrs) { var cssSelector = new CssSelector, elNameNoNs = splitNsName(elementName)[1]; cssSelector.setElement(elNameNoNs); for (var i = 0; i < matchableAttrs.length; i++) { var attrName = matchableAttrs[i][0], attrNameNoNs = splitNsName(attrName)[1], attrValue = matchableAttrs[i][1]; if (cssSelector.addAttribute(attrNameNoNs, attrValue), attrName.toLowerCase() == CLASS_ATTR) { var classes = splitClasses(attrValue); classes.forEach(function (className) { return cssSelector.addClassName(className) }) } } return cssSelector } function _isEmptyTextNode(node) { return node instanceof Text && 0 == node.value.trim().length } function removeSummaryDuplicates(items) { var map = new Map; return items.forEach(function (item) { map.get(item.type.reference) || map.set(item.type.reference, item) }), Array.from(map.values()) } function unimplemented$2() { throw new Error("unimplemented") } function _parseAnimationDeclarationStates(stateMetadata, schema, errors) { var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, !1), defStyles = new AnimationStylesAst(normalizedStyles), states = stateMetadata.stateNameExpr.split(/\s*,\s*/); return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles) }) } function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) { var styles = new StylesCollection, transitionExprs = [], transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/); transitionStates.forEach(function (expr) { transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors)) }); var entry = _normalizeAnimationEntry(transitionStateMetadata.steps), animation = _normalizeStyleSteps(entry, stateStyles, schema, errors), animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors); 0 == errors.length && _fillAnimationAstStartingKeyframes(animationAst, styles, errors); var stepsAst = animationAst instanceof AnimationWithStepsAst ? animationAst : new AnimationSequenceAst([animationAst]); return new AnimationStateTransitionAst(transitionExprs, stepsAst) } function _parseAnimationAlias(alias, errors) { switch (alias) { case ":enter": return "void => *"; case ":leave": return "* => void"; default: return errors.push(new AnimationParseError('the transition alias value "' + alias + '" is not supported')), "* => *" } } function _parseAnimationTransitionExpr(eventStr, errors) { var expressions = []; ":" == eventStr[0] && (eventStr = _parseAnimationAlias(eventStr, errors)); var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/); if (!isPresent(match) || match.length < 4) return errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format")), expressions; var fromState = match[1], separator = match[2], toState = match[3]; expressions.push(new AnimationStateTransitionExpression(fromState, toState)); var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE; return "<" != separator[0] || isFullAnyStateExpr || expressions.push(new AnimationStateTransitionExpression(toState, fromState)), expressions } function _normalizeAnimationEntry(entry) { return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry } function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) { var offset = entry.offset; (offset > 1 || offset < 0) && errors.push(new AnimationParseError("Offset values for animations must be between 0 and 1")); var normalizedStyles = []; return entry.styles.forEach(function (styleEntry) { if ("string" == typeof styleEntry) permitStateReferences ? normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors)) : errors.push(new AnimationParseError("State based animations cannot contain references to other states")); else { var stylesObj_1 = styleEntry, normalizedStylesObj_1 = {}; Object.keys(stylesObj_1).forEach(function (propName) { var normalizedProp = schema.normalizeAnimationStyleProperty(propName), normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]), normalizationError = normalizedOutput.error; normalizationError && errors.push(new AnimationParseError(normalizationError)), normalizedStylesObj_1[normalizedProp] = normalizedOutput.value }), normalizedStyles.push(normalizedStylesObj_1) } }), normalizedStyles } function _normalizeStyleSteps(entry, stateStyles, schema, errors) { var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors); return entry instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps) } function _mergeAnimationStyles(stylesList, newItem) { if ("object" == typeof newItem && null !== newItem && stylesList.length > 0) { var lastIndex = stylesList.length - 1, lastItem = stylesList[lastIndex]; if ("object" == typeof lastItem && null !== lastItem) return void (stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem)) } stylesList.push(newItem) } function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) { var steps; if (!(entry instanceof CompileAnimationWithStepsMetadata)) return [entry]; steps = entry.steps; var combinedStyles, newSteps = []; return steps.forEach(function (step) { if (step instanceof CompileAnimationStyleMetadata) isPresent(combinedStyles) || (combinedStyles = []), _normalizeStyleMetadata(step, stateStyles, schema, errors, !0).forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry) }); else { if (isPresent(combinedStyles) && (newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles)), combinedStyles = null), step instanceof CompileAnimationAnimateMetadata) { var animateStyleValue = step.styles; animateStyleValue instanceof CompileAnimationStyleMetadata ? animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, !0) : animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata && animateStyleValue.steps.forEach(function (step) { step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, !0) }) } else if (step instanceof CompileAnimationWithStepsMetadata) { var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors); step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps) } newSteps.push(step) } }), isPresent(combinedStyles) && newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles)), newSteps } function _resolveStylesFromState(stateName, stateStyles, errors) { var styles = []; if (":" != stateName[0]) errors.push(new AnimationParseError('Animation states via styles must be prefixed with a ":"')); else { var normalizedStateName = stateName.substring(1), value = stateStyles[normalizedStateName]; isPresent(value) ? value.styles.forEach(function (stylesEntry) { "object" == typeof stylesEntry && null !== stylesEntry && styles.push(stylesEntry) }) : errors.push(new AnimationParseError('Unable to apply styles due to missing a state: "' + normalizedStateName + '"')) } return styles } function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
        var totalEntries = keyframeSequence.steps.length, totalOffsets = 0; keyframeSequence.steps.forEach(function (step) { return totalOffsets += isPresent(step.offset) ? 1 : 0 }), totalOffsets > 0 && totalOffsets < totalEntries && (errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()")), totalOffsets = totalEntries); var limit = totalEntries - 1, margin = 0 == totalOffsets ? 1 / limit : 0, rawKeyframes = [], index = 0, doSortKeyframes = !1, lastOffset = 0; keyframeSequence.steps.forEach(function (styleMetadata) { var offset = styleMetadata.offset, keyframeStyles = {}; styleMetadata.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { "offset" != prop && (keyframeStyles[prop] = entry[prop]) }) }), isPresent(offset) ? doSortKeyframes = doSortKeyframes || offset < lastOffset : offset = index == limit ? _TERMINAL_KEYFRAME : margin * index, rawKeyframes.push([offset, keyframeStyles]), lastOffset = offset, index++ }), doSortKeyframes && rawKeyframes.sort(function (a, b) {
            return a[0] <= b[0] ? -1 : 1
        }); var firstKeyframe = rawKeyframes[0]; firstKeyframe[0] != _INITIAL_KEYFRAME && rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]); var firstKeyframeStyles = firstKeyframe[1]; limit = rawKeyframes.length - 1; var lastKeyframe = rawKeyframes[limit]; lastKeyframe[0] != _TERMINAL_KEYFRAME && (rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]), limit++); for (var lastKeyframeStyles = lastKeyframe[1], i = 1; i <= limit; i++) { var entry = rawKeyframes[i], styles = entry[1]; Object.keys(styles).forEach(function (prop) { isPresent(firstKeyframeStyles[prop]) || (firstKeyframeStyles[prop] = FILL_STYLE_FLAG) }) } for (var _loop_1 = function (i) { var entry = rawKeyframes[i], styles = entry[1]; Object.keys(styles).forEach(function (prop) { isPresent(lastKeyframeStyles[prop]) || (lastKeyframeStyles[prop] = styles[prop]) }) }, i = limit - 1; i >= 0; i--) _loop_1(i); return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])) })
    } function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) { var ast, playTime = 0, startingTime = currentTime; if (entry instanceof CompileAnimationWithStepsMetadata) { var previousStyles_1, maxDuration_1 = 0, steps_1 = [], isGroup_1 = entry instanceof CompileAnimationGroupMetadata; if (entry.steps.forEach(function (entry) { var time = isGroup_1 ? startingTime : currentTime; if (entry instanceof CompileAnimationStyleMetadata) return entry.styles.forEach(function (stylesEntry) { var map = stylesEntry; Object.keys(map).forEach(function (prop) { collectedStyles.insertAtTime(prop, time, map[prop]) }) }), void (previousStyles_1 = entry.styles); var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors); if (isPresent(previousStyles_1)) { if (entry instanceof CompileAnimationWithStepsMetadata) { var startingStyles = new AnimationStylesAst(previousStyles_1); steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, "")) } else { var innerStep = innerAst; (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1) } previousStyles_1 = null } var astDuration = innerAst.playTime; currentTime += astDuration, playTime += astDuration, maxDuration_1 = Math.max(astDuration, maxDuration_1), steps_1.push(innerAst); var _a }), isPresent(previousStyles_1)) { var startingStyles = new AnimationStylesAst(previousStyles_1); steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, "")) } isGroup_1 ? (ast = new AnimationGroupAst(steps_1), playTime = maxDuration_1, currentTime = startingTime + playTime) : ast = new AnimationSequenceAst(steps_1) } else if (entry instanceof CompileAnimationAnimateMetadata) { var timings = _parseTimeExpression(entry.timings, errors), styles = entry.styles, keyframes = void 0; if (styles instanceof CompileAnimationKeyframesSequenceMetadata) keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors); else { var styleData = styles, offset = _TERMINAL_KEYFRAME, styleAst = new AnimationStylesAst(styleData.styles), keyframe = new AnimationKeyframeAst(offset, styleAst); keyframes = [keyframe] } ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing), playTime = timings.duration + timings.delay, currentTime += playTime, keyframes.forEach(function (keyframe) { return keyframe.styles.styles.forEach(function (entry) { return Object.keys(entry).forEach(function (prop) { collectedStyles.insertAtTime(prop, currentTime, entry[prop]) }) }) }) } else ast = new AnimationStepAst(null, [], 0, 0, ""); return ast.playTime = playTime, ast.startTime = startingTime, ast } function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) { if (ast instanceof AnimationStepAst && ast.keyframes.length > 0) { var keyframes = ast.keyframes; if (1 == keyframes.length) { var endKeyframe = keyframes[0], startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors); ast.keyframes = [startKeyframe, endKeyframe] } } else ast instanceof AnimationWithStepsAst && ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors) }) } function _parseTimeExpression(exp, errors) { var duration, regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i, delay = 0, easing = null; if ("string" == typeof exp) { var matches = exp.match(regex); if (null === matches) return errors.push(new AnimationParseError('The provided timing value "' + exp + '" is invalid.')), new _AnimationTimings(0, 0, null); var durationMatch = parseFloat(matches[1]), durationUnit = matches[2]; "s" == durationUnit && (durationMatch *= _ONE_SECOND), duration = Math.floor(durationMatch); var delayMatch = matches[3], delayUnit = matches[4]; if (isPresent(delayMatch)) { var delayVal = parseFloat(delayMatch); isPresent(delayUnit) && "s" == delayUnit && (delayVal *= _ONE_SECOND), delay = Math.floor(delayVal) } var easingVal = matches[5]; isBlank(easingVal) || (easing = easingVal) } else duration = exp; return new _AnimationTimings(duration, delay, easing) } function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) { var values = {}, endTime = startTime + duration; return endKeyframe.styles.styles.forEach(function (styleData) { Object.keys(styleData).forEach(function (prop) { var val = styleData[prop]; if ("offset" != prop) { var resultEntry, nextEntry, value, resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime); isPresent(resultIndex) ? (resultEntry = collectedStyles.getByIndex(prop, resultIndex), value = resultEntry.value, nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1)) : value = FILL_STYLE_FLAG, isPresent(nextEntry) && !nextEntry.matches(endTime, val) && errors.push(new AnimationParseError('The animated CSS property "' + prop + '" unexpectedly changes between steps "' + resultEntry.time + 'ms" and "' + endTime + 'ms" at "' + nextEntry.time + 'ms"')), values[prop] = value } }) }), new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values])) } function createUrlResolverWithoutPackagePrefix() { return new UrlResolver } function createOfflineCompileUrlResolver() { return new UrlResolver(".") } function getUrlScheme(url) { var match = _split(url); return match && match[_ComponentIndex.Scheme] || "" } function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) { var out = []; return isPresent(opt_scheme) && out.push(opt_scheme + ":"), isPresent(opt_domain) && (out.push("//"), isPresent(opt_userInfo) && out.push(opt_userInfo + "@"), out.push(opt_domain), isPresent(opt_port) && out.push(":" + opt_port)), isPresent(opt_path) && out.push(opt_path), isPresent(opt_queryData) && out.push("?" + opt_queryData), isPresent(opt_fragment) && out.push("#" + opt_fragment), out.join("") } function _split(uri) { return uri.match(_splitRe) } function _removeDotSegments(path) { if ("/" == path) return "/"; for (var leadingSlash = "/" == path[0] ? "/" : "", trailingSlash = "/" === path[path.length - 1] ? "/" : "", segments = path.split("/"), out = [], up = 0, pos = 0; pos < segments.length; pos++) { var segment = segments[pos]; switch (segment) { case "": case ".": break; case "..": out.length > 0 ? out.pop() : up++; break; default: out.push(segment) } } if ("" == leadingSlash) { for (; up-- > 0;) out.unshift(".."); 0 === out.length && out.push(".") } return leadingSlash + out.join("/") + trailingSlash } function _joinAndCanonicalizePath(parts) { var path = parts[_ComponentIndex.Path]; return path = isBlank(path) ? "" : _removeDotSegments(path), parts[_ComponentIndex.Path] = path, _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]) } function _resolveUrl(base, url) { var parts = _split(encodeURI(url)), baseParts = _split(base); if (isPresent(parts[_ComponentIndex.Scheme])) return _joinAndCanonicalizePath(parts); parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme]; for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) isBlank(parts[i]) && (parts[i] = baseParts[i]); if ("/" == parts[_ComponentIndex.Path][0]) return _joinAndCanonicalizePath(parts); var path = baseParts[_ComponentIndex.Path]; isBlank(path) && (path = "/"); var index = path.lastIndexOf("/"); return path = path.substring(0, index + 1) + parts[_ComponentIndex.Path], parts[_ComponentIndex.Path] = path, _joinAndCanonicalizePath(parts) } function isDirectiveMetadata(type) { return type instanceof _angular_core.Directive } function replaceVarInExpression(varName, newValue, expression) { var transformer = new _ReplaceVariableTransformer(varName, newValue); return expression.visitExpression(transformer, null) } function findReadVarNames(stmts) { var finder = new _VariableFinder; return finder.visitAllStatements(stmts, null), finder.varNames } function variable(name, type) { return void 0 === type && (type = null), new ReadVarExpr(name, type) } function importExpr(id, typeParams) { return void 0 === typeParams && (typeParams = null), new ExternalExpr(id, null, typeParams) } function importType(id, typeParams, typeModifiers) { return void 0 === typeParams && (typeParams = null), void 0 === typeModifiers && (typeModifiers = null), isPresent(id) ? expressionType(importExpr(id), typeParams, typeModifiers) : null } function expressionType(expr, typeParams, typeModifiers) { return void 0 === typeParams && (typeParams = null), void 0 === typeModifiers && (typeModifiers = null), isPresent(expr) ? new ExpressionType(expr, typeParams, typeModifiers) : null } function literalArr(values, type) { return void 0 === type && (type = null), new LiteralArrayExpr(values, type) } function literalMap(values, type, quoted) { return void 0 === type && (type = null), void 0 === quoted && (quoted = !1), new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1], quoted) }), type) } function not(expr) { return new NotExpr(expr) } function fn(params, body, type) { return void 0 === type && (type = null), new FunctionExpr(params, body, type) } function literal(value, type) { return void 0 === type && (type = null), new LiteralExpr(value, type) } function createCheckBindingField(builder) { var bindingId = "" + builder.fields.length, fieldExpr = createBindFieldExpr(bindingId); return builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private])), builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(importExpr(createIdentifier(Identifiers.UNINITIALIZED))).toStmt()), new CheckBindingField(fieldExpr, bindingId) } function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) { var condition = importExpr(createIdentifier(Identifiers.checkBinding)).callFn([throwOnChangeVar, fieldExpr, evalResult.currValExpr]); return evalResult.forceUpdate && (condition = evalResult.forceUpdate.or(condition)), evalResult.stmts.concat([new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt()]))]) } function createBindFieldExpr(bindingId) { return THIS_EXPR.prop("_expr_" + bindingId) } function createDiTokenExpression(token) { return isPresent(token.value) ? literal(token.value) : importExpr(token.identifier) } function createInlineArray(values) { if (0 === values.length) return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY)); var log2 = Math.log(values.length) / Math.log(2), index = Math.ceil(log2), identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] : Identifiers.InlineArrayDynamic, identifier = createIdentifier(identifierSpec); return importExpr(identifier).instantiate([literal(values.length)].concat(values)) } function createPureProxy(fn, argCount, pureProxyProp, builder) { builder.fields.push(new ClassField(pureProxyProp.name, null)); var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null; if (!pureProxyId) throw new Error("Unsupported number of argument for pure functions: " + argCount); builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(createIdentifier(pureProxyId)).callFn([fn])).toStmt()) } function createEnumExpression(enumType, enumValue) { var enumName = Object.keys(enumType.runtime).find(function (propName) { return enumType.runtime[propName] === enumValue }); if (!enumName) throw new Error("Unknown enum value " + enumValue + " in " + enumType.name); return importExpr(createEnumIdentifier(enumType, enumName)) } function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) { var currValExpr = createCurrValueExpr(bindingId), stmts = []; nameResolver || (nameResolver = new DefaultNameResolver); var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, (!1)), outputExpr = expression.visit(visitor, _Mode.Expression); if (!outputExpr) return null; if (visitor.temporaryCount) for (var i = 0; i < visitor.temporaryCount; i++) stmts.push(temporaryDeclaration(bindingId, i)); if (visitor.needsValueUnwrapper) { var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod("reset", []).toStmt(); stmts.push(initValueUnwrapperStmt) } return stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final])), visitor.needsValueUnwrapper ? new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop("hasWrappedValue")) : new ConvertPropertyBindingResult(stmts, currValExpr, null) } function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) { nameResolver || (nameResolver = new DefaultNameResolver); var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, (!0)), actionStmts = []; flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts), prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts); var lastIndex = actionStmts.length - 1, preventDefaultVar = null; if (lastIndex >= 0) { var lastStatement = actionStmts[lastIndex], returnExpr = convertStmtIntoExpression(lastStatement); returnExpr && (preventDefaultVar = createPreventDefaultVar(bindingId), actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(!1))).toDeclStmt(null, [StmtModifier.Final])) } return new ConvertActionBindingResult(actionStmts, preventDefaultVar) } function createSharedBindingVariablesIfNeeded(stmts) { var unwrapperStmts = [], readVars = findReadVarNames(stmts); return readVars.has(VAL_UNWRAPPER_VAR.name) && unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [StmtModifier.Final])), unwrapperStmts } function temporaryName(bindingId, temporaryNumber) { return "tmp_" + bindingId + "_" + temporaryNumber } function temporaryDeclaration(bindingId, temporaryNumber) { return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR) } function prependTemporaryDecls(temporaryCount, bindingId, statements) { for (var i = temporaryCount - 1; i >= 0; i--) statements.unshift(temporaryDeclaration(bindingId, i)) } function ensureStatementMode(mode, ast) { if (mode !== _Mode.Statement) throw new Error("Expected a statement, but saw " + ast) } function ensureExpressionMode(mode, ast) { if (mode !== _Mode.Expression) throw new Error("Expected an expression, but saw " + ast) } function convertToStatementIfNeeded(mode, expr) { return mode === _Mode.Statement ? expr.toStmt() : expr } function flattenStatements(arg, output) { Array.isArray(arg) ? arg.forEach(function (entry) { return flattenStatements(entry, output) }) : output.push(arg) } function createCachedLiteralArray(builder, values) { if (0 === values.length) return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY)); for (var proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length), proxyParams = [], proxyReturnEntries = [], i = 0; i < values.length; i++) { var paramName = "p" + i; proxyParams.push(new FnParam(paramName)), proxyReturnEntries.push(variable(paramName)) } return createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder), proxyExpr.callFn(values) } function createCachedLiteralMap(builder, entries) { if (0 === entries.length) return importExpr(createIdentifier(Identifiers.EMPTY_MAP)); for (var proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length), proxyParams = [], proxyReturnEntries = [], values = [], i = 0; i < entries.length; i++) { var paramName = "p" + i; proxyParams.push(new FnParam(paramName)), proxyReturnEntries.push([entries[i][0], variable(paramName)]), values.push(entries[i][1]) } return createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder), proxyExpr.callFn(values) } function createCurrValueExpr(bindingId) { return variable("currVal_" + bindingId) } function createPreventDefaultVar(bindingId) { return variable("pd_" + bindingId) } function convertStmtIntoExpression(stmt) { return stmt instanceof ExpressionStatement ? stmt.expr : stmt instanceof ReturnStatement ? stmt.value : null } function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) { var updateStmts = [], renderer = view.prop("renderer"); switch (renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression), boundProp.type) { case PropertyBindingType.Property: logBindingUpdate && updateStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfo)).callFn([renderer, renderElement, literal(boundProp.name), renderValue]).toStmt()), updateStmts.push(renderer.callMethod("setElementProperty", [renderElement, literal(boundProp.name), renderValue]).toStmt()); break; case PropertyBindingType.Attribute: renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod("toString", [])), updateStmts.push(renderer.callMethod("setElementAttribute", [renderElement, literal(boundProp.name), renderValue]).toStmt()); break; case PropertyBindingType.Class: updateStmts.push(renderer.callMethod("setElementClass", [renderElement, literal(boundProp.name), renderValue]).toStmt()); break; case PropertyBindingType.Style: var strValue = renderValue.callMethod("toString", []); isPresent(boundProp.unit) && (strValue = strValue.plus(literal(boundProp.unit))), renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue), updateStmts.push(renderer.callMethod("setElementStyle", [renderElement, literal(boundProp.name), renderValue]).toStmt()); break; case PropertyBindingType.Animation: throw new Error("Illegal state: Should not come here!") } return updateStmts } function sanitizedValue(view, boundProp, renderValue, securityContextExpression) { if (boundProp.securityContext === _angular_core.SecurityContext.NONE) return renderValue; if (boundProp.needsRuntimeSecurityContext || (securityContextExpression = createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext)), !securityContextExpression) throw new Error("internal error, no SecurityContext given " + boundProp.name); var ctx = view.prop("viewUtils").prop("sanitizer"), args = [securityContextExpression, renderValue]; return ctx.callMethod("sanitize", args) } function triggerAnimation(view, componentView, boundProp, boundOutputs, eventListener, renderElement, renderValue, lastRenderValue) { var detachStmts = [], updateStmts = [], animationName = boundProp.name, animationFnExpr = componentView.prop("componentType").prop("animations").key(literal(animationName)), emptyStateValue = literal(EMPTY_STATE), unitializedValue = importExpr(createIdentifier(Identifiers.UNINITIALIZED)), animationTransitionVar = variable("animationTransition_" + animationName); updateStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue), renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)])).toDeclStmt()), detachStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue])).toDeclStmt()); var registerStmts = [], animationStartMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && "start" == event.phase }); animationStartMethodExists && registerStmts.push(animationTransitionVar.callMethod("onStart", [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, "start"))])]).toStmt()); var animationDoneMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && "done" == event.phase }); return animationDoneMethodExists && registerStmts.push(animationTransitionVar.callMethod("onDone", [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, "done"))])]).toStmt()), updateStmts.push.apply(updateStmts, registerStmts), detachStmts.push.apply(detachStmts, registerStmts), { updateStmts: updateStmts, detachStmts: detachStmts } } function createClassStmt(config) { var parentArgs = config.parentArgs || [], superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [], builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]), ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts)); return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []) } function concatClassBuilderParts(builders) { return { fields: (_a = []).concat.apply(_a, builders.map(function (builder) { return builder.fields || [] })), methods: (_b = []).concat.apply(_b, builders.map(function (builder) { return builder.methods || [] })), getters: (_c = []).concat.apply(_c, builders.map(function (builder) { return builder.getters || [] })), ctorStmts: (_d = []).concat.apply(_d, builders.map(function (builder) { return builder.ctorStmts || [] })) }; var _a, _b, _c, _d } function addNgDoCheckMethod(builder) { var changedVar = variable("changed"), stmts = [changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(), THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(!1)).toStmt()], lifecycleStmts = []; if (builder.genChanges) { var onChangesStmts = []; builder.ngOnChanges && onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngOnChanges", [THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt()), builder.compilerConfig.logBindingUpdate && onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([VIEW_VAR.prop("renderer"), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt()), onChangesStmts.push(RESET_CHANGES_STMT), lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts)) } builder.ngOnInit && lifecycleStmts.push(new IfStmt(VIEW_VAR.prop("numberOfChecks").identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngOnInit", []).toStmt()])), builder.ngDoCheck && lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngDoCheck", []).toStmt()), lifecycleStmts.length > 0 && stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts)), stmts.push(new ReturnStatement(changedVar)), builder.methods.push(new ClassMethod("ngDoCheck", [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)], stmts, BOOL_TYPE)) } function addCheckInputMethod(input, builder) { var field = createCheckBindingField(builder), onChangeStatements = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(!0)).toStmt(), THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt()]; builder.genChanges && onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(importExpr(createIdentifier(Identifiers.SimpleChange)).instantiate([field.expression, CURR_VALUE_VAR])).toStmt()); var methodBody = createCheckBindingStmt({ currValExpr: CURR_VALUE_VAR, forceUpdate: FORCE_UPDATE_VAR, stmts: [] }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements); builder.methods.push(new ClassMethod("check_" + input, [new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE), new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE)], methodBody)) } function addCheckHostMethod(hostProps, hostEvents, builder) { var stmts = [], methodParams = [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)]; hostProps.forEach(function (hostProp, hostPropIdx) { var field = createCheckBindingField(builder), evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId); if (evalResult) { var securityContextExpr; hostProp.needsRuntimeSecurityContext && (securityContextExpr = variable("secCtx_" + methodParams.length), methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))))); var checkBindingStmts; if (hostProp.isAnimation) { var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts; checkBindingStmts = updateStmts, (_b = builder.detachStmts).push.apply(_b, detachStmts) } else checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr); stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts)); var _b } }), builder.methods.push(new ClassMethod("checkHost", methodParams, stmts)) } function addHandleEventMethod(hostListeners, builder) { var resultVar = variable("result"), actionStmts = [resultVar.set(literal(!0)).toDeclStmt(BOOL_TYPE)]; hostListeners.forEach(function (hostListener, eventIdx) { var evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx), trueStmts = evalResult.stmts; evalResult.preventDefault && trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt()), actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts)) }), actionStmts.push(new ReturnStatement(resultVar)), builder.methods.push(new ClassMethod("handleEvent", [new FnParam(EVENT_NAME_VAR.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], actionStmts, BOOL_TYPE)) } function addSubscribeMethod(dirMeta, builder) { var methodParams = [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)], stmts = [THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()]; Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) { var eventName = dirMeta.outputs[emitterPropName], paramName = "emit" + emitterIdx; methodParams.push(new FnParam(paramName, BOOL_TYPE)); var subscriptionFieldName = "subscription" + emitterIdx; builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE)), stmts.push(new IfStmt(variable(paramName), [THIS_EXPR.prop(subscriptionFieldName).set(THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(emitterPropName).callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME).callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])])).toStmt()])), builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName).and(THIS_EXPR.prop(subscriptionFieldName).callMethod("unsubscribe", [])).toStmt()) }), builder.methods.push(new ClassMethod("subscribe", methodParams, stmts)) } function parseHostBindings(dirMeta, exprParser, schemaRegistry) { var errors = [], parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors), moduleUrl = identifierModuleUrl(dirMeta.type), sourceFileName = moduleUrl ? "in Directive " + identifierName(dirMeta.type) + " in " + moduleUrl : "in Directive " + identifierName(dirMeta.type), sourceFile = new ParseSourceFile("", sourceFileName), sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null)), parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan), parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan); return new ParseResult(parsedHostProps, parsedHostListeners, errors) } function reportParseErrors(parseErrors, console) { var warnings = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.WARNING }), errors = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.FATAL }); if (warnings.length > 0 && this._console.warn("Directive parse warnings:\n" + warnings.join("\n")), errors.length > 0) throw new Error("Directive parse errors:\n" + errors.join("\n")) } function hasLifecycleHook(hook, token) { return reflector.hasLifecycleHook(token, getHookName(hook)) } function getHookName(hook) { switch (hook) { case LifecycleHooks.OnInit: return "ngOnInit"; case LifecycleHooks.OnDestroy: return "ngOnDestroy"; case LifecycleHooks.DoCheck: return "ngDoCheck"; case LifecycleHooks.OnChanges: return "ngOnChanges"; case LifecycleHooks.AfterContentInit: return "ngAfterContentInit"; case LifecycleHooks.AfterContentChecked: return "ngAfterContentChecked"; case LifecycleHooks.AfterViewInit: return "ngAfterViewInit"; case LifecycleHooks.AfterViewChecked: return "ngAfterViewChecked" } } function _isNgModuleMetadata(obj) { return obj instanceof _angular_core.NgModule } function _isPipeMetadata(type) { return type instanceof _angular_core.Pipe } function flattenArray(tree, out) { if (void 0 === out && (out = []), tree) for (var i = 0; i < tree.length; i++) { var item = _angular_core.resolveForwardRef(tree[i]); Array.isArray(item) ? flattenArray(item, out) : out.push(item) } return out } function dedupeArray(array) { return array ? Array.from(new Set(array)) : [] } function flattenAndDedupeArray(tree) { return dedupeArray(flattenArray(tree)) } function isValidType(value) { return value instanceof StaticSymbol || value instanceof _angular_core.Type } function componentModuleUrl(reflector, type, cmpMetadata) { if (type instanceof StaticSymbol) return type.filePath; var moduleId = cmpMetadata.moduleId; if ("string" == typeof moduleId) { var scheme = getUrlScheme(moduleId); return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX } if (null !== moduleId && void 0 !== moduleId) throw new SyntaxError('moduleId should be a string in "' + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\nIf you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc."); return reflector.importUri(type) } function extractIdentifiers(value, targetIdentifiers) { visitValue(value, new _CompileValueConverter, targetIdentifiers) } function stringifyType(type) { return type instanceof StaticSymbol ? type.name + " in " + type.filePath : stringify(type) } function convertValueToOutputAst(value, type) { return void 0 === type && (type = null), visitValue(value, new _ValueOutputAstTransformer, type) } function escapeIdentifier(input, escapeDollar, alwaysQuote) { if (void 0 === alwaysQuote && (alwaysQuote = !0), isBlank(input)) return null; var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () { for (var match = [], _i = 0; _i < arguments.length; _i++) match[_i - 0] = arguments[_i]; return "$" == match[0] ? escapeDollar ? "\\$" : "$" : "\n" == match[0] ? "\\n" : "\r" == match[0] ? "\\r" : "\\" + match[0] }), requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body); return requiresQuotes ? "'" + body + "'" : body } function _createIndent(count) { for (var res = "", i = 0; i < count; i++) res += "  "; return res } function debugOutputAstAsTypeScript(ast) { var converter = new _TsEmitterVisitor(_debugModuleUrl), ctx = EmitterVisitorContext.createRoot([]), asts = Array.isArray(ast) ? ast : [ast]; return asts.forEach(function (ast) { if (ast instanceof Statement) ast.visitStatement(converter, ctx); else if (ast instanceof Expression) ast.visitExpression(converter, ctx); else { if (!(ast instanceof Type$1)) throw new Error("Don't know how to print debug info for " + ast); ast.visitType(converter, ctx) } }), ctx.toSource() } function registerContext(ctx, specs) { for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) { var spec = specs_1[_i]; SECURITY_SCHEMA[spec.toLowerCase()] = ctx } } function _isPixelDimensionStyle(prop) { switch (prop) { case "width": case "height": case "minWidth": case "minHeight": case "maxWidth": case "maxHeight": case "left": case "top": case "bottom": case "right": case "fontSize": case "outlineWidth": case "outlineOffset": case "paddingTop": case "paddingLeft": case "paddingBottom": case "paddingRight": case "marginTop": case "marginLeft": case "marginBottom": case "marginRight": case "borderRadius": case "borderWidth": case "borderTopWidth": case "borderLeftWidth": case "borderRightWidth": case "borderBottomWidth": case "textIndent": return !0; default: return !1 } } function stripComments(input) { return input.replace(_commentRe, "") } function extractSourceMappingUrl(input) { var matcher = input.match(_sourceMappingUrlRe); return matcher ? matcher[0] : "" } function processRules(input, ruleCallback) {
        var inputWithEscapedBlocks = escapeBlocks(input), nextBlockIndex = 0; return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
            for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; var selector = m[2], content = "", suffix = m[4], contentPrefix = ""; suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER) && (content = inputWithEscapedBlocks.blocks[nextBlockIndex++],
            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1), contentPrefix = "{"); var rule = ruleCallback(new CssRule(selector, content)); return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix
        })
    } function escapeBlocks(input) { for (var inputParts = input.split(_curlyRe), resultParts = [], escapedBlocks = [], bracketCount = 0, currentBlockParts = [], partIndex = 0; partIndex < inputParts.length; partIndex++) { var part = inputParts[partIndex]; part == CLOSE_CURLY && bracketCount--, bracketCount > 0 ? currentBlockParts.push(part) : (currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER), currentBlockParts = []), resultParts.push(part)), part == OPEN_CURLY && bracketCount++ } return currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER)), new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks) } function getStylesVarName(component) { var result = "styles"; return component && (result += "_" + identifierName(component.type)), result } function getPropertyInView(property, callingView, definedView) { if (callingView === definedView) return property; for (var viewProp = THIS_EXPR, currView = callingView; currView !== definedView && isPresent(currView.declarationElement.view) ;) currView = currView.declarationElement.view, viewProp = viewProp.prop("parentView"); if (currView !== definedView) throw new Error("Internal error: Could not calculate a property in a parent view: " + property); return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null) } function injectFromViewParentInjector(view, token, optional) { var viewExpr; viewExpr = view.viewType === ViewType.HOST ? THIS_EXPR : THIS_EXPR.prop("parentView"); var args = [createDiTokenExpression(token), THIS_EXPR.prop("parentIndex")]; return optional && args.push(NULL_EXPR), viewExpr.callMethod("injectorGet", args) } function getViewClassName(component, embeddedTemplateIndex) { return "View_" + identifierName(component.type) + embeddedTemplateIndex } function getHandleEventMethodName(elementIndex) { return "handleEvent_" + elementIndex } function createQueryValues(viewValues) { return ListWrapper.flatten(viewValues.values.map(function (entry) { return entry instanceof ViewQueryValues ? mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry)) : entry })) } function mapNestedViews(viewContainer, view, expressions) { var adjustedExpressions = expressions.map(function (expr) { return replaceVarInExpression(THIS_EXPR.name, variable("nestedView"), expr) }); return viewContainer.callMethod("mapNestedViews", [variable(view.className), fn([new FnParam("nestedView", view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)]) } function createQueryList(query, directiveInstance, propertyName, compileView) { compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]))); var expr = THIS_EXPR.prop(propertyName); return compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([])).toStmt()), expr } function addQueryToTokenMap(map, query) { query.meta.selectors.forEach(function (selector) { var entry = map.get(tokenReference(selector)); entry || (entry = [], map.set(tokenReference(selector), entry)), entry.push(query) }) } function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) { var indexCondition; return indexCondition = childNodeCount > 0 ? literal(nodeIndex).lowerEquals(InjectMethodVars$1.requestNodeIndex).and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount))) : literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex), new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]) } function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) { var resolvedProviderValueExpr, type, view = compileElement.view; if (isMulti ? (resolvedProviderValueExpr = literalArr(providerValueExpressions), type = new ArrayType(DYNAMIC_TYPE)) : (resolvedProviderValueExpr = providerValueExpressions[0], type = providerValueExpressions[0].type), type || (type = DYNAMIC_TYPE), isEager) view.fields.push(new ClassField(propName, type)), view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt()); else { var internalField = "_" + propName; view.fields.push(new ClassField(internalField, type)); var getter = new CompileMethod(view); getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()])), getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField))), view.getters.push(new ClassGetter(propName, getter.finish(), type)) } return THIS_EXPR.prop(propName) } function _findPipeMeta(view, name) { for (var pipeMeta = null, i = view.pipeMetas.length - 1; i >= 0; i--) { var localPipeMeta = view.pipeMetas[i]; if (localPipeMeta.name == name) { pipeMeta = localPipeMeta; break } } if (!pipeMeta) throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!"); return pipeMeta } function getViewType(component, embeddedTemplateIndex) { return embeddedTemplateIndex > 0 ? ViewType.EMBEDDED : component.isHost ? ViewType.HOST : ViewType.COMPONENT } function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) { var usedEvents = collectEvents(boundEvents, directives); return !!usedEvents.size && (bindToRenderer && subscribeToRenderEvents(usedEvents, compileElement), subscribeToDirectiveEvents(usedEvents, directives, compileElement), generateHandleEventMethod(boundEvents, directives, compileElement), !0) } function collectEvents(boundEvents, directives) { var usedEvents = new Map; return boundEvents.forEach(function (event) { usedEvents.set(event.fullName, event) }), directives.forEach(function (dirAst) { dirAst.hostEvents.forEach(function (event) { usedEvents.set(event.fullName, event) }) }), usedEvents } function subscribeToRenderEvents(usedEvents, compileElement) { var eventAndTargetExprs = []; if (usedEvents.forEach(function (event) { event.phase || eventAndTargetExprs.push(literal(event.name), literal(event.target)) }), eventAndTargetExprs.length) { var disposableVar = variable("disposable_" + compileElement.view.disposables.length); compileElement.view.disposables.push(disposableVar), compileElement.view.createMethod.addStmt(disposableVar.set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs), handleEventExpr(compileElement)])).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private])) } } function subscribeToDirectiveEvents(usedEvents, directives, compileElement) { var usedEventNames = Array.from(usedEvents.keys()); directives.forEach(function (dirAst) { var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference); compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement))) }) } function generateHandleEventMethod(boundEvents, directives, compileElement) { var hasComponentHostListener = directives.some(function (dirAst) { return dirAst.hostEvents.some(function (event) { return dirAst.directive.isComponent }) }), markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR, handleEventStmts = new CompileMethod(compileElement.view); handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), handleEventStmts.push(markPathToRootStart.callMethod("markPathToRootAsCheckOnce", []).toStmt()); var eventNameVar = variable("eventName"), resultVar = variable("result"); handleEventStmts.push(resultVar.set(literal(!0)).toDeclStmt(BOOL_TYPE)), directives.forEach(function (dirAst, dirIdx) { var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference); dirAst.hostEvents.length > 0 && handleEventStmts.push(resultVar.set(DirectiveWrapperExpressions.handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event).and(resultVar)).toStmt()) }), boundEvents.forEach(function (renderEvent, renderEventIdx) { var evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx), trueStmts = evalResult.stmts; evalResult.preventDefault && trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt()), handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts)) }), handleEventStmts.push(new ReturnStatement(resultVar)), compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [new FnParam(eventNameVar.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], handleEventStmts.finish(), BOOL_TYPE)) } function handleEventExpr(compileElement) { var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex); return THIS_EXPR.callMethod("eventHandler", [THIS_EXPR.prop(handleEventMethodName)]) } function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) { var view = compileElement.view, lifecycleHooks = directiveMeta.type.lifecycleHooks, afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod; afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1 && afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod("ngAfterContentInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1 && afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterContentChecked", []).toStmt()) } function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) { var view = compileElement.view, lifecycleHooks = directiveMeta.type.lifecycleHooks, afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod; afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1 && afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod("ngAfterViewInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1 && afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterViewChecked", []).toStmt()) } function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) { compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance)), compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode)) } function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) { var onDestroyMethod = compileElement.view.destroyMethod; onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), provider.providerType !== ProviderAstType.Directive && provider.providerType !== ProviderAstType.Component && provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && onDestroyMethod.addStmt(providerInstance.callMethod("ngOnDestroy", []).toStmt()) } function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) { var onDestroyMethod = view.destroyMethod; pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && onDestroyMethod.addStmt(pipeInstance.callMethod("ngOnDestroy", []).toStmt()) } function bindRenderText(boundText, compileNode, view) { var valueField = createCheckBindingField(view), evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId); return evalResult ? (view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText), void view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop("renderer").callMethod("setText", [compileNode.renderNode, evalResult.currValExpr]).toStmt()]))) : null } function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) { var view = compileElement.view, renderNode = compileElement.renderNode; boundProps.forEach(function (boundProp) { var bindingField = createCheckBindingField(view); view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp); var evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId); if (evalResult) { var checkBindingStmts = [], compileMethod = view.detectChangesRenderPropertiesMethod; switch (boundProp.type) { case PropertyBindingType.Property: case PropertyBindingType.Attribute: case PropertyBindingType.Class: case PropertyBindingType.Style: checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate)); break; case PropertyBindingType.Animation: compileMethod = view.animationBindingsMethod; var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) : importExpr(createIdentifier(Identifiers.noop))).callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts; checkBindingStmts.push.apply(checkBindingStmts, updateStmts), view.detachMethod.addStmts(detachStmts) } compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts)) } }) } function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) { var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) { return boundProp.needsRuntimeSecurityContext }).map(function (boundProp) { var ctx; switch (boundProp.type) { case PropertyBindingType.Property: ctx = schemaRegistry.securityContext(elementName, boundProp.name, !1); break; case PropertyBindingType.Attribute: ctx = schemaRegistry.securityContext(elementName, boundProp.name, !0); break; default: throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name) } return createEnumExpression(Identifiers.SecurityContext, ctx) }); compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs)) } function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) { var view = compileElement.view, detectChangesInInputsMethod = view.detectChangesInInputsMethod; detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), directiveAst.inputs.forEach(function (input, inputIdx) { var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx; detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input); var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId); evalResult && (detectChangesInInputsMethod.addStmts(evalResult.stmts), detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod("check_" + input.directiveName, [evalResult.currValExpr, DetectChangesVars.throwOnChange, evalResult.forceUpdate || literal(!1)]).toStmt())) }); var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection), directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange), directiveDetectChangesStmt = isOnPushComp ? new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod("markAsCheckOnce", []).toStmt()]) : directiveDetectChangesExpr.toStmt(); detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt) } function bindView(view, parsedTemplate, schemaRegistry) { var visitor = new ViewBinderVisitor(view, schemaRegistry); templateVisitAll(visitor, parsedTemplate), view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view) }) } function buildView(view, template, targetDependencies) { var builderVisitor = new ViewBuilderVisitor(view, targetDependencies), parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent; return templateVisitAll(builderVisitor, template, parentEl), view.viewType !== ViewType.EMBEDDED && view.viewType !== ViewType.HOST || (view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode()), builderVisitor.nestedViewCount } function finishView(view, targetStatements) { view.afterNodes(), createViewTopLevelStmts(view, targetStatements), view.nodes.forEach(function (node) { node instanceof CompileElement && node.hasEmbeddedView && finishView(node.embeddedView, targetStatements) }) } function _getOuterContainerOrSelf(node) { for (var view = node.view; _isNgContainer(node.parent, view) ;) node = node.parent; return node } function _getOuterContainerParentOrSelf(el) { for (var view = el.view; _isNgContainer(el, view) ;) el = el.parent; return el } function _isNgContainer(node, view) { return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view } function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) { var mapResult = {}; Object.keys(declaredHtmlAttrs).forEach(function (key) { mapResult[key] = declaredHtmlAttrs[key] }), directives.forEach(function (directiveMeta) { Object.keys(directiveMeta.hostAttributes).forEach(function (name) { var value = directiveMeta.hostAttributes[name], prevValue = mapResult[name]; mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value }) }); var arrResult = []; return Object.keys(mapResult).sort().forEach(function (attrName) { arrResult.push(attrName, mapResult[attrName]) }), arrResult } function _readHtmlAttrs(attrs) { var htmlAttrs = {}; return attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value }), htmlAttrs } function mergeAttributeValue(attrName, attrValue1, attrValue2) { return attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR ? attrValue1 + " " + attrValue2 : attrValue2 } function createViewTopLevelStmts(view, targetStatements) { var nodeDebugInfosVar = NULL_EXPR; view.genConfig.genDebugInfo && (nodeDebugInfosVar = variable("nodeDebugInfos_" + identifierName(view.component.type) + view.viewIndex), targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]))); var renderCompTypeVar = variable("renderType_" + identifierName(view.component.type)); if (0 === view.viewIndex) { var templateUrlInfo = void 0; templateUrlInfo = view.component.template.templateUrl == identifierModuleUrl(view.component.type) ? identifierModuleUrl(view.component.type) + " class " + identifierName(view.component.type) + " - inline template" : view.component.template.templateUrl, targetStatements.push(renderCompTypeVar.set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([literal(view.genConfig.genDebugInfo ? templateUrlInfo : ""), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnExp] }))])).toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType)))) } var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar); targetStatements.push(viewClass) } function createStaticNodeDebugInfo(node) { var compileElement = node instanceof CompileElement ? node : null, providerTokens = [], componentToken = NULL_EXPR, varTokenEntries = []; return isPresent(compileElement) && (providerTokens = compileElement.getProviderTokens(), isPresent(compileElement.component) && (componentToken = createDiTokenExpression(identifierToken(compileElement.component.type))), Object.keys(compileElement.referenceTokens).forEach(function (varName) { var token = compileElement.referenceTokens[varName]; varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]) })), importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const])) } function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) { var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE), new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)], superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex, ViewConstructorVars.parentElement, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))]; view.genConfig.genDebugInfo && superConstructorArgs.push(nodeDebugInfosVar), view.viewType === ViewType.EMBEDDED && (viewConstructorArgs.push(new FnParam("declaredViewContainer", importType(createIdentifier(Identifiers.ViewContainer)))), superConstructorArgs.push(variable("declaredViewContainer"))); var viewMethods = [new ClassMethod("createInternal", [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])), new ClassMethod("injectorGetInternal", [new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE), new ClassMethod("detectChangesInternal", [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod("dirtyParentQueriesInternal", [], view.dirtyParentQueriesMethod.finish()), new ClassMethod("destroyInternal", [], generateDestroyMethod(view)), new ClassMethod("detachInternal", [], view.detachMethod.finish()), generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view), generateCreateEmbeddedViewsMethod(view)].filter(function (method) { return method.body.length > 0 }), superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView, viewClass = createClassStmt({ name: view.className, parent: importExpr(createIdentifier(superClass), [getContextType(view)]), parentArgs: superConstructorArgs, ctorParams: viewConstructorArgs, builders: [{ methods: viewMethods }, view] }); return viewClass } function generateDestroyMethod(view) { var stmts = []; return view.viewContainers.forEach(function (viewContainer) { stmts.push(viewContainer.callMethod("destroyNestedViews", []).toStmt()) }), view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod("destroy", []).toStmt()) }), stmts.push.apply(stmts, view.destroyMethod.finish()), stmts } function generateCreateMethod(view) { var parentRenderNodeExpr = NULL_EXPR, parentRenderNodeStmts = []; view.viewType === ViewType.COMPONENT && (parentRenderNodeExpr = ViewProperties.renderer.callMethod("createViewRoot", [THIS_EXPR.prop("parentElement")]), parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])]); var resultExpr; if (view.viewType === ViewType.HOST) { var hostEl = view.nodes[0]; resultExpr = importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()]) } else resultExpr = NULL_EXPR; var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE).prop("directRenderer").conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) { return node.renderNode }))); return parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod("init", [view.lastRenderNode, allNodesExpr, view.disposables.length ? literalArr(view.disposables) : NULL_EXPR]).toStmt(), new ReturnStatement(resultExpr)]) } function generateDetectChangesMethod(view) { var stmts = []; if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() && 0 === view.viewContainers.length && 0 === view.viewChildren.length) return stmts; stmts.push.apply(stmts, view.animationBindingsMethod.finish()), stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish()), view.viewContainers.forEach(function (viewContainer) { stmts.push(viewContainer.callMethod("detectChangesInNestedViews", [DetectChangesVars.throwOnChange]).toStmt()) }); var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish()); afterContentStmts.length > 0 && stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts)), stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish()), view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod("internalDetectChanges", [DetectChangesVars.throwOnChange]).toStmt()) }); var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish()); afterViewStmts.length > 0 && stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts)); var varStmts = [], readVars = findReadVarNames(stmts); return readVars.has(DetectChangesVars.changed.name) && varStmts.push(DetectChangesVars.changed.set(literal(!0)).toDeclStmt(BOOL_TYPE)), readVars.has(DetectChangesVars.changes.name) && varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(createIdentifier(Identifiers.SimpleChange))))), varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts)), varStmts.concat(stmts) } function addReturnValuefNotEmpty(statements, value) { return statements.length > 0 ? statements.concat([new ReturnStatement(value)]) : statements } function getContextType(view) { return view.viewType === ViewType.COMPONENT ? importType(view.component.type) : DYNAMIC_TYPE } function getChangeDetectionMode(view) { var mode; return mode = view.viewType === ViewType.COMPONENT ? isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce : ChangeDetectorStatus.CheckAlways } function generateVisitRootNodesMethod(view) { var cbVar = variable("cb"), ctxVar = variable("ctx"), stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar); return new ClassMethod("visitRootNodesInternal", [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts) } function generateVisitProjectableNodesMethod(view) { var nodeIndexVar = variable("nodeIndex"), ngContentIndexVar = variable("ngContentIndex"), cbVar = variable("cb"), ctxVar = variable("ctx"), stmts = []; return view.nodes.forEach(function (node) { node instanceof CompileElement && node.component && node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) { stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)).and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar))) }) }), new ClassMethod("visitProjectableNodesInternal", [new FnParam(nodeIndexVar.name, NUMBER_TYPE), new FnParam(ngContentIndexVar.name, NUMBER_TYPE), new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts) } function generateVisitNodesStmts(nodes, cb, ctx) { var stmts = []; return nodes.forEach(function (node) { switch (node.type) { case CompileViewRootNodeType.Node: stmts.push(cb.callFn([node.expr, ctx]).toStmt()); break; case CompileViewRootNodeType.ViewContainer: stmts.push(cb.callFn([node.expr.prop("nativeElement"), ctx]).toStmt()), stmts.push(node.expr.callMethod("visitNestedViewRootNodes", [cb, ctx]).toStmt()); break; case CompileViewRootNodeType.NgContent: stmts.push(THIS_EXPR.callMethod("visitProjectedNodes", [literal(node.ngContentIndex), cb, ctx]).toStmt()) } }), stmts } function generateCreateEmbeddedViewsMethod(view) { var nodeIndexVar = variable("nodeIndex"), stmts = []; return view.nodes.forEach(function (node) { if (node instanceof CompileElement && node.embeddedView) { node.isRootElement() ? null : node.parent.nodeIndex; stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode, node.viewContainer]))])) } }), stmts.length > 0 && stmts.push(new ReturnStatement(NULL_EXPR)), new ClassMethod("createEmbeddedViewInternal", [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])) } function _compareToAnimationStateExpr(value, animationState) { var emptyStateLiteral = literal(EMPTY_STATE); switch (animationState) { case EMPTY_STATE: return value.equals(emptyStateLiteral); case ANY_STATE: return literal(!0); default: return value.equals(literal(animationState)) } } function _isEndStateAnimateStep(step) { if (step instanceof AnimationStepAst && step.duration > 0 && 2 == step.keyframes.length) { var styles1 = _getStylesArray(step.keyframes[0])[0], styles2 = _getStylesArray(step.keyframes[1])[0]; return 0 === Object.keys(styles1).length && 0 === Object.keys(styles2).length } return !1 } function _getStylesArray(obj) { return obj.styles.styles } function serializeSummaries(host, summaryResolver, symbolResolver, symbols, types) { var serializer = new Serializer(host); symbols.forEach(function (resolvedSymbol) { return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }) }); for (var processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) { var symbol = serializer.symbols[processedIndex]; if (!host.isSourceFile(symbol.filePath)) { var summary = summaryResolver.resolveSummary(symbol); if (!summary) { var resolvedSymbol = symbolResolver.resolveSymbol(symbol); resolvedSymbol && (summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }) } summary && serializer.addOrMergeSummary(summary) } } return types.forEach(function (typeSummary) { if (serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: "class" }, type: typeSummary }), typeSummary.summaryKind === CompileSummaryKind.NgModule) { var ngModuleSummary = typeSummary; ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) { var symbol = id.reference; host.isSourceFile(symbol.filePath) || serializer.addOrMergeSummary(summaryResolver.resolveSummary(symbol)) }) } }), serializer.serialize() } function deserializeSummaries(symbolCache, json) { var deserializer = new Deserializer(symbolCache); return deserializer.deserialize(json) } function summaryFileName(fileName) { var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, ""); return fileNameWithoutSuffix + ".ngsummary.json" } function _resolveViewStatements(reflector, compileResult) { return compileResult.dependencies.forEach(function (dep) { if (dep instanceof ViewClassDependency) { var vfd = dep; vfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(vfd.comp)), dep.name) } else if (dep instanceof ComponentFactoryDependency$1) { var cfd = dep; cfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(cfd.comp)), _componentFactoryName(cfd.comp)) } else if (dep instanceof DirectiveWrapperDependency) { var dwd = dep; dwd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dwd.dir)), dwd.name) } }), compileResult.statements } function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
        return compileResult.dependencies.forEach(function (dep) {
            dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
        }), compileResult.statements
    } function _ngfactoryModuleUrl(dirUrl) { var urlWithSuffix = _splitTypescriptSuffix(dirUrl); return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1] } function _componentFactoryName(comp) { return identifierName(comp) + "NgFactory" } function _stylesModuleUrl(stylesheetUrl, shim, suffix) { return "" + stylesheetUrl + (shim ? ".shim" : "") + ".ngstyle" + suffix } function _assertComponent(meta) { if (!meta.isComponent) throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.") } function _splitTypescriptSuffix(path) { if (path.endsWith(".d.ts")) return [path.slice(0, -5), ".ts"]; var lastDot = path.lastIndexOf("."); return lastDot !== -1 ? [path.substring(0, lastDot), path.substring(lastDot)] : [path, ""] } function analyzeNgModules(programStaticSymbols, host, metadataResolver) { var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule; return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver) } function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) { var result = analyzeNgModules(programStaticSymbols, host, metadataResolver); if (result.symbolsMissingModule && result.symbolsMissingModule.length) { var messages = result.symbolsMissingModule.map(function (s) { return "Cannot determine the module for class " + s.name + " in " + s.filePath + "!" }); throw new Error(messages.join("\n")) } return result } function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) { var moduleMetasByRef = new Map; ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule) }); var ngModuleByPipeOrDirective = new Map, ngModulesByFile = new Map, ngDirectivesByFile = new Map, ngPipesByFile = new Map, ngInjectablesByFile = new Map, filePaths = new Set; programSymbols.forEach(function (symbol) { var filePath = symbol.filePath; filePaths.add(filePath), metadataResolver.isInjectable(symbol) && ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol)) }), ngModuleMetas.forEach(function (ngModuleMeta) { var srcFileUrl = ngModuleMeta.type.reference.filePath; filePaths.add(srcFileUrl), ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference)), ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) { var fileUrl = dirIdentifier.reference.filePath; filePaths.add(fileUrl), ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference)), ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta) }), ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) { var fileUrl = pipeIdentifier.reference.filePath; filePaths.add(fileUrl), ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference)), ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta) }) }); var files = []; return filePaths.forEach(function (srcUrl) { var directives = ngDirectivesByFile.get(srcUrl) || [], pipes = ngPipesByFile.get(srcUrl) || [], ngModules = ngModulesByFile.get(srcUrl) || [], injectables = ngInjectablesByFile.get(srcUrl) || []; files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables }) }), { ngModuleByPipeOrDirective: ngModuleByPipeOrDirective, files: files, ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule } } function extractProgramSymbols(staticSymbolResolver, files, host) { var staticSymbols = []; return files.filter(function (fileName) { return host.isSourceFile(fileName) }).forEach(function (sourceFile) { staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) { var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol), symbolMeta = resolvedSymbol.metadata; symbolMeta && "error" != symbolMeta.__symbolic && staticSymbols.push(resolvedSymbol.symbol) }) }), staticSymbols } function _createNgModules(programStaticSymbols, host, metadataResolver) { var ngModules = new Map, programPipesAndDirectives = [], ngModulePipesAndDirective = new Set, addNgModule = function (staticSymbol) { if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) return !1; var ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, !1); return ngModule && (ngModules.set(ngModule.type.reference, ngModule), ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference) }), ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference) }), ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference) })), !!ngModule }; programStaticSymbols.forEach(function (staticSymbol) { addNgModule(staticSymbol) || !metadataResolver.isDirective(staticSymbol) && !metadataResolver.isPipe(staticSymbol) || programPipesAndDirectives.push(staticSymbol) }); var symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s) }); return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule } } function isStaticType(type) { return "object" == typeof type && type.name && type.filePath } function expandedMessage(error) { switch (error.message) { case "Reference to non-exported class": if (error.context && error.context.className) return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class"; break; case "Variable not initialized": return "Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler"; case "Destructuring not supported": return "Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring"; case "Could not resolve type": if (error.context && error.context.typeName) return "Could not resolve type " + error.context.typeName; break; case "Function call not supported": var prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : "F"; return prefix + "unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function"; case "Reference to a local symbol": if (error.context && error.context.name) return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol" } return error.message } function produceErrorMessage(error) { return "Error encountered resolving symbol values statically. " + expandedMessage(error) } function mapStringMap(input, transform) { if (!input) return {}; var result = {}; return Object.keys(input).forEach(function (key) { var value = transform(input[key], key); shouldIgnore(value) || (HIDDEN_KEY.test(key) ? Object.defineProperty(result, key, { enumerable: !1, configurable: !0, value: value }) : result[key] = value) }), result } function isPrimitive$1(o) { return null === o || "function" != typeof o && "object" != typeof o } function shouldIgnore(value) { return value && "ignore" == value.__symbolic } function positionalError(message, fileName, line, column) { var result = new Error(message); return result.fileName = fileName, result.line = line, result.column = column, result } function createAotCompiler(compilerHost, options) { var translations = options.translations || "", urlResolver = createOfflineCompileUrlResolver(), symbolCache = new StaticSymbolCache, summaryResolver = new AotSummaryResolver(compilerHost, symbolCache), symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver), staticReflector = new StaticReflector(symbolResolver); StaticAndDynamicReflectionCapabilities.install(staticReflector); var htmlParser = new I18NHtmlParser(new HtmlParser, translations, options.i18nFormat), config = new CompilerConfig({ genDebugInfo: options.debug === !0, defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, logBindingUpdate: !1, useJit: !1 }), normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url) } }, urlResolver, htmlParser, config), expressionParser = new Parser(new Lexer), elementSchemaRegistry = new DomElementSchemaRegistry, console = new Console, tmplParser = new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []), resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector), compiler = new AotCompiler(compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), new ViewCompiler(config, elementSchemaRegistry), new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler, new TypeScriptEmitter(compilerHost), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), symbolResolver); return { compiler: compiler, reflector: staticReflector } } function interpretStatements(statements, resultVar) { var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]), ctx = new _ExecutionContext(null, null, null, new Map), visitor = new StatementInterpreter, result = visitor.visitAllStatements(stmtsWithReturn, ctx); return isPresent(result) ? result.value : null } function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) { for (var childCtx = ctx.createChildWihtLocalVars(), i = 0; i < varNames.length; i++) childCtx.vars.set(varNames[i], varValues[i]); var result = visitor.visitAllStatements(statements, childCtx); return isPresent(result) ? result.value : null } function createDynamicClass(_classStmt, _ctx, _visitor) { var propertyDescriptors = {}; _classStmt.getters.forEach(function (getter) { propertyDescriptors[getter.name] = { configurable: !1, get: function () { var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars); return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor) } } }), _classStmt.methods.forEach(function (method) { var paramNames = method.params.map(function (param) { return param.name }); propertyDescriptors[method.name] = { writable: !1, configurable: !1, value: function () { for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars); return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor) } } }); var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name }), ctor = function () { for (var _this = this, args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars); _classStmt.fields.forEach(function (field) { _this[field.name] = void 0 }), _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor) }, superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object; return ctor.prototype = Object.create(superClass.prototype, propertyDescriptors), ctor } function _declareFn(varNames, statements, ctx, visitor) { return function () { for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i]; return _executeFunctionStatements(varNames, args, statements, ctx, visitor) } } function evalExpression(sourceUrl, expr, declarations, vars) { var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl, fnArgNames = [], fnArgValues = []; for (var argName in vars) fnArgNames.push(argName), fnArgValues.push(vars[argName]); return (new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))).apply(void 0, fnArgValues) } function jitStatements(sourceUrl, statements, resultVar) { var converter = new JitEmitterVisitor, ctx = EmitterVisitorContext.createRoot([resultVar]); return converter.visitAllStatements(statements, ctx), evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs()) } function assertComponent(meta) { if (!meta.isComponent) throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.") } function _initReflector() { reflector.reflectionCapabilities = new ReflectionCapabilities } function _mergeOptions(optionsArr) { return { useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug })), useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit })), defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation })), providers: _mergeArrays(optionsArr.map(function (options) { return options.providers })) } } function _lastDefined(args) { for (var i = args.length - 1; i >= 0; i--) if (void 0 !== args[i]) return args[i] } function _mergeArrays(parts) { var result = []; return parts.forEach(function (part) { return part && result.push.apply(result, part) }), result } var VERSION = new _angular_core.Version("2.4.1"), TextAst = function () { function TextAst(value, ngContentIndex, sourceSpan) { this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan } return TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context) }, TextAst }(), BoundTextAst = function () { function BoundTextAst(value, ngContentIndex, sourceSpan) { this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan } return BoundTextAst.prototype.visit = function (visitor, context) { return visitor.visitBoundText(this, context) }, BoundTextAst }(), AttrAst = function () { function AttrAst(name, value, sourceSpan) { this.name = name, this.value = value, this.sourceSpan = sourceSpan } return AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context) }, AttrAst }(), BoundElementPropertyAst = function () { function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) { this.name = name, this.type = type, this.securityContext = securityContext, this.needsRuntimeSecurityContext = needsRuntimeSecurityContext, this.value = value, this.unit = unit, this.sourceSpan = sourceSpan } return BoundElementPropertyAst.prototype.visit = function (visitor, context) { return visitor.visitElementProperty(this, context) }, Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", { get: function () { return this.type === PropertyBindingType.Animation }, enumerable: !0, configurable: !0 }), BoundElementPropertyAst }(), BoundEventAst = function () { function BoundEventAst(name, target, phase, handler, sourceSpan) { this.name = name, this.target = target, this.phase = phase, this.handler = handler, this.sourceSpan = sourceSpan } return BoundEventAst.calcFullName = function (name, target, phase) { return target ? target + ":" + name : phase ? "@" + name + "." + phase : name }, BoundEventAst.prototype.visit = function (visitor, context) { return visitor.visitEvent(this, context) }, Object.defineProperty(BoundEventAst.prototype, "fullName", { get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase) }, enumerable: !0, configurable: !0 }), Object.defineProperty(BoundEventAst.prototype, "isAnimation", { get: function () { return !!this.phase }, enumerable: !0, configurable: !0 }), BoundEventAst }(), ReferenceAst = function () { function ReferenceAst(name, value, sourceSpan) { this.name = name, this.value = value, this.sourceSpan = sourceSpan } return ReferenceAst.prototype.visit = function (visitor, context) { return visitor.visitReference(this, context) }, ReferenceAst }(), VariableAst = function () { function VariableAst(name, value, sourceSpan) { this.name = name, this.value = value, this.sourceSpan = sourceSpan } return VariableAst.prototype.visit = function (visitor, context) { return visitor.visitVariable(this, context) }, VariableAst }(), ElementAst = function () { function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) { this.name = name, this.attrs = attrs, this.inputs = inputs, this.outputs = outputs, this.references = references, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan, this.endSourceSpan = endSourceSpan } return ElementAst.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context) }, ElementAst }(), EmbeddedTemplateAst = function () { function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) { this.attrs = attrs, this.outputs = outputs, this.references = references, this.variables = variables, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan } return EmbeddedTemplateAst.prototype.visit = function (visitor, context) { return visitor.visitEmbeddedTemplate(this, context) }, EmbeddedTemplateAst }(), BoundDirectivePropertyAst = function () { function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) { this.directiveName = directiveName, this.templateName = templateName, this.value = value, this.sourceSpan = sourceSpan } return BoundDirectivePropertyAst.prototype.visit = function (visitor, context) { return visitor.visitDirectiveProperty(this, context) }, BoundDirectivePropertyAst }(), DirectiveAst = function () { function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) { this.directive = directive, this.inputs = inputs, this.hostProperties = hostProperties, this.hostEvents = hostEvents, this.sourceSpan = sourceSpan } return DirectiveAst.prototype.visit = function (visitor, context) { return visitor.visitDirective(this, context) }, DirectiveAst }(), ProviderAst = function () { function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) { this.token = token, this.multiProvider = multiProvider, this.eager = eager, this.providers = providers, this.providerType = providerType, this.lifecycleHooks = lifecycleHooks, this.sourceSpan = sourceSpan } return ProviderAst.prototype.visit = function (visitor, context) { return null }, ProviderAst }(), ProviderAstType = {}; ProviderAstType.PublicService = 0, ProviderAstType.PrivateService = 1, ProviderAstType.Component = 2, ProviderAstType.Directive = 3, ProviderAstType.Builtin = 4, ProviderAstType[ProviderAstType.PublicService] = "PublicService", ProviderAstType[ProviderAstType.PrivateService] = "PrivateService", ProviderAstType[ProviderAstType.Component] = "Component", ProviderAstType[ProviderAstType.Directive] = "Directive", ProviderAstType[ProviderAstType.Builtin] = "Builtin"; var NgContentAst = function () { function NgContentAst(index, ngContentIndex, sourceSpan) { this.index = index, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan } return NgContentAst.prototype.visit = function (visitor, context) { return visitor.visitNgContent(this, context) }, NgContentAst }(), PropertyBindingType = {}; PropertyBindingType.Property = 0, PropertyBindingType.Attribute = 1, PropertyBindingType.Class = 2, PropertyBindingType.Style = 3, PropertyBindingType.Animation = 4, PropertyBindingType[PropertyBindingType.Property] = "Property", PropertyBindingType[PropertyBindingType.Attribute] = "Attribute", PropertyBindingType[PropertyBindingType.Class] = "Class", PropertyBindingType[PropertyBindingType.Style] = "Style", PropertyBindingType[PropertyBindingType.Animation] = "Animation"; var StaticSymbol = function () { function StaticSymbol(filePath, name, members) { this.filePath = filePath, this.name = name, this.members = members } return StaticSymbol }(), StaticSymbolCache = function () { function StaticSymbolCache() { this.cache = new Map } return StaticSymbolCache.prototype.get = function (declarationFile, name, members) { members = members || []; var memberSuffix = members.length ? "." + members.join(".") : "", key = '"' + declarationFile + '".' + name + memberSuffix, result = this.cache.get(key); return result || (result = new StaticSymbol(declarationFile, name, members), this.cache.set(key, result)), result }, StaticSymbolCache }(), STRING_MAP_PROTO = Object.getPrototypeOf({}), NumberWrapper = function () { function NumberWrapper() { } return NumberWrapper.parseIntAutoRadix = function (text) { var result = parseInt(text); if (isNaN(result)) throw new Error("Invalid integer literal when parsing " + text); return result }, NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)) }, NumberWrapper }(), StringMapWrapper = function () { function StringMapWrapper() { } return StringMapWrapper.merge = function (m1, m2) { for (var m = {}, _i = 0, _a = Object.keys(m1) ; _i < _a.length; _i++) { var k = _a[_i]; m[k] = m1[k] } for (var _b = 0, _c = Object.keys(m2) ; _b < _c.length; _b++) { var k = _c[_b]; m[k] = m2[k] } return m }, StringMapWrapper.equals = function (m1, m2) { var k1 = Object.keys(m1), k2 = Object.keys(m2); if (k1.length != k2.length) return !1; for (var i = 0; i < k1.length; i++) { var key = k1[i]; if (m1[key] !== m2[key]) return !1 } return !0 }, StringMapWrapper }(), ListWrapper = function () { function ListWrapper() { } return ListWrapper.findLast = function (arr, condition) { for (var i = arr.length - 1; i >= 0; i--) if (condition(arr[i])) return arr[i]; return null }, ListWrapper.removeAll = function (list, items) { for (var i = 0; i < items.length; ++i) { var index = list.indexOf(items[i]); index > -1 && list.splice(index, 1) } }, ListWrapper.remove = function (list, el) { var index = list.indexOf(el); return index > -1 && (list.splice(index, 1), !0) }, ListWrapper.equals = function (a, b) { if (a.length != b.length) return !1; for (var i = 0; i < a.length; ++i) if (a[i] !== b[i]) return !1; return !0 }, ListWrapper.flatten = function (list) { return list.reduce(function (flat, item) { var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item; return flat.concat(flatItem) }, []) }, ListWrapper }(), isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy, ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus, LifecycleHooks = _angular_core.__core_private__.LifecycleHooks, LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES, ReflectorReader = _angular_core.__core_private__.ReflectorReader, ViewContainer = _angular_core.__core_private__.ViewContainer, CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver, ComponentRef_ = _angular_core.__core_private__.ComponentRef_, AppView = _angular_core.__core_private__.AppView, DebugAppView = _angular_core.__core_private__.DebugAppView, NgModuleInjector = _angular_core.__core_private__.NgModuleInjector, registerModuleFactory = _angular_core.__core_private__.registerModuleFactory, ViewType = _angular_core.__core_private__.ViewType, view_utils = _angular_core.__core_private__.view_utils, DebugContext = _angular_core.__core_private__.DebugContext, StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo, devModeEqual = _angular_core.__core_private__.devModeEqual, UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED, ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper, TemplateRef_ = _angular_core.__core_private__.TemplateRef_, Console = _angular_core.__core_private__.Console, reflector = _angular_core.__core_private__.reflector, Reflector = _angular_core.__core_private__.Reflector, ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities, NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer, AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer, AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer, AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe, AnimationStyles = _angular_core.__core_private__.AnimationStyles, ANY_STATE = _angular_core.__core_private__.ANY_STATE, DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE, EMPTY_STATE = _angular_core.__core_private__.EMPTY_STATE, FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG, prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles, balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes, clearStyles = _angular_core.__core_private__.clearStyles, collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles, renderStyles = _angular_core.__core_private__.renderStyles, ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError, AnimationTransition = _angular_core.__core_private__.AnimationTransition, TagContentType = {}; TagContentType.RAW_TEXT = 0, TagContentType.ESCAPABLE_RAW_TEXT = 1, TagContentType.PARSABLE_DATA = 2, TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT", TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT", TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA"; var NAMED_ENTITIES = { Aacute: "Á", aacute: "á", Acirc: "Â", acirc: "â", acute: "´", AElig: "Æ", aelig: "æ", Agrave: "À", agrave: "à", alefsym: "ℵ", Alpha: "Α", alpha: "α", amp: "&", and: "∧", ang: "∠", apos: "'", Aring: "Å", aring: "å", asymp: "≈", Atilde: "Ã", atilde: "ã", Auml: "Ä", auml: "ä", bdquo: "„", Beta: "Β", beta: "β", brvbar: "¦", bull: "•", cap: "∩", Ccedil: "Ç", ccedil: "ç", cedil: "¸", cent: "¢", Chi: "Χ", chi: "χ", circ: "ˆ", clubs: "♣", cong: "≅", copy: "©", crarr: "↵", cup: "∪", curren: "¤", dagger: "†", Dagger: "‡", darr: "↓", dArr: "⇓", deg: "°", Delta: "Δ", delta: "δ", diams: "♦", divide: "÷", Eacute: "É", eacute: "é", Ecirc: "Ê", ecirc: "ê", Egrave: "È", egrave: "è", empty: "∅", emsp: " ", ensp: " ", Epsilon: "Ε", epsilon: "ε", equiv: "≡", Eta: "Η", eta: "η", ETH: "Ð", eth: "ð", Euml: "Ë", euml: "ë", euro: "€", exist: "∃", fnof: "ƒ", forall: "∀", frac12: "½", frac14: "¼", frac34: "¾", frasl: "⁄", Gamma: "Γ", gamma: "γ", ge: "≥", gt: ">", harr: "↔", hArr: "⇔", hearts: "♥", hellip: "…", Iacute: "Í", iacute: "í", Icirc: "Î", icirc: "î", iexcl: "¡", Igrave: "Ì", igrave: "ì", image: "ℑ", infin: "∞", int: "∫", Iota: "Ι", iota: "ι", iquest: "¿", isin: "∈", Iuml: "Ï", iuml: "ï", Kappa: "Κ", kappa: "κ", Lambda: "Λ", lambda: "λ", lang: "⟨", laquo: "«", larr: "←", lArr: "⇐", lceil: "⌈", ldquo: "“", le: "≤", lfloor: "⌊", lowast: "∗", loz: "◊", lrm: "‎", lsaquo: "‹", lsquo: "‘", lt: "<", macr: "¯", mdash: "—", micro: "µ", middot: "·", minus: "−", Mu: "Μ", mu: "μ", nabla: "∇", nbsp: " ", ndash: "–", ne: "≠", ni: "∋", not: "¬", notin: "∉", nsub: "⊄", Ntilde: "Ñ", ntilde: "ñ", Nu: "Ν", nu: "ν", Oacute: "Ó", oacute: "ó", Ocirc: "Ô", ocirc: "ô", OElig: "Œ", oelig: "œ", Ograve: "Ò", ograve: "ò", oline: "‾", Omega: "Ω", omega: "ω", Omicron: "Ο", omicron: "ο", oplus: "⊕", or: "∨", ordf: "ª", ordm: "º", Oslash: "Ø", oslash: "ø", Otilde: "Õ", otilde: "õ", otimes: "⊗", Ouml: "Ö", ouml: "ö", para: "¶", permil: "‰", perp: "⊥", Phi: "Φ", phi: "φ", Pi: "Π", pi: "π", piv: "ϖ", plusmn: "±", pound: "£", prime: "′", Prime: "″", prod: "∏", prop: "∝", Psi: "Ψ", psi: "ψ", quot: '"', radic: "√", rang: "⟩", raquo: "»", rarr: "→", rArr: "⇒", rceil: "⌉", rdquo: "”", real: "ℜ", reg: "®", rfloor: "⌋", Rho: "Ρ", rho: "ρ", rlm: "‏", rsaquo: "›", rsquo: "’", sbquo: "‚", Scaron: "Š", scaron: "š", sdot: "⋅", sect: "§", shy: "­", Sigma: "Σ", sigma: "σ", sigmaf: "ς", sim: "∼", spades: "♠", sub: "⊂", sube: "⊆", sum: "∑", sup: "⊃", sup1: "¹", sup2: "²", sup3: "³", supe: "⊇", szlig: "ß", Tau: "Τ", tau: "τ", there4: "∴", Theta: "Θ", theta: "θ", thetasym: "ϑ", thinsp: " ", THORN: "Þ", thorn: "þ", tilde: "˜", times: "×", trade: "™", Uacute: "Ú", uacute: "ú", uarr: "↑", uArr: "⇑", Ucirc: "Û", ucirc: "û", Ugrave: "Ù", ugrave: "ù", uml: "¨", upsih: "ϒ", Upsilon: "Υ", upsilon: "υ", Uuml: "Ü", uuml: "ü", weierp: "℘", Xi: "Ξ", xi: "ξ", Yacute: "Ý", yacute: "ý", yen: "¥", yuml: "ÿ", Yuml: "Ÿ", Zeta: "Ζ", zeta: "ζ", zwj: "‍", zwnj: "‌" }, HtmlTagDefinition = function () { function HtmlTagDefinition(_a) { var _this = this, _b = void 0 === _a ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = void 0 === _c ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = void 0 !== _d && _d, _e = _b.isVoid, isVoid = void 0 !== _e && _e, _f = _b.ignoreFirstLf, ignoreFirstLf = void 0 !== _f && _f; this.closedByChildren = {}, this.closedByParent = !1, this.canSelfClose = !1, closedByChildren && closedByChildren.length > 0 && closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = !0 }), this.isVoid = isVoid, this.closedByParent = closedByParent || isVoid, requiredParents && requiredParents.length > 0 && (this.requiredParents = {}, this.parentToAdd = requiredParents[0], requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = !0 })), this.implicitNamespacePrefix = implicitNamespacePrefix, this.contentType = contentType, this.ignoreFirstLf = ignoreFirstLf } return HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) { if (!this.requiredParents) return !1; if (!currentParent) return !0; var lcParent = currentParent.toLowerCase(); return 1 != this.requiredParents[lcParent] && "template" != lcParent }, HtmlTagDefinition.prototype.isClosedByChild = function (name) { return this.isVoid || name.toLowerCase() in this.closedByChildren }, HtmlTagDefinition }(), TAG_DEFINITIONS = { base: new HtmlTagDefinition({ isVoid: !0 }), meta: new HtmlTagDefinition({ isVoid: !0 }), area: new HtmlTagDefinition({ isVoid: !0 }), embed: new HtmlTagDefinition({ isVoid: !0 }), link: new HtmlTagDefinition({ isVoid: !0 }), img: new HtmlTagDefinition({ isVoid: !0 }), input: new HtmlTagDefinition({ isVoid: !0 }), param: new HtmlTagDefinition({ isVoid: !0 }), hr: new HtmlTagDefinition({ isVoid: !0 }), br: new HtmlTagDefinition({ isVoid: !0 }), source: new HtmlTagDefinition({ isVoid: !0 }), track: new HtmlTagDefinition({ isVoid: !0 }), wbr: new HtmlTagDefinition({ isVoid: !0 }), p: new HtmlTagDefinition({ closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"], closedByParent: !0 }), thead: new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"] }), tbody: new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"], closedByParent: !0 }), tfoot: new HtmlTagDefinition({ closedByChildren: ["tbody"], closedByParent: !0 }), tr: new HtmlTagDefinition({ closedByChildren: ["tr"], requiredParents: ["tbody", "tfoot", "thead"], closedByParent: !0 }), td: new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: !0 }), th: new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: !0 }), col: new HtmlTagDefinition({ requiredParents: ["colgroup"], isVoid: !0 }), svg: new HtmlTagDefinition({ implicitNamespacePrefix: "svg" }), math: new HtmlTagDefinition({ implicitNamespacePrefix: "math" }), li: new HtmlTagDefinition({ closedByChildren: ["li"], closedByParent: !0 }), dt: new HtmlTagDefinition({ closedByChildren: ["dt", "dd"] }), dd: new HtmlTagDefinition({ closedByChildren: ["dt", "dd"], closedByParent: !0 }), rb: new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: !0 }), rt: new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: !0 }), rtc: new HtmlTagDefinition({ closedByChildren: ["rb", "rtc", "rp"], closedByParent: !0 }), rp: new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: !0 }), optgroup: new HtmlTagDefinition({ closedByChildren: ["optgroup"], closedByParent: !0 }), option: new HtmlTagDefinition({ closedByChildren: ["option", "optgroup"], closedByParent: !0 }), pre: new HtmlTagDefinition({ ignoreFirstLf: !0 }), listing: new HtmlTagDefinition({ ignoreFirstLf: !0 }), style: new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }), script: new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }), title: new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }), textarea: new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: !0 }) }, _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition, _SELECTOR_REGEXP = new RegExp("(\\:not\\()|([-\\w]+)|(?:\\.([-\\w]+))|(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|(\\))|(\\s*,\\s*)", "g"), CssSelector = function () {
        function CssSelector() { this.element = null, this.classNames = [], this.attrs = [], this.notSelectors = [] } return CssSelector.parse = function (selector) { var match, results = [], _addResult = function (res, cssSel) { cssSel.notSelectors.length > 0 && !cssSel.element && 0 == cssSel.classNames.length && 0 == cssSel.attrs.length && (cssSel.element = "*"), res.push(cssSel) }, cssSelector = new CssSelector, current = cssSelector, inNot = !1; for (_SELECTOR_REGEXP.lastIndex = 0; match = _SELECTOR_REGEXP.exec(selector) ;) { if (match[1]) { if (inNot) throw new Error("Nesting :not is not allowed in a selector"); inNot = !0, current = new CssSelector, cssSelector.notSelectors.push(current) } if (match[2] && current.setElement(match[2]), match[3] && current.addClassName(match[3]), match[4] && current.addAttribute(match[4], match[5]), match[6] && (inNot = !1, current = cssSelector), match[7]) { if (inNot) throw new Error("Multiple selectors in :not are not supported"); _addResult(results, cssSelector), cssSelector = current = new CssSelector } } return _addResult(results, cssSelector), results }, CssSelector.prototype.isElementSelector = function () { return this.hasElementSelector() && 0 == this.classNames.length && 0 == this.attrs.length && 0 === this.notSelectors.length }, CssSelector.prototype.hasElementSelector = function () { return !!this.element }, CssSelector.prototype.setElement = function (element) { void 0 === element && (element = null), this.element = element }, CssSelector.prototype.getMatchingElementTemplate = function () { for (var tagName = this.element || "div", classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "", attrs = "", i = 0; i < this.attrs.length; i += 2) { var attrName = this.attrs[i], attrValue = "" !== this.attrs[i + 1] ? '="' + this.attrs[i + 1] + '"' : ""; attrs += " " + attrName + attrValue } return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">" }, CssSelector.prototype.addAttribute = function (name, value) {
            void 0 === value && (value = ""), this.attrs.push(name, value && value.toLowerCase() || "")
        }, CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()) }, CssSelector.prototype.toString = function () { var res = this.element || ""; if (this.classNames && this.classNames.forEach(function (klass) { return res += "." + klass }), this.attrs) for (var i = 0; i < this.attrs.length; i += 2) { var name_1 = this.attrs[i], value = this.attrs[i + 1]; res += "[" + name_1 + (value ? "=" + value : "") + "]" } return this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")" }), res }, CssSelector
    }(), SelectorMatcher = function () { function SelectorMatcher() { this._elementMap = new Map, this._elementPartialMap = new Map, this._classMap = new Map, this._classPartialMap = new Map, this._attrValueMap = new Map, this._attrValuePartialMap = new Map, this._listContexts = [] } return SelectorMatcher.createNotMatcher = function (notSelectors) { var notMatcher = new SelectorMatcher; return notMatcher.addSelectables(notSelectors, null), notMatcher }, SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) { var listContext = null; cssSelectors.length > 1 && (listContext = new SelectorListContext(cssSelectors), this._listContexts.push(listContext)); for (var i = 0; i < cssSelectors.length; i++) this._addSelectable(cssSelectors[i], callbackCtxt, listContext) }, SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) { var matcher = this, element = cssSelector.element, classNames = cssSelector.classNames, attrs = cssSelector.attrs, selectable = new SelectorContext(cssSelector, callbackCtxt, listContext); if (element) { var isTerminal = 0 === attrs.length && 0 === classNames.length; isTerminal ? this._addTerminal(matcher._elementMap, element, selectable) : matcher = this._addPartial(matcher._elementPartialMap, element) } if (classNames) for (var i = 0; i < classNames.length; i++) { var isTerminal = 0 === attrs.length && i === classNames.length - 1, className = classNames[i]; isTerminal ? this._addTerminal(matcher._classMap, className, selectable) : matcher = this._addPartial(matcher._classPartialMap, className) } if (attrs) for (var i = 0; i < attrs.length; i += 2) { var isTerminal = i === attrs.length - 2, name_2 = attrs[i], value = attrs[i + 1]; if (isTerminal) { var terminalMap = matcher._attrValueMap, terminalValuesMap = terminalMap.get(name_2); terminalValuesMap || (terminalValuesMap = new Map, terminalMap.set(name_2, terminalValuesMap)), this._addTerminal(terminalValuesMap, value, selectable) } else { var partialMap = matcher._attrValuePartialMap, partialValuesMap = partialMap.get(name_2); partialValuesMap || (partialValuesMap = new Map, partialMap.set(name_2, partialValuesMap)), matcher = this._addPartial(partialValuesMap, value) } } }, SelectorMatcher.prototype._addTerminal = function (map, name, selectable) { var terminalList = map.get(name); terminalList || (terminalList = [], map.set(name, terminalList)), terminalList.push(selectable) }, SelectorMatcher.prototype._addPartial = function (map, name) { var matcher = map.get(name); return matcher || (matcher = new SelectorMatcher, map.set(name, matcher)), matcher }, SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) { for (var result = !1, element = cssSelector.element, classNames = cssSelector.classNames, attrs = cssSelector.attrs, i = 0; i < this._listContexts.length; i++) this._listContexts[i].alreadyMatched = !1; if (result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result, result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result, classNames) for (var i = 0; i < classNames.length; i++) { var className = classNames[i]; result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result, result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result } if (attrs) for (var i = 0; i < attrs.length; i += 2) { var name_3 = attrs[i], value = attrs[i + 1], terminalValuesMap = this._attrValueMap.get(name_3); value && (result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result), result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result; var partialValuesMap = this._attrValuePartialMap.get(name_3); value && (result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result), result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result } return result }, SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) { if (!map || "string" != typeof name) return !1; var selectables = map.get(name) || [], starSelectables = map.get("*"); if (starSelectables && (selectables = selectables.concat(starSelectables)), 0 === selectables.length) return !1; for (var selectable, result = !1, i = 0; i < selectables.length; i++) selectable = selectables[i], result = selectable.finalize(cssSelector, matchedCallback) || result; return result }, SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) { if (!map || "string" != typeof name) return !1; var nestedSelector = map.get(name); return !!nestedSelector && nestedSelector.match(cssSelector, matchedCallback) }, SelectorMatcher }(), SelectorListContext = function () { function SelectorListContext(selectors) { this.selectors = selectors, this.alreadyMatched = !1 } return SelectorListContext }(), SelectorContext = function () { function SelectorContext(selector, cbContext, listContext) { this.selector = selector, this.cbContext = cbContext, this.listContext = listContext, this.notSelectors = selector.notSelectors } return SelectorContext.prototype.finalize = function (cssSelector, callback) { var result = !0; if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) { var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors); result = !notMatcher.match(cssSelector, null) } return !result || !callback || this.listContext && this.listContext.alreadyMatched || (this.listContext && (this.listContext.alreadyMatched = !0), callback(this.selector, this.cbContext)), result }, SelectorContext }(), __extends$3 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, BaseError = function (_super) { function BaseError(message) { _super.call(this, message); var nativeError = new Error(message); this._nativeError = nativeError } return __extends$3(BaseError, _super), Object.defineProperty(BaseError.prototype, "message", { get: function () { return this._nativeError.message }, set: function (message) { this._nativeError.message = message }, enumerable: !0, configurable: !0 }), Object.defineProperty(BaseError.prototype, "name", { get: function () { return this._nativeError.name }, enumerable: !0, configurable: !0 }), Object.defineProperty(BaseError.prototype, "stack", { get: function () { return this._nativeError.stack }, set: function (value) { this._nativeError.stack = value }, enumerable: !0, configurable: !0 }), BaseError.prototype.toString = function () { return this._nativeError.toString() }, BaseError }(Error), __extends$2 = (function (_super) { function WrappedError(message, error) { _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error)), this.originalError = error } return __extends$3(WrappedError, _super), Object.defineProperty(WrappedError.prototype, "stack", { get: function () { return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack }, enumerable: !0, configurable: !0 }), WrappedError }(BaseError), this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }), MODULE_SUFFIX = "", DASH_CASE_REGEXP = /-+([a-z0-9])/g, ValueTransformer = function () { function ValueTransformer() { } return ValueTransformer.prototype.visitArray = function (arr, context) { var _this = this; return arr.map(function (value) { return visitValue(value, _this, context) }) }, ValueTransformer.prototype.visitStringMap = function (map, context) { var _this = this, result = {}; return Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context) }), result }, ValueTransformer.prototype.visitPrimitive = function (value, context) { return value }, ValueTransformer.prototype.visitOther = function (value, context) { return value }, ValueTransformer }(), SyncAsyncResult = function () { function SyncAsyncResult(syncResult, asyncResult) { void 0 === asyncResult && (asyncResult = null), this.syncResult = syncResult, this.asyncResult = asyncResult, asyncResult || (this.asyncResult = Promise.resolve(syncResult)) } return SyncAsyncResult }(), SyntaxError = function (_super) { function SyntaxError() { _super.apply(this, arguments) } return __extends$2(SyntaxError, _super), SyntaxError }(BaseError), __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/, CompileAnimationEntryMetadata = function () { function CompileAnimationEntryMetadata(name, definitions) { void 0 === name && (name = null), void 0 === definitions && (definitions = null), this.name = name, this.definitions = definitions } return CompileAnimationEntryMetadata }(), CompileAnimationStateMetadata = function () { function CompileAnimationStateMetadata() { } return CompileAnimationStateMetadata }(), CompileAnimationStateDeclarationMetadata = function (_super) { function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) { _super.call(this), this.stateNameExpr = stateNameExpr, this.styles = styles } return __extends$1(CompileAnimationStateDeclarationMetadata, _super), CompileAnimationStateDeclarationMetadata }(CompileAnimationStateMetadata), CompileAnimationStateTransitionMetadata = function (_super) { function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) { _super.call(this), this.stateChangeExpr = stateChangeExpr, this.steps = steps } return __extends$1(CompileAnimationStateTransitionMetadata, _super), CompileAnimationStateTransitionMetadata }(CompileAnimationStateMetadata), CompileAnimationMetadata = function () { function CompileAnimationMetadata() { } return CompileAnimationMetadata }(), CompileAnimationKeyframesSequenceMetadata = function (_super) { function CompileAnimationKeyframesSequenceMetadata(steps) { void 0 === steps && (steps = []), _super.call(this), this.steps = steps } return __extends$1(CompileAnimationKeyframesSequenceMetadata, _super), CompileAnimationKeyframesSequenceMetadata }(CompileAnimationMetadata), CompileAnimationStyleMetadata = function (_super) { function CompileAnimationStyleMetadata(offset, styles) { void 0 === styles && (styles = null), _super.call(this), this.offset = offset, this.styles = styles } return __extends$1(CompileAnimationStyleMetadata, _super), CompileAnimationStyleMetadata }(CompileAnimationMetadata), CompileAnimationAnimateMetadata = function (_super) { function CompileAnimationAnimateMetadata(timings, styles) { void 0 === timings && (timings = 0), void 0 === styles && (styles = null), _super.call(this), this.timings = timings, this.styles = styles } return __extends$1(CompileAnimationAnimateMetadata, _super), CompileAnimationAnimateMetadata }(CompileAnimationMetadata), CompileAnimationWithStepsMetadata = function (_super) { function CompileAnimationWithStepsMetadata(steps) { void 0 === steps && (steps = null), _super.call(this), this.steps = steps } return __extends$1(CompileAnimationWithStepsMetadata, _super), CompileAnimationWithStepsMetadata }(CompileAnimationMetadata), CompileAnimationSequenceMetadata = function (_super) { function CompileAnimationSequenceMetadata(steps) { void 0 === steps && (steps = null), _super.call(this, steps) } return __extends$1(CompileAnimationSequenceMetadata, _super), CompileAnimationSequenceMetadata }(CompileAnimationWithStepsMetadata), CompileAnimationGroupMetadata = function (_super) { function CompileAnimationGroupMetadata(steps) { void 0 === steps && (steps = null), _super.call(this, steps) } return __extends$1(CompileAnimationGroupMetadata, _super), CompileAnimationGroupMetadata }(CompileAnimationWithStepsMetadata), _anonymousTypeIndex = 0, CompileSummaryKind = {}; CompileSummaryKind.Pipe = 0, CompileSummaryKind.Directive = 1, CompileSummaryKind.NgModule = 2, CompileSummaryKind.Injectable = 3, CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe", CompileSummaryKind[CompileSummaryKind.Directive] = "Directive", CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule", CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable"; var CompileStylesheetMetadata = function () { function CompileStylesheetMetadata(_a) { var _b = void 0 === _a ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls; this.moduleUrl = moduleUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls) } return CompileStylesheetMetadata }(), CompileTemplateMetadata = function () { function CompileTemplateMetadata(_a) { var _b = void 0 === _a ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation; if (this.encapsulation = encapsulation, this.template = template, this.templateUrl = templateUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls), this.externalStylesheets = _normalizeArray(externalStylesheets), this.animations = animations ? ListWrapper.flatten(animations) : [], this.ngContentSelectors = ngContentSelectors || [], interpolation && 2 != interpolation.length) throw new Error("'interpolation' should have a start and an end symbol."); this.interpolation = interpolation } return CompileTemplateMetadata.prototype.toSummary = function () { return { animations: this.animations.map(function (anim) { return anim.name }), ngContentSelectors: this.ngContentSelectors, encapsulation: this.encapsulation } }, CompileTemplateMetadata }(), CompileDirectiveMetadata = function () { function CompileDirectiveMetadata(_a) { var _b = void 0 === _a ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template; this.isHost = !!isHost, this.type = type, this.isComponent = isComponent, this.selector = selector, this.exportAs = exportAs, this.changeDetection = changeDetection, this.inputs = inputs, this.outputs = outputs, this.hostListeners = hostListeners, this.hostProperties = hostProperties, this.hostAttributes = hostAttributes, this.providers = _normalizeArray(providers), this.viewProviders = _normalizeArray(viewProviders), this.queries = _normalizeArray(queries), this.viewQueries = _normalizeArray(viewQueries), this.entryComponents = _normalizeArray(entryComponents), this.template = template } return CompileDirectiveMetadata.create = function (_a) { var _b = void 0 === _a ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template, hostListeners = {}, hostProperties = {}, hostAttributes = {}; isPresent(host) && Object.keys(host).forEach(function (key) { var value = host[key], matches = key.match(HOST_REG_EXP); null === matches ? hostAttributes[key] = value : isPresent(matches[1]) ? hostProperties[matches[1]] = value : isPresent(matches[2]) && (hostListeners[matches[2]] = value) }); var inputsMap = {}; isPresent(inputs) && inputs.forEach(function (bindConfig) { var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]); inputsMap[parts[0]] = parts[1] }); var outputsMap = {}; return isPresent(outputs) && outputs.forEach(function (bindConfig) { var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]); outputsMap[parts[0]] = parts[1] }), new CompileDirectiveMetadata({ isHost: isHost, type: type, isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection, inputs: inputsMap, outputs: outputsMap, hostListeners: hostListeners, hostProperties: hostProperties, hostAttributes: hostAttributes, providers: providers, viewProviders: viewProviders, queries: queries, viewQueries: viewQueries, entryComponents: entryComponents, template: template }) }, CompileDirectiveMetadata.prototype.toSummary = function () { return { summaryKind: CompileSummaryKind.Directive, type: this.type, isComponent: this.isComponent, selector: this.selector, exportAs: this.exportAs, inputs: this.inputs, outputs: this.outputs, hostListeners: this.hostListeners, hostProperties: this.hostProperties, hostAttributes: this.hostAttributes, providers: this.providers, viewProviders: this.viewProviders, queries: this.queries, entryComponents: this.entryComponents, changeDetection: this.changeDetection, template: this.template && this.template.toSummary() } }, CompileDirectiveMetadata }(), CompilePipeMetadata = function () { function CompilePipeMetadata(_a) { var _b = void 0 === _a ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure; this.type = type, this.name = name, this.pure = !!pure } return CompilePipeMetadata.prototype.toSummary = function () { return { summaryKind: CompileSummaryKind.Pipe, type: this.type, name: this.name, pure: this.pure } }, CompilePipeMetadata }(), CompileNgModuleMetadata = function () { function CompileNgModuleMetadata(_a) { var _b = void 0 === _a ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id; this.type = type, this.declaredDirectives = _normalizeArray(declaredDirectives), this.exportedDirectives = _normalizeArray(exportedDirectives), this.declaredPipes = _normalizeArray(declaredPipes), this.exportedPipes = _normalizeArray(exportedPipes), this.providers = _normalizeArray(providers), this.entryComponents = _normalizeArray(entryComponents), this.bootstrapComponents = _normalizeArray(bootstrapComponents), this.importedModules = _normalizeArray(importedModules), this.exportedModules = _normalizeArray(exportedModules), this.schemas = _normalizeArray(schemas), this.id = id, this.transitiveModule = transitiveModule } return CompileNgModuleMetadata.prototype.toSummary = function () { return { summaryKind: CompileSummaryKind.NgModule, type: this.type, entryComponents: this.transitiveModule.entryComponents, providers: this.transitiveModule.providers, modules: this.transitiveModule.modules, exportedDirectives: this.transitiveModule.exportedDirectives, exportedPipes: this.transitiveModule.exportedPipes } }, CompileNgModuleMetadata }(), TransitiveCompileNgModuleMetadata = function () { function TransitiveCompileNgModuleMetadata() { this.directivesSet = new Set, this.directives = [], this.exportedDirectivesSet = new Set, this.exportedDirectives = [], this.pipesSet = new Set, this.pipes = [], this.exportedPipesSet = new Set, this.exportedPipes = [], this.modulesSet = new Set, this.modules = [], this.entryComponentsSet = new Set, this.entryComponents = [], this.providers = [] } return TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) { this.providers.push({ provider: provider, module: module }) }, TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) { this.directivesSet.has(id.reference) || (this.directivesSet.add(id.reference), this.directives.push(id)) }, TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) { this.exportedDirectivesSet.has(id.reference) || (this.exportedDirectivesSet.add(id.reference), this.exportedDirectives.push(id)) }, TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) { this.pipesSet.has(id.reference) || (this.pipesSet.add(id.reference), this.pipes.push(id)) }, TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) { this.exportedPipesSet.has(id.reference) || (this.exportedPipesSet.add(id.reference), this.exportedPipes.push(id)) }, TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) { this.modulesSet.has(id.reference) || (this.modulesSet.add(id.reference), this.modules.push(id)) }, TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (id) { this.entryComponentsSet.has(id.reference) || (this.entryComponentsSet.add(id.reference), this.entryComponents.push(id)) }, TransitiveCompileNgModuleMetadata }(), ProviderMeta = function () { function ProviderMeta(token, _a) { var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi; this.token = token, this.useClass = useClass, this.useValue = useValue, this.useExisting = useExisting, this.useFactory = useFactory, this.dependencies = deps, this.multi = !!multi } return ProviderMeta }(), $EOF = 0, $TAB = 9, $LF = 10, $VTAB = 11, $FF = 12, $CR = 13, $SPACE = 32, $BANG = 33, $DQ = 34, $HASH = 35, $$ = 36, $PERCENT = 37, $AMPERSAND = 38, $SQ = 39, $LPAREN = 40, $RPAREN = 41, $STAR = 42, $PLUS = 43, $COMMA = 44, $MINUS = 45, $PERIOD = 46, $SLASH = 47, $COLON = 58, $SEMICOLON = 59, $LT = 60, $EQ = 61, $GT = 62, $QUESTION = 63, $0 = 48, $9 = 57, $A = 65, $E = 69, $F = 70, $X = 88, $Z = 90, $LBRACKET = 91, $BACKSLASH = 92, $RBRACKET = 93, $CARET = 94, $_ = 95, $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $x = 120, $z = 122, $LBRACE = 123, $BAR = 124, $RBRACE = 125, $NBSP = 160, $BT = 96, INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//], InterpolationConfig = function () { function InterpolationConfig(start, end) { this.start = start, this.end = end } return InterpolationConfig.fromArray = function (markers) { return markers ? (assertInterpolationSymbols("interpolation", markers), new InterpolationConfig(markers[0], markers[1])) : DEFAULT_INTERPOLATION_CONFIG }, InterpolationConfig }(), DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}"), __extends$4 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ParserError = function () { function ParserError(message, input, errLocation, ctxLocation) { this.input = input, this.errLocation = errLocation, this.ctxLocation = ctxLocation, this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation } return ParserError }(), ParseSpan = function () { function ParseSpan(start, end) { this.start = start, this.end = end } return ParseSpan }(), AST = function () { function AST(span) { this.span = span } return AST.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), null }, AST.prototype.toString = function () { return "AST" }, AST }(), Quote = function (_super) { function Quote(span, prefix, uninterpretedExpression, location) { _super.call(this, span), this.prefix = prefix, this.uninterpretedExpression = uninterpretedExpression, this.location = location } return __extends$4(Quote, _super), Quote.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitQuote(this, context) }, Quote.prototype.toString = function () { return "Quote" }, Quote }(AST), EmptyExpr = function (_super) { function EmptyExpr() { _super.apply(this, arguments) } return __extends$4(EmptyExpr, _super), EmptyExpr.prototype.visit = function (visitor, context) { void 0 === context && (context = null) }, EmptyExpr }(AST), ImplicitReceiver = function (_super) { function ImplicitReceiver() { _super.apply(this, arguments) } return __extends$4(ImplicitReceiver, _super), ImplicitReceiver.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitImplicitReceiver(this, context) }, ImplicitReceiver }(AST), Chain = function (_super) { function Chain(span, expressions) { _super.call(this, span), this.expressions = expressions } return __extends$4(Chain, _super), Chain.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitChain(this, context) }, Chain }(AST), Conditional = function (_super) { function Conditional(span, condition, trueExp, falseExp) { _super.call(this, span), this.condition = condition, this.trueExp = trueExp, this.falseExp = falseExp } return __extends$4(Conditional, _super), Conditional.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitConditional(this, context) }, Conditional }(AST), PropertyRead = function (_super) { function PropertyRead(span, receiver, name) { _super.call(this, span), this.receiver = receiver, this.name = name } return __extends$4(PropertyRead, _super), PropertyRead.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitPropertyRead(this, context) }, PropertyRead }(AST), PropertyWrite = function (_super) { function PropertyWrite(span, receiver, name, value) { _super.call(this, span), this.receiver = receiver, this.name = name, this.value = value } return __extends$4(PropertyWrite, _super), PropertyWrite.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitPropertyWrite(this, context) }, PropertyWrite }(AST), SafePropertyRead = function (_super) { function SafePropertyRead(span, receiver, name) { _super.call(this, span), this.receiver = receiver, this.name = name } return __extends$4(SafePropertyRead, _super), SafePropertyRead.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitSafePropertyRead(this, context) }, SafePropertyRead }(AST), KeyedRead = function (_super) { function KeyedRead(span, obj, key) { _super.call(this, span), this.obj = obj, this.key = key } return __extends$4(KeyedRead, _super), KeyedRead.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitKeyedRead(this, context) }, KeyedRead }(AST), KeyedWrite = function (_super) { function KeyedWrite(span, obj, key, value) { _super.call(this, span), this.obj = obj, this.key = key, this.value = value } return __extends$4(KeyedWrite, _super), KeyedWrite.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitKeyedWrite(this, context) }, KeyedWrite }(AST), BindingPipe = function (_super) { function BindingPipe(span, exp, name, args) { _super.call(this, span), this.exp = exp, this.name = name, this.args = args } return __extends$4(BindingPipe, _super), BindingPipe.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitPipe(this, context) }, BindingPipe }(AST), LiteralPrimitive = function (_super) { function LiteralPrimitive(span, value) { _super.call(this, span), this.value = value } return __extends$4(LiteralPrimitive, _super), LiteralPrimitive.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitLiteralPrimitive(this, context) }, LiteralPrimitive }(AST), LiteralArray = function (_super) { function LiteralArray(span, expressions) { _super.call(this, span), this.expressions = expressions } return __extends$4(LiteralArray, _super), LiteralArray.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitLiteralArray(this, context) }, LiteralArray }(AST), LiteralMap = function (_super) { function LiteralMap(span, keys, values) { _super.call(this, span), this.keys = keys, this.values = values } return __extends$4(LiteralMap, _super), LiteralMap.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitLiteralMap(this, context) }, LiteralMap }(AST), Interpolation = function (_super) { function Interpolation(span, strings, expressions) { _super.call(this, span), this.strings = strings, this.expressions = expressions } return __extends$4(Interpolation, _super), Interpolation.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitInterpolation(this, context) }, Interpolation }(AST), Binary = function (_super) { function Binary(span, operation, left, right) { _super.call(this, span), this.operation = operation, this.left = left, this.right = right } return __extends$4(Binary, _super), Binary.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitBinary(this, context) }, Binary }(AST), PrefixNot = function (_super) { function PrefixNot(span, expression) { _super.call(this, span), this.expression = expression } return __extends$4(PrefixNot, _super), PrefixNot.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitPrefixNot(this, context) }, PrefixNot }(AST), MethodCall = function (_super) { function MethodCall(span, receiver, name, args) { _super.call(this, span), this.receiver = receiver, this.name = name, this.args = args } return __extends$4(MethodCall, _super), MethodCall.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitMethodCall(this, context) }, MethodCall }(AST), SafeMethodCall = function (_super) { function SafeMethodCall(span, receiver, name, args) { _super.call(this, span), this.receiver = receiver, this.name = name, this.args = args } return __extends$4(SafeMethodCall, _super), SafeMethodCall.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitSafeMethodCall(this, context) }, SafeMethodCall }(AST), FunctionCall = function (_super) { function FunctionCall(span, target, args) { _super.call(this, span), this.target = target, this.args = args } return __extends$4(FunctionCall, _super), FunctionCall.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), visitor.visitFunctionCall(this, context) }, FunctionCall }(AST), ASTWithSource = function (_super) { function ASTWithSource(ast, source, location, errors) { _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length)), this.ast = ast, this.source = source, this.location = location, this.errors = errors } return __extends$4(ASTWithSource, _super), ASTWithSource.prototype.visit = function (visitor, context) { return void 0 === context && (context = null), this.ast.visit(visitor, context) }, ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location }, ASTWithSource }(AST), TemplateBinding = function () { function TemplateBinding(span, key, keyIsVar, name, expression) { this.span = span, this.key = key, this.keyIsVar = keyIsVar, this.name = name, this.expression = expression } return TemplateBinding }(), RecursiveAstVisitor = function () { function RecursiveAstVisitor() { } return RecursiveAstVisitor.prototype.visitBinary = function (ast, context) { return ast.left.visit(this), ast.right.visit(this), null }, RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context) }, RecursiveAstVisitor.prototype.visitConditional = function (ast, context) { return ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this), null }, RecursiveAstVisitor.prototype.visitPipe = function (ast, context) { return ast.exp.visit(this), this.visitAll(ast.args, context), null }, RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) { return ast.target.visit(this), this.visitAll(ast.args, context), null }, RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null }, RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) { return this.visitAll(ast.expressions, context) }, RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) { return ast.obj.visit(this), ast.key.visit(this), null }, RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) { return ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this), null }, RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) { return this.visitAll(ast.expressions, context) }, RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context) }, RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null }, RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) { return ast.receiver.visit(this), this.visitAll(ast.args, context) }, RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) { return ast.expression.visit(this), null }, RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) { return ast.receiver.visit(this), null }, RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) { return ast.receiver.visit(this), ast.value.visit(this), null }, RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) { return ast.receiver.visit(this), null }, RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) { return ast.receiver.visit(this), this.visitAll(ast.args, context) }, RecursiveAstVisitor.prototype.visitAll = function (asts, context) { var _this = this; return asts.forEach(function (ast) { return ast.visit(_this, context) }), null }, RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null }, RecursiveAstVisitor }(), __decorate$2 = this && this.__decorate || function (decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r
    }, __metadata$2 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, TokenType = {}; TokenType.Character = 0, TokenType.Identifier = 1, TokenType.Keyword = 2, TokenType.String = 3, TokenType.Operator = 4, TokenType.Number = 5, TokenType.Error = 6, TokenType[TokenType.Character] = "Character", TokenType[TokenType.Identifier] = "Identifier", TokenType[TokenType.Keyword] = "Keyword", TokenType[TokenType.String] = "String", TokenType[TokenType.Operator] = "Operator", TokenType[TokenType.Number] = "Number", TokenType[TokenType.Error] = "Error"; var KEYWORDS = ["var", "let", "null", "undefined", "true", "false", "if", "else", "this"], Lexer = function () { function Lexer() { } return Lexer.prototype.tokenize = function (text) { for (var scanner = new _Scanner(text), tokens = [], token = scanner.scanToken() ; null != token;) tokens.push(token), token = scanner.scanToken(); return tokens }, Lexer = __decorate$2([CompilerInjectable(), __metadata$2("design:paramtypes", [])], Lexer) }(), Token = function () { function Token(index, type, numValue, strValue) { this.index = index, this.type = type, this.numValue = numValue, this.strValue = strValue } return Token.prototype.isCharacter = function (code) { return this.type == TokenType.Character && this.numValue == code }, Token.prototype.isNumber = function () { return this.type == TokenType.Number }, Token.prototype.isString = function () { return this.type == TokenType.String }, Token.prototype.isOperator = function (operater) { return this.type == TokenType.Operator && this.strValue == operater }, Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier }, Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword }, Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && "let" == this.strValue }, Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && "null" == this.strValue }, Token.prototype.isKeywordUndefined = function () { return this.type == TokenType.Keyword && "undefined" == this.strValue }, Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && "true" == this.strValue }, Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && "false" == this.strValue }, Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && "this" == this.strValue }, Token.prototype.isError = function () { return this.type == TokenType.Error }, Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1 }, Token.prototype.toString = function () { switch (this.type) { case TokenType.Character: case TokenType.Identifier: case TokenType.Keyword: case TokenType.Operator: case TokenType.String: case TokenType.Error: return this.strValue; case TokenType.Number: return this.numValue.toString(); default: return null } }, Token }(), EOF = new Token((-1), TokenType.Character, 0, ""), _Scanner = function () { function _Scanner(input) { this.input = input, this.peek = 0, this.index = -1, this.length = input.length, this.advance() } return _Scanner.prototype.advance = function () { this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index) }, _Scanner.prototype.scanToken = function () { for (var input = this.input, length = this.length, peek = this.peek, index = this.index; peek <= $SPACE;) { if (++index >= length) { peek = $EOF; break } peek = input.charCodeAt(index) } if (this.peek = peek, this.index = index, index >= length) return null; if (isIdentifierStart(peek)) return this.scanIdentifier(); if (isDigit(peek)) return this.scanNumber(index); var start = index; switch (peek) { case $PERIOD: return this.advance(), isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD); case $LPAREN: case $RPAREN: case $LBRACE: case $RBRACE: case $LBRACKET: case $RBRACKET: case $COMMA: case $COLON: case $SEMICOLON: return this.scanCharacter(start, peek); case $SQ: case $DQ: return this.scanString(); case $HASH: case $PLUS: case $MINUS: case $STAR: case $SLASH: case $PERCENT: case $CARET: return this.scanOperator(start, String.fromCharCode(peek)); case $QUESTION: return this.scanComplexOperator(start, "?", $PERIOD, "."); case $LT: case $GT: return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "="); case $BANG: case $EQ: return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "="); case $AMPERSAND: return this.scanComplexOperator(start, "&", $AMPERSAND, "&"); case $BAR: return this.scanComplexOperator(start, "|", $BAR, "|"); case $NBSP: for (; isWhitespace(this.peek) ;) this.advance(); return this.scanToken() } return this.advance(), this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0) }, _Scanner.prototype.scanCharacter = function (start, code) { return this.advance(), newCharacterToken(start, code) }, _Scanner.prototype.scanOperator = function (start, str) { return this.advance(), newOperatorToken(start, str) }, _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) { this.advance(); var str = one; return this.peek == twoCode && (this.advance(), str += two), isPresent(threeCode) && this.peek == threeCode && (this.advance(), str += three), newOperatorToken(start, str) }, _Scanner.prototype.scanIdentifier = function () { var start = this.index; for (this.advance() ; isIdentifierPart(this.peek) ;) this.advance(); var str = this.input.substring(start, this.index); return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str) }, _Scanner.prototype.scanNumber = function (start) { var simple = this.index === start; for (this.advance() ; ;) { if (isDigit(this.peek)); else if (this.peek == $PERIOD) simple = !1; else { if (!isExponentStart(this.peek)) break; if (this.advance(), isExponentSign(this.peek) && this.advance(), !isDigit(this.peek)) return this.error("Invalid exponent", -1); simple = !1 } this.advance() } var str = this.input.substring(start, this.index), value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str); return newNumberToken(start, value) }, _Scanner.prototype.scanString = function () { var start = this.index, quote = this.peek; this.advance(); for (var buffer = "", marker = this.index, input = this.input; this.peek != quote;) if (this.peek == $BACKSLASH) { buffer += input.substring(marker, this.index), this.advance(); var unescapedCode = void 0; if (this.peek == $u) { var hex = input.substring(this.index + 1, this.index + 5); if (!/^[0-9a-f]+$/i.test(hex)) return this.error("Invalid unicode escape [\\u" + hex + "]", 0); unescapedCode = parseInt(hex, 16); for (var i = 0; i < 5; i++) this.advance() } else unescapedCode = unescape(this.peek), this.advance(); buffer += String.fromCharCode(unescapedCode), marker = this.index } else { if (this.peek == $EOF) return this.error("Unterminated quote", 0); this.advance() } var last = input.substring(marker, this.index); return this.advance(), newStringToken(start, buffer + last) }, _Scanner.prototype.error = function (message, offset) { var position = this.index + offset; return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]") }, _Scanner }(), __decorate$1 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$1 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, SplitInterpolation = function () { function SplitInterpolation(strings, expressions, offsets) { this.strings = strings, this.expressions = expressions, this.offsets = offsets } return SplitInterpolation }(), TemplateBindingParseResult = function () { function TemplateBindingParseResult(templateBindings, warnings, errors) { this.templateBindings = templateBindings, this.warnings = warnings, this.errors = errors } return TemplateBindingParseResult }(), Parser = function () { function Parser(_lexer) { this._lexer = _lexer, this.errors = [] } return Parser.prototype.parseAction = function (input, location, interpolationConfig) { void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._checkNoInterpolation(input, location, interpolationConfig); var sourceToLex = this._stripComments(input), tokens = this._lexer.tokenize(this._stripComments(input)), ast = new _ParseAST(input, location, tokens, sourceToLex.length, (!0), this.errors, input.length - sourceToLex.length).parseChain(); return new ASTWithSource(ast, input, location, this.errors) }, Parser.prototype.parseBinding = function (input, location, interpolationConfig) { void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG); var ast = this._parseBindingAst(input, location, interpolationConfig); return new ASTWithSource(ast, input, location, this.errors) }, Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) { void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG); var ast = this._parseBindingAst(input, location, interpolationConfig), errors = SimpleExpressionChecker.check(ast); return errors.length > 0 && this._reportError("Host binding expression cannot contain " + errors.join(" "), input, location), new ASTWithSource(ast, input, location, this.errors) }, Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) { this.errors.push(new ParserError(message, input, errLocation, ctxLocation)) }, Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) { var quote = this._parseQuote(input, location); if (isPresent(quote)) return quote; this._checkNoInterpolation(input, location, interpolationConfig); var sourceToLex = this._stripComments(input), tokens = this._lexer.tokenize(sourceToLex); return new _ParseAST(input, location, tokens, sourceToLex.length, (!1), this.errors, input.length - sourceToLex.length).parseChain() }, Parser.prototype._parseQuote = function (input, location) { if (isBlank(input)) return null; var prefixSeparatorIndex = input.indexOf(":"); if (prefixSeparatorIndex == -1) return null; var prefix = input.substring(0, prefixSeparatorIndex).trim(); if (!isIdentifier(prefix)) return null; var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1); return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location) }, Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) { var tokens = this._lexer.tokenize(input); if (prefixToken) { var prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) { return t.index = 0, t }); tokens.unshift.apply(tokens, prefixTokens) } return new _ParseAST(input, location, tokens, input.length, (!1), this.errors, 0).parseTemplateBindings() }, Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) { void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG); var split = this.splitInterpolation(input, location, interpolationConfig); if (null == split) return null; for (var expressions = [], i = 0; i < split.expressions.length; ++i) { var expressionText = split.expressions[i], sourceToLex = this._stripComments(expressionText), tokens = this._lexer.tokenize(this._stripComments(split.expressions[i])), ast = new _ParseAST(input, location, tokens, sourceToLex.length, (!1), this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain(); expressions.push(ast) } return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors) }, Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) { void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG); var regexp = _createInterpolateRegExp(interpolationConfig), parts = input.split(regexp); if (parts.length <= 1) return null; for (var strings = [], expressions = [], offsets = [], offset = 0, i = 0; i < parts.length; i++) { var part = parts[i]; i % 2 === 0 ? (strings.push(part), offset += part.length) : part.trim().length > 0 ? (offset += interpolationConfig.start.length, expressions.push(part), offsets.push(offset), offset += part.length + interpolationConfig.end.length) : (this._reportError("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location), expressions.push("$implict"), offsets.push(offset)) } return new SplitInterpolation(strings, expressions, offsets) }, Parser.prototype.wrapLiteralPrimitive = function (input, location) { return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors) }, Parser.prototype._stripComments = function (input) { var i = this._commentStart(input); return isPresent(i) ? input.substring(0, i).trim() : input }, Parser.prototype._commentStart = function (input) { for (var outerQuote = null, i = 0; i < input.length - 1; i++) { var char = input.charCodeAt(i), nextChar = input.charCodeAt(i + 1); if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote)) return i; outerQuote === char ? outerQuote = null : isBlank(outerQuote) && isQuote(char) && (outerQuote = char) } return null }, Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) { var regexp = _createInterpolateRegExp(interpolationConfig), parts = input.split(regexp); parts.length > 1 && this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location) }, Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) { for (var errLocation = "", j = 0; j < partInErrIdx; j++) errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end; return errLocation.length }, Parser = __decorate$1([CompilerInjectable(), __metadata$1("design:paramtypes", [Lexer])], Parser) }(), _ParseAST = function () { function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) { this.input = input, this.location = location, this.tokens = tokens, this.inputLength = inputLength, this.parseAction = parseAction, this.errors = errors, this.offset = offset, this.rparensExpected = 0, this.rbracketsExpected = 0, this.rbracesExpected = 0, this.index = 0 } return _ParseAST.prototype.peek = function (offset) { var i = this.index + offset; return i < this.tokens.length ? this.tokens[i] : EOF }, Object.defineProperty(_ParseAST.prototype, "next", { get: function () { return this.peek(0) }, enumerable: !0, configurable: !0 }), Object.defineProperty(_ParseAST.prototype, "inputIndex", { get: function () { return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset }, enumerable: !0, configurable: !0 }), _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex) }, _ParseAST.prototype.advance = function () { this.index++ }, _ParseAST.prototype.optionalCharacter = function (code) { return !!this.next.isCharacter(code) && (this.advance(), !0) }, _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet() }, _ParseAST.prototype.expectCharacter = function (code) { this.optionalCharacter(code) || this.error("Missing expected " + String.fromCharCode(code)) }, _ParseAST.prototype.optionalOperator = function (op) { return !!this.next.isOperator(op) && (this.advance(), !0) }, _ParseAST.prototype.expectOperator = function (operator) { this.optionalOperator(operator) || this.error("Missing expected operator " + operator) }, _ParseAST.prototype.expectIdentifierOrKeyword = function () { var n = this.next; return n.isIdentifier() || n.isKeyword() ? (this.advance(), n.toString()) : (this.error("Unexpected token " + n + ", expected identifier or keyword"), "") }, _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () { var n = this.next; return n.isIdentifier() || n.isKeyword() || n.isString() ? (this.advance(), n.toString()) : (this.error("Unexpected token " + n + ", expected identifier, keyword, or string"), "") }, _ParseAST.prototype.parseChain = function () { for (var exprs = [], start = this.inputIndex; this.index < this.tokens.length;) { var expr = this.parsePipe(); if (exprs.push(expr), this.optionalCharacter($SEMICOLON)) for (this.parseAction || this.error("Binding expression cannot contain chained expression") ; this.optionalCharacter($SEMICOLON) ;); else this.index < this.tokens.length && this.error("Unexpected token '" + this.next + "'") } return 0 == exprs.length ? new EmptyExpr(this.span(start)) : 1 == exprs.length ? exprs[0] : new Chain(this.span(start), exprs) }, _ParseAST.prototype.parsePipe = function () { var result = this.parseExpression(); if (this.optionalOperator("|")) { this.parseAction && this.error("Cannot have a pipe in an action expression"); do { for (var name_1 = this.expectIdentifierOrKeyword(), args = []; this.optionalCharacter($COLON) ;) args.push(this.parseExpression()); result = new BindingPipe(this.span(result.span.start), result, name_1, args) } while (this.optionalOperator("|")) } return result }, _ParseAST.prototype.parseExpression = function () { return this.parseConditional() }, _ParseAST.prototype.parseConditional = function () { var start = this.inputIndex, result = this.parseLogicalOr(); if (this.optionalOperator("?")) { var yes = this.parsePipe(), no = void 0; if (this.optionalCharacter($COLON)) no = this.parsePipe(); else { var end = this.inputIndex, expression = this.input.substring(start, end); this.error("Conditional expression " + expression + " requires all 3 expressions"), no = new EmptyExpr(this.span(start)) } return new Conditional(this.span(start), result, yes, no) } return result }, _ParseAST.prototype.parseLogicalOr = function () { for (var result = this.parseLogicalAnd() ; this.optionalOperator("||") ;) { var right = this.parseLogicalAnd(); result = new Binary(this.span(result.span.start), "||", result, right) } return result }, _ParseAST.prototype.parseLogicalAnd = function () { for (var result = this.parseEquality() ; this.optionalOperator("&&") ;) { var right = this.parseEquality(); result = new Binary(this.span(result.span.start), "&&", result, right) } return result }, _ParseAST.prototype.parseEquality = function () { for (var result = this.parseRelational() ; this.next.type == TokenType.Operator;) { var operator = this.next.strValue; switch (operator) { case "==": case "===": case "!=": case "!==": this.advance(); var right = this.parseRelational(); result = new Binary(this.span(result.span.start), operator, result, right); continue } break } return result }, _ParseAST.prototype.parseRelational = function () { for (var result = this.parseAdditive() ; this.next.type == TokenType.Operator;) { var operator = this.next.strValue; switch (operator) { case "<": case ">": case "<=": case ">=": this.advance(); var right = this.parseAdditive(); result = new Binary(this.span(result.span.start), operator, result, right); continue } break } return result }, _ParseAST.prototype.parseAdditive = function () { for (var result = this.parseMultiplicative() ; this.next.type == TokenType.Operator;) { var operator = this.next.strValue; switch (operator) { case "+": case "-": this.advance(); var right = this.parseMultiplicative(); result = new Binary(this.span(result.span.start), operator, result, right); continue } break } return result }, _ParseAST.prototype.parseMultiplicative = function () { for (var result = this.parsePrefix() ; this.next.type == TokenType.Operator;) { var operator = this.next.strValue; switch (operator) { case "*": case "%": case "/": this.advance(); var right = this.parsePrefix(); result = new Binary(this.span(result.span.start), operator, result, right); continue } break } return result }, _ParseAST.prototype.parsePrefix = function () { if (this.next.type == TokenType.Operator) { var start = this.inputIndex, operator = this.next.strValue, result = void 0; switch (operator) { case "+": return this.advance(), this.parsePrefix(); case "-": return this.advance(), result = this.parsePrefix(), new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result); case "!": return this.advance(), result = this.parsePrefix(), new PrefixNot(this.span(start), result) } } return this.parseCallChain() }, _ParseAST.prototype.parseCallChain = function () { for (var result = this.parsePrimary() ; ;) if (this.optionalCharacter($PERIOD)) result = this.parseAccessMemberOrMethodCall(result, !1); else if (this.optionalOperator("?.")) result = this.parseAccessMemberOrMethodCall(result, !0); else if (this.optionalCharacter($LBRACKET)) { this.rbracketsExpected++; var key = this.parsePipe(); if (this.rbracketsExpected--, this.expectCharacter($RBRACKET), this.optionalOperator("=")) { var value = this.parseConditional(); result = new KeyedWrite(this.span(result.span.start), result, key, value) } else result = new KeyedRead(this.span(result.span.start), result, key) } else { if (!this.optionalCharacter($LPAREN)) return result; this.rparensExpected++; var args = this.parseCallArguments(); this.rparensExpected--, this.expectCharacter($RPAREN), result = new FunctionCall(this.span(result.span.start), result, args) } }, _ParseAST.prototype.parsePrimary = function () { var start = this.inputIndex; if (this.optionalCharacter($LPAREN)) { this.rparensExpected++; var result = this.parsePipe(); return this.rparensExpected--, this.expectCharacter($RPAREN), result } if (this.next.isKeywordNull()) return this.advance(), new LiteralPrimitive(this.span(start), null); if (this.next.isKeywordUndefined()) return this.advance(), new LiteralPrimitive(this.span(start), (void 0)); if (this.next.isKeywordTrue()) return this.advance(), new LiteralPrimitive(this.span(start), (!0)); if (this.next.isKeywordFalse()) return this.advance(), new LiteralPrimitive(this.span(start), (!1)); if (this.next.isKeywordThis()) return this.advance(), new ImplicitReceiver(this.span(start)); if (this.optionalCharacter($LBRACKET)) { this.rbracketsExpected++; var elements = this.parseExpressionList($RBRACKET); return this.rbracketsExpected--, this.expectCharacter($RBRACKET), new LiteralArray(this.span(start), elements) } if (this.next.isCharacter($LBRACE)) return this.parseLiteralMap(); if (this.next.isIdentifier()) return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), !1); if (this.next.isNumber()) { var value = this.next.toNumber(); return this.advance(), new LiteralPrimitive(this.span(start), value) } if (this.next.isString()) { var literalValue = this.next.toString(); return this.advance(), new LiteralPrimitive(this.span(start), literalValue) } return this.index >= this.tokens.length ? (this.error("Unexpected end of expression: " + this.input), new EmptyExpr(this.span(start))) : (this.error("Unexpected token " + this.next), new EmptyExpr(this.span(start))) }, _ParseAST.prototype.parseExpressionList = function (terminator) { var result = []; if (!this.next.isCharacter(terminator)) do result.push(this.parsePipe()); while (this.optionalCharacter($COMMA)); return result }, _ParseAST.prototype.parseLiteralMap = function () { var keys = [], values = [], start = this.inputIndex; if (this.expectCharacter($LBRACE), !this.optionalCharacter($RBRACE)) { this.rbracesExpected++; do { var key = this.expectIdentifierOrKeywordOrString(); keys.push(key), this.expectCharacter($COLON), values.push(this.parsePipe()) } while (this.optionalCharacter($COMMA)); this.rbracesExpected--, this.expectCharacter($RBRACE) } return new LiteralMap(this.span(start), keys, values) }, _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) { void 0 === isSafe && (isSafe = !1); var start = receiver.span.start, id = this.expectIdentifierOrKeyword(); if (this.optionalCharacter($LPAREN)) { this.rparensExpected++; var args = this.parseCallArguments(); this.expectCharacter($RPAREN), this.rparensExpected--; var span = this.span(start); return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args) } if (isSafe) return this.optionalOperator("=") ? (this.error("The '?.' operator cannot be used in the assignment"), new EmptyExpr(this.span(start))) : new SafePropertyRead(this.span(start), receiver, id); if (this.optionalOperator("=")) { if (!this.parseAction) return this.error("Bindings cannot contain assignments"), new EmptyExpr(this.span(start)); var value = this.parseConditional(); return new PropertyWrite(this.span(start), receiver, id, value) } return new PropertyRead(this.span(start), receiver, id) }, _ParseAST.prototype.parseCallArguments = function () { if (this.next.isCharacter($RPAREN)) return []; var positionals = []; do positionals.push(this.parsePipe()); while (this.optionalCharacter($COMMA)); return positionals }, _ParseAST.prototype.expectTemplateBindingKey = function () { var result = "", operatorFound = !1; do result += this.expectIdentifierOrKeywordOrString(), operatorFound = this.optionalOperator("-"), operatorFound && (result += "-"); while (operatorFound); return result.toString() }, _ParseAST.prototype.parseTemplateBindings = function () { for (var bindings = [], prefix = null, warnings = []; this.index < this.tokens.length;) { var start = this.inputIndex, keyIsVar = this.peekKeywordLet(); keyIsVar && this.advance(); var key = this.expectTemplateBindingKey(); keyIsVar || (null == prefix ? prefix = key : key = prefix + key[0].toUpperCase() + key.substring(1)), this.optionalCharacter($COLON); var name_2 = null, expression = null; if (keyIsVar) name_2 = this.optionalOperator("=") ? this.expectTemplateBindingKey() : "$implicit"; else if (this.next !== EOF && !this.peekKeywordLet()) { var start_1 = this.inputIndex, ast = this.parsePipe(), source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset); expression = new ASTWithSource(ast, source, this.location, this.errors) } bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression)), this.optionalCharacter($SEMICOLON) || this.optionalCharacter($COMMA) } return new TemplateBindingParseResult(bindings, warnings, this.errors) }, _ParseAST.prototype.error = function (message, index) { void 0 === index && (index = null), this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location)), this.skip() }, _ParseAST.prototype.locationText = function (index) { return void 0 === index && (index = null), isBlank(index) && (index = this.index), index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression" }, _ParseAST.prototype.skip = function () { for (var n = this.next; this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) ;) this.next.isError() && this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location)), this.advance(), n = this.next }, _ParseAST }(), SimpleExpressionChecker = function () { function SimpleExpressionChecker() { this.errors = [] } return SimpleExpressionChecker.check = function (ast) { var s = new SimpleExpressionChecker; return ast.visit(s), s.errors }, SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { }, SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { }, SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { }, SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { }, SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { }, SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { }, SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { }, SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { }, SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { }, SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions) }, SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values) }, SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { }, SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { }, SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { }, SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push("pipes") }, SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { }, SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { }, SimpleExpressionChecker.prototype.visitAll = function (asts) { var _this = this; return asts.map(function (node) { return node.visit(_this) }) }, SimpleExpressionChecker.prototype.visitChain = function (ast, context) { }, SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { }, SimpleExpressionChecker }(), ParseLocation = function () { function ParseLocation(file, offset, line, col) { this.file = file, this.offset = offset, this.line = line, this.col = col } return ParseLocation.prototype.toString = function () { return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url }, ParseLocation.prototype.moveBy = function (delta) { for (var source = this.file.content, len = source.length, offset = this.offset, line = this.line, col = this.col; offset > 0 && delta < 0;) { offset--, delta++; var ch = source.charCodeAt(offset); if (ch == $LF) { line--; var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF)); col = priorLine > 0 ? offset - priorLine : offset } else col-- } for (; offset < len && delta > 0;) { var ch = source.charCodeAt(offset); offset++, delta--, ch == $LF ? (line++, col = 0) : col++ } return new ParseLocation(this.file, offset, line, col) }, ParseLocation }(), ParseSourceFile = function () { function ParseSourceFile(content, url) { this.content = content, this.url = url } return ParseSourceFile }(), ParseSourceSpan = function () { function ParseSourceSpan(start, end, details) { void 0 === details && (details = null), this.start = start, this.end = end, this.details = details } return ParseSourceSpan.prototype.toString = function () { return this.start.file.content.substring(this.start.offset, this.end.offset) }, ParseSourceSpan }(), ParseErrorLevel = {}; ParseErrorLevel.WARNING = 0, ParseErrorLevel.FATAL = 1, ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING", ParseErrorLevel[ParseErrorLevel.FATAL] = "FATAL"; var ParseError = function () { function ParseError(span, msg, level) { void 0 === level && (level = ParseErrorLevel.FATAL), this.span = span, this.msg = msg, this.level = level } return ParseError.prototype.toString = function () { var source = this.span.start.file.content, ctxStart = this.span.start.offset, contextStr = "", details = ""; if (isPresent(ctxStart)) { ctxStart > source.length - 1 && (ctxStart = source.length - 1); for (var ctxEnd = ctxStart, ctxLen = 0, ctxLines = 0; ctxLen < 100 && ctxStart > 0 && (ctxStart--, ctxLen++, "\n" != source[ctxStart] || 3 != ++ctxLines) ;); for (ctxLen = 0, ctxLines = 0; ctxLen < 100 && ctxEnd < source.length - 1 && (ctxEnd++, ctxLen++, "\n" != source[ctxEnd] || 3 != ++ctxLines) ;); var context = source.substring(ctxStart, this.span.start.offset) + "[ERROR ->]" + source.substring(this.span.start.offset, ctxEnd + 1); contextStr = ' ("' + context + '")' } return this.span.details && (details = ", " + this.span.details), "" + this.msg + contextStr + ": " + this.span.start + details }, ParseError }(), Text = function () { function Text(value, sourceSpan) { this.value = value, this.sourceSpan = sourceSpan } return Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context) }, Text }(), Expansion = function () { function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) { this.switchValue = switchValue, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan, this.switchValueSourceSpan = switchValueSourceSpan } return Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context) }, Expansion }(), ExpansionCase = function () { function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) { this.value = value, this.expression = expression, this.sourceSpan = sourceSpan, this.valueSourceSpan = valueSourceSpan, this.expSourceSpan = expSourceSpan } return ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context) }, ExpansionCase }(), Attribute$1 = function () { function Attribute(name, value, sourceSpan, valueSpan) { this.name = name, this.value = value, this.sourceSpan = sourceSpan, this.valueSpan = valueSpan } return Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context) }, Attribute }(), Element = function () { function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) { this.name = name, this.attrs = attrs, this.children = children, this.sourceSpan = sourceSpan, this.startSourceSpan = startSourceSpan, this.endSourceSpan = endSourceSpan } return Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context) }, Element }(), Comment = function () { function Comment(value, sourceSpan) { this.value = value, this.sourceSpan = sourceSpan } return Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context) }, Comment }(), __extends$6 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, TokenType$1 = {}; TokenType$1.TAG_OPEN_START = 0, TokenType$1.TAG_OPEN_END = 1, TokenType$1.TAG_OPEN_END_VOID = 2, TokenType$1.TAG_CLOSE = 3, TokenType$1.TEXT = 4, TokenType$1.ESCAPABLE_RAW_TEXT = 5, TokenType$1.RAW_TEXT = 6, TokenType$1.COMMENT_START = 7, TokenType$1.COMMENT_END = 8, TokenType$1.CDATA_START = 9, TokenType$1.CDATA_END = 10, TokenType$1.ATTR_NAME = 11, TokenType$1.ATTR_VALUE = 12, TokenType$1.DOC_TYPE = 13,
    TokenType$1.EXPANSION_FORM_START = 14, TokenType$1.EXPANSION_CASE_VALUE = 15, TokenType$1.EXPANSION_CASE_EXP_START = 16, TokenType$1.EXPANSION_CASE_EXP_END = 17, TokenType$1.EXPANSION_FORM_END = 18, TokenType$1.EOF = 19, TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START", TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END", TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID", TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE", TokenType$1[TokenType$1.TEXT] = "TEXT", TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT", TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT", TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START", TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END", TokenType$1[TokenType$1.CDATA_START] = "CDATA_START", TokenType$1[TokenType$1.CDATA_END] = "CDATA_END", TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME", TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE", TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE", TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START", TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE", TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START", TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END", TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END", TokenType$1[TokenType$1.EOF] = "EOF"; var Token$1 = function () { function Token(type, parts, sourceSpan) { this.type = type, this.parts = parts, this.sourceSpan = sourceSpan } return Token }(), TokenError = function (_super) { function TokenError(errorMsg, tokenType, span) { _super.call(this, span, errorMsg), this.tokenType = tokenType } return __extends$6(TokenError, _super), TokenError }(ParseError), TokenizeResult = function () { function TokenizeResult(tokens, errors) { this.tokens = tokens, this.errors = errors } return TokenizeResult }(), _CR_OR_CRLF_REGEXP = /\r\n?/g, _ControlFlowError = function () { function _ControlFlowError(error) { this.error = error } return _ControlFlowError }(), _Tokenizer = function () { function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) { void 0 === _interpolationConfig && (_interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._file = _file, this._getTagDefinition = _getTagDefinition, this._tokenizeIcu = _tokenizeIcu, this._interpolationConfig = _interpolationConfig, this._peek = -1, this._nextPeek = -1, this._index = -1, this._line = 0, this._column = -1, this._expansionCaseStack = [], this._inInterpolation = !1, this.tokens = [], this.errors = [], this._input = _file.content, this._length = _file.content.length, this._advance() } return _Tokenizer.prototype._processCarriageReturns = function (content) { return content.replace(_CR_OR_CRLF_REGEXP, "\n") }, _Tokenizer.prototype.tokenize = function () { for (; this._peek !== $EOF;) { var start = this._getLocation(); try { this._attemptCharCode($LT) ? this._attemptCharCode($BANG) ? this._attemptCharCode($LBRACKET) ? this._consumeCdata(start) : this._attemptCharCode($MINUS) ? this._consumeComment(start) : this._consumeDocType(start) : this._attemptCharCode($SLASH) ? this._consumeTagClose(start) : this._consumeTagOpen(start) : this._tokenizeIcu && this._tokenizeExpansionForm() || this._consumeText() } catch (e) { if (!(e instanceof _ControlFlowError)) throw e; this.errors.push(e.error) } } return this._beginToken(TokenType$1.EOF), this._endToken([]), new TokenizeResult(mergeTextTokens(this.tokens), this.errors) }, _Tokenizer.prototype._tokenizeExpansionForm = function () { if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) return this._consumeExpansionFormStart(), !0; if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) return this._consumeExpansionCaseStart(), !0; if (this._peek === $RBRACE) { if (this._isInExpansionCase()) return this._consumeExpansionCaseEnd(), !0; if (this._isInExpansionForm()) return this._consumeExpansionFormEnd(), !0 } return !1 }, _Tokenizer.prototype._getLocation = function () { return new ParseLocation(this._file, this._index, this._line, this._column) }, _Tokenizer.prototype._getSpan = function (start, end) { return void 0 === start && (start = this._getLocation()), void 0 === end && (end = this._getLocation()), new ParseSourceSpan(start, end) }, _Tokenizer.prototype._beginToken = function (type, start) { void 0 === start && (start = this._getLocation()), this._currentTokenStart = start, this._currentTokenType = type }, _Tokenizer.prototype._endToken = function (parts, end) { void 0 === end && (end = this._getLocation()); var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end)); return this.tokens.push(token), this._currentTokenStart = null, this._currentTokenType = null, token }, _Tokenizer.prototype._createError = function (msg, span) { this._isInExpansionForm() && (msg += ' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)'); var error = new TokenError(msg, this._currentTokenType, span); return this._currentTokenStart = null, this._currentTokenType = null, new _ControlFlowError(error) }, _Tokenizer.prototype._advance = function () { if (this._index >= this._length) throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan()); this._peek === $LF ? (this._line++, this._column = 0) : this._peek !== $LF && this._peek !== $CR && this._column++, this._index++, this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index), this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1) }, _Tokenizer.prototype._attemptCharCode = function (charCode) { return this._peek === charCode && (this._advance(), !0) }, _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) { return !!compareCharCodeCaseInsensitive(this._peek, charCode) && (this._advance(), !0) }, _Tokenizer.prototype._requireCharCode = function (charCode) { var location = this._getLocation(); if (!this._attemptCharCode(charCode)) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location)) }, _Tokenizer.prototype._attemptStr = function (chars) { var len = chars.length; if (this._index + len > this._length) return !1; for (var initialPosition = this._savePosition(), i = 0; i < len; i++) if (!this._attemptCharCode(chars.charCodeAt(i))) return this._restorePosition(initialPosition), !1; return !0 }, _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) { for (var i = 0; i < chars.length; i++) if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) return !1; return !0 }, _Tokenizer.prototype._requireStr = function (chars) { var location = this._getLocation(); if (!this._attemptStr(chars)) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location)) }, _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) { for (; !predicate(this._peek) ;) this._advance() }, _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) { var start = this._getLocation(); if (this._attemptCharCodeUntilFn(predicate), this._index - start.offset < len) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start)) }, _Tokenizer.prototype._attemptUntilChar = function (char) { for (; this._peek !== char;) this._advance() }, _Tokenizer.prototype._readChar = function (decodeEntities) { if (decodeEntities && this._peek === $AMPERSAND) return this._decodeEntity(); var index = this._index; return this._advance(), this._input[index] }, _Tokenizer.prototype._decodeEntity = function () { var start = this._getLocation(); if (this._advance(), !this._attemptCharCode($HASH)) { var startPosition = this._savePosition(); if (this._attemptCharCodeUntilFn(isNamedEntityEnd), this._peek != $SEMICOLON) return this._restorePosition(startPosition), "&"; this._advance(); var name_1 = this._input.substring(start.offset + 1, this._index - 1), char = NAMED_ENTITIES[name_1]; if (!char) throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start)); return char } var isHex = this._attemptCharCode($x) || this._attemptCharCode($X), numberStart = this._getLocation().offset; if (this._attemptCharCodeUntilFn(isDigitEntityEnd), this._peek != $SEMICOLON) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan()); this._advance(); var strNum = this._input.substring(numberStart, this._index - 1); try { var charCode = parseInt(strNum, isHex ? 16 : 10); return String.fromCharCode(charCode) } catch (e) { var entity = this._input.substring(start.offset + 1, this._index - 1); throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start)) } }, _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) { var tagCloseStart, textStart = this._getLocation(); this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart); for (var parts = []; ;) { if (tagCloseStart = this._getLocation(), this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) break; for (this._index > tagCloseStart.offset && parts.push(this._input.substring(tagCloseStart.offset, this._index)) ; this._peek !== firstCharOfEnd;) parts.push(this._readChar(decodeEntities)) } return this._endToken([this._processCarriageReturns(parts.join(""))], tagCloseStart) }, _Tokenizer.prototype._consumeComment = function (start) { var _this = this; this._beginToken(TokenType$1.COMMENT_START, start), this._requireCharCode($MINUS), this._endToken([]); var textToken = this._consumeRawText(!1, $MINUS, function () { return _this._attemptStr("->") }); this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end), this._endToken([]) }, _Tokenizer.prototype._consumeCdata = function (start) { var _this = this; this._beginToken(TokenType$1.CDATA_START, start), this._requireStr("CDATA["), this._endToken([]); var textToken = this._consumeRawText(!1, $RBRACKET, function () { return _this._attemptStr("]>") }); this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end), this._endToken([]) }, _Tokenizer.prototype._consumeDocType = function (start) { this._beginToken(TokenType$1.DOC_TYPE, start), this._attemptUntilChar($GT), this._advance(), this._endToken([this._input.substring(start.offset + 2, this._index - 1)]) }, _Tokenizer.prototype._consumePrefixAndName = function () { for (var nameOrPrefixStart = this._index, prefix = null; this._peek !== $COLON && !isPrefixEnd(this._peek) ;) this._advance(); var nameStart; this._peek === $COLON ? (this._advance(), prefix = this._input.substring(nameOrPrefixStart, this._index - 1), nameStart = this._index) : nameStart = nameOrPrefixStart, this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0); var name = this._input.substring(nameStart, this._index); return [prefix, name] }, _Tokenizer.prototype._consumeTagOpen = function (start) { var tagName, lowercaseTagName, savedPos = this._savePosition(); try { if (!isAsciiLetter(this._peek)) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan()); var nameStart = this._index; for (this._consumeTagOpenStart(start), tagName = this._input.substring(nameStart, this._index), lowercaseTagName = tagName.toLowerCase(), this._attemptCharCodeUntilFn(isNotWhitespace) ; this._peek !== $SLASH && this._peek !== $GT;) this._consumeAttributeName(), this._attemptCharCodeUntilFn(isNotWhitespace), this._attemptCharCode($EQ) && (this._attemptCharCodeUntilFn(isNotWhitespace), this._consumeAttributeValue()), this._attemptCharCodeUntilFn(isNotWhitespace); this._consumeTagOpenEnd() } catch (e) { if (e instanceof _ControlFlowError) return this._restorePosition(savedPos), this._beginToken(TokenType$1.TEXT, start), void this._endToken(["<"]); throw e } var contentTokenType = this._getTagDefinition(tagName).contentType; contentTokenType === TagContentType.RAW_TEXT ? this._consumeRawTextWithTagClose(lowercaseTagName, !1) : contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT && this._consumeRawTextWithTagClose(lowercaseTagName, !0) }, _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) { var _this = this, textToken = this._consumeRawText(decodeEntities, $LT, function () { return !!_this._attemptCharCode($SLASH) && (_this._attemptCharCodeUntilFn(isNotWhitespace), !!_this._attemptStrCaseInsensitive(lowercaseTagName) && (_this._attemptCharCodeUntilFn(isNotWhitespace), _this._attemptCharCode($GT))) }); this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end), this._endToken([null, lowercaseTagName]) }, _Tokenizer.prototype._consumeTagOpenStart = function (start) { this._beginToken(TokenType$1.TAG_OPEN_START, start); var parts = this._consumePrefixAndName(); this._endToken(parts) }, _Tokenizer.prototype._consumeAttributeName = function () { this._beginToken(TokenType$1.ATTR_NAME); var prefixAndName = this._consumePrefixAndName(); this._endToken(prefixAndName) }, _Tokenizer.prototype._consumeAttributeValue = function () { this._beginToken(TokenType$1.ATTR_VALUE); var value; if (this._peek === $SQ || this._peek === $DQ) { var quoteChar = this._peek; this._advance(); for (var parts = []; this._peek !== quoteChar;) parts.push(this._readChar(!0)); value = parts.join(""), this._advance() } else { var valueStart = this._index; this._requireCharCodeUntilFn(isNameEnd, 1), value = this._input.substring(valueStart, this._index) } this._endToken([this._processCarriageReturns(value)]) }, _Tokenizer.prototype._consumeTagOpenEnd = function () { var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END; this._beginToken(tokenType), this._requireCharCode($GT), this._endToken([]) }, _Tokenizer.prototype._consumeTagClose = function (start) { this._beginToken(TokenType$1.TAG_CLOSE, start), this._attemptCharCodeUntilFn(isNotWhitespace); var prefixAndName = this._consumePrefixAndName(); this._attemptCharCodeUntilFn(isNotWhitespace), this._requireCharCode($GT), this._endToken(prefixAndName) }, _Tokenizer.prototype._consumeExpansionFormStart = function () { this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([]), this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START), this._beginToken(TokenType$1.RAW_TEXT, this._getLocation()); var condition = this._readUntil($COMMA); this._endToken([condition], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(TokenType$1.RAW_TEXT, this._getLocation()); var type = this._readUntil($COMMA); this._endToken([type], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace) }, _Tokenizer.prototype._consumeExpansionCaseStart = function () { this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation()); var value = this._readUntil($LBRACE).trim(); this._endToken([value], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START) }, _Tokenizer.prototype._consumeExpansionCaseEnd = function () { this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.pop() }, _Tokenizer.prototype._consumeExpansionFormEnd = function () { this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([]), this._expansionCaseStack.pop() }, _Tokenizer.prototype._consumeText = function () { var start = this._getLocation(); this._beginToken(TokenType$1.TEXT, start); var parts = []; do this._interpolationConfig && this._attemptStr(this._interpolationConfig.start) ? (parts.push(this._interpolationConfig.start), this._inInterpolation = !0) : this._interpolationConfig && this._inInterpolation && this._attemptStr(this._interpolationConfig.end) ? (parts.push(this._interpolationConfig.end), this._inInterpolation = !1) : parts.push(this._readChar(!0)); while (!this._isTextEnd()); this._endToken([this._processCarriageReturns(parts.join(""))]) }, _Tokenizer.prototype._isTextEnd = function () { if (this._peek === $LT || this._peek === $EOF) return !0; if (this._tokenizeIcu && !this._inInterpolation) { if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) return !0; if (this._peek === $RBRACE && this._isInExpansionCase()) return !0 } return !1 }, _Tokenizer.prototype._savePosition = function () { return [this._peek, this._index, this._column, this._line, this.tokens.length] }, _Tokenizer.prototype._readUntil = function (char) { var start = this._index; return this._attemptUntilChar(char), this._input.substring(start, this._index) }, _Tokenizer.prototype._restorePosition = function (position) { this._peek = position[0], this._index = position[1], this._column = position[2], this._line = position[3]; var nbTokens = position[4]; nbTokens < this.tokens.length && (this.tokens = this.tokens.slice(0, nbTokens)) }, _Tokenizer.prototype._isInExpansionCase = function () { return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START }, _Tokenizer.prototype._isInExpansionForm = function () { return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START }, _Tokenizer }(), __extends$5 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, TreeError = function (_super) { function TreeError(elementName, span, msg) { _super.call(this, span, msg), this.elementName = elementName } return __extends$5(TreeError, _super), TreeError.create = function (elementName, span, msg) { return new TreeError(elementName, span, msg) }, TreeError }(ParseError), ParseTreeResult = function () { function ParseTreeResult(rootNodes, errors) { this.rootNodes = rootNodes, this.errors = errors } return ParseTreeResult }(), Parser$1 = function () { function Parser(getTagDefinition) { this.getTagDefinition = getTagDefinition } return Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) { void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG); var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig), treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build(); return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors)) }, Parser }(), _TreeBuilder = function () { function _TreeBuilder(tokens, getTagDefinition) { this.tokens = tokens, this.getTagDefinition = getTagDefinition, this._index = -1, this._rootNodes = [], this._errors = [], this._elementStack = [], this._advance() } return _TreeBuilder.prototype.build = function () { for (; this._peek.type !== TokenType$1.EOF;) this._peek.type === TokenType$1.TAG_OPEN_START ? this._consumeStartTag(this._advance()) : this._peek.type === TokenType$1.TAG_CLOSE ? this._consumeEndTag(this._advance()) : this._peek.type === TokenType$1.CDATA_START ? (this._closeVoidElement(), this._consumeCdata(this._advance())) : this._peek.type === TokenType$1.COMMENT_START ? (this._closeVoidElement(), this._consumeComment(this._advance())) : this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT ? (this._closeVoidElement(), this._consumeText(this._advance())) : this._peek.type === TokenType$1.EXPANSION_FORM_START ? this._consumeExpansion(this._advance()) : this._advance(); return new ParseTreeResult(this._rootNodes, this._errors) }, _TreeBuilder.prototype._advance = function () { var prev = this._peek; return this._index < this.tokens.length - 1 && this._index++, this._peek = this.tokens[this._index], prev }, _TreeBuilder.prototype._advanceIf = function (type) { return this._peek.type === type ? this._advance() : null }, _TreeBuilder.prototype._consumeCdata = function (startToken) { this._consumeText(this._advance()), this._advanceIf(TokenType$1.CDATA_END) }, _TreeBuilder.prototype._consumeComment = function (token) { var text = this._advanceIf(TokenType$1.RAW_TEXT); this._advanceIf(TokenType$1.COMMENT_END); var value = isPresent(text) ? text.parts[0].trim() : null; this._addToParent(new Comment(value, token.sourceSpan)) }, _TreeBuilder.prototype._consumeExpansion = function (token) { for (var switchValue = this._advance(), type = this._advance(), cases = []; this._peek.type === TokenType$1.EXPANSION_CASE_VALUE;) { var expCase = this._parseExpansionCase(); if (!expCase) return; cases.push(expCase) } if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) return void this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'.")); var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end); this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan)), this._advance() }, _TreeBuilder.prototype._parseExpansionCase = function () { var value = this._advance(); if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) return this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'.")), null; var start = this._advance(), exp = this._collectExpansionExpTokens(start); if (!exp) return null; var end = this._advance(); exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan)); var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build(); if (parsedExp.errors.length > 0) return this._errors = this._errors.concat(parsedExp.errors), null; var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end), expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end); return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan) }, _TreeBuilder.prototype._collectExpansionExpTokens = function (start) { for (var exp = [], expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START]; ;) { if (this._peek.type !== TokenType$1.EXPANSION_FORM_START && this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START || expansionFormStack.push(this._peek.type), this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) { if (!lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null; if (expansionFormStack.pop(), 0 == expansionFormStack.length) return exp } if (this._peek.type === TokenType$1.EXPANSION_FORM_END) { if (!lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null; expansionFormStack.pop() } if (this._peek.type === TokenType$1.EOF) return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null; exp.push(this._advance()) } }, _TreeBuilder.prototype._consumeText = function (token) { var text = token.parts[0]; if (text.length > 0 && "\n" == text[0]) { var parent_1 = this._getParentElement(); isPresent(parent_1) && 0 == parent_1.children.length && this.getTagDefinition(parent_1.name).ignoreFirstLf && (text = text.substring(1)) } text.length > 0 && this._addToParent(new Text(text, token.sourceSpan)) }, _TreeBuilder.prototype._closeVoidElement = function () { if (this._elementStack.length > 0) { var el = this._elementStack[this._elementStack.length - 1]; this.getTagDefinition(el.name).isVoid && this._elementStack.pop() } }, _TreeBuilder.prototype._consumeStartTag = function (startTagToken) { for (var prefix = startTagToken.parts[0], name = startTagToken.parts[1], attrs = []; this._peek.type === TokenType$1.ATTR_NAME;) attrs.push(this._consumeAttr(this._advance())); var fullName = this._getElementFullName(prefix, name, this._getParentElement()), selfClosing = !1; if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) { this._advance(), selfClosing = !0; var tagDef = this.getTagDefinition(fullName); tagDef.canSelfClose || null !== getNsPrefix(fullName) || tagDef.isVoid || this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"')) } else this._peek.type === TokenType$1.TAG_OPEN_END && (this._advance(), selfClosing = !1); var end = this._peek.sourceSpan.start, span = new ParseSourceSpan(startTagToken.sourceSpan.start, end), el = new Element(fullName, attrs, [], span, span, null); this._pushElement(el), selfClosing && (this._popElement(fullName), el.endSourceSpan = span) }, _TreeBuilder.prototype._pushElement = function (el) { if (this._elementStack.length > 0) { var parentEl = this._elementStack[this._elementStack.length - 1]; this.getTagDefinition(parentEl.name).isClosedByChild(el.name) && this._elementStack.pop() } var tagDef = this.getTagDefinition(el.name), _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container; if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) { var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan); this._insertBeforeContainer(parent, container, newParent) } this._addToParent(el), this._elementStack.push(el) }, _TreeBuilder.prototype._consumeEndTag = function (endTagToken) { var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement()); this._getParentElement() && (this._getParentElement().endSourceSpan = endTagToken.sourceSpan), this.getTagDefinition(fullName).isVoid ? this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"')) : this._popElement(fullName) || this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"')) }, _TreeBuilder.prototype._popElement = function (fullName) { for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) { var el = this._elementStack[stackIndex]; if (el.name == fullName) return this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex), !0; if (!this.getTagDefinition(el.name).closedByParent) return !1 } return !1 }, _TreeBuilder.prototype._consumeAttr = function (attrName) { var valueSpan, fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]), end = attrName.sourceSpan.end, value = ""; if (this._peek.type === TokenType$1.ATTR_VALUE) { var valueToken = this._advance(); value = valueToken.parts[0], end = valueToken.sourceSpan.end, valueSpan = valueToken.sourceSpan } return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan) }, _TreeBuilder.prototype._getParentElement = function () { return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null }, _TreeBuilder.prototype._getParentElementSkippingContainers = function () { for (var container = null, i = this._elementStack.length - 1; i >= 0; i--) { if ("ng-container" !== this._elementStack[i].name) return { parent: this._elementStack[i], container: container }; container = this._elementStack[i] } return { parent: this._elementStack[this._elementStack.length - 1], container: container } }, _TreeBuilder.prototype._addToParent = function (node) { var parent = this._getParentElement(); isPresent(parent) ? parent.children.push(node) : this._rootNodes.push(node) }, _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) { if (container) { if (parent) { var index = parent.children.indexOf(container); parent.children[index] = node } else this._rootNodes.push(node); node.children.push(container), this._elementStack.splice(this._elementStack.indexOf(container), 0, node) } else this._addToParent(node), this._elementStack.push(node) }, _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) { return isBlank(prefix) && (prefix = this.getTagDefinition(localName).implicitNamespacePrefix, isBlank(prefix) && isPresent(parentElement) && (prefix = getNsPrefix(parentElement.name))), mergeNsAndName(prefix, localName) }, _TreeBuilder }(), Message = function () { function Message(nodes, placeholders, placeholderToMessage, meaning, description) { this.nodes = nodes, this.placeholders = placeholders, this.placeholderToMessage = placeholderToMessage, this.meaning = meaning, this.description = description } return Message }(), Text$1 = function () { function Text(value, sourceSpan) { this.value = value, this.sourceSpan = sourceSpan } return Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context) }, Text }(), Container = function () { function Container(children, sourceSpan) { this.children = children, this.sourceSpan = sourceSpan } return Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context) }, Container }(), Icu = function () { function Icu(expression, type, cases, sourceSpan) { this.expression = expression, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan } return Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context) }, Icu }(), TagPlaceholder = function () { function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) { this.tag = tag, this.attrs = attrs, this.startName = startName, this.closeName = closeName, this.children = children, this.isVoid = isVoid, this.sourceSpan = sourceSpan } return TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context) }, TagPlaceholder }(), Placeholder = function () { function Placeholder(value, name, sourceSpan) { this.value = value, this.name = name, this.sourceSpan = sourceSpan } return Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context) }, Placeholder }(), IcuPlaceholder = function () { function IcuPlaceholder(value, name, sourceSpan) { this.value = value, this.name = name, this.sourceSpan = sourceSpan } return IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context) }, IcuPlaceholder }(), TAG_TO_PLACEHOLDER_NAMES = { A: "LINK", B: "BOLD_TEXT", BR: "LINE_BREAK", EM: "EMPHASISED_TEXT", H1: "HEADING_LEVEL1", H2: "HEADING_LEVEL2", H3: "HEADING_LEVEL3", H4: "HEADING_LEVEL4", H5: "HEADING_LEVEL5", H6: "HEADING_LEVEL6", HR: "HORIZONTAL_RULE", I: "ITALIC_TEXT", LI: "LIST_ITEM", LINK: "MEDIA_LINK", OL: "ORDERED_LIST", P: "PARAGRAPH", Q: "QUOTATION", S: "STRIKETHROUGH_TEXT", SMALL: "SMALL_TEXT", SUB: "SUBSTRIPT", SUP: "SUPERSCRIPT", TBODY: "TABLE_BODY", TD: "TABLE_CELL", TFOOT: "TABLE_FOOTER", TH: "TABLE_HEADER_CELL", THEAD: "TABLE_HEADER", TR: "TABLE_ROW", TT: "MONOSPACED_TEXT", U: "UNDERLINED_TEXT", UL: "UNORDERED_LIST" }, PlaceholderRegistry = function () { function PlaceholderRegistry() { this._placeHolderNameCounts = {}, this._signatureToName = {} } return PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) { var signature = this._hashTag(tag, attrs, isVoid); if (this._signatureToName[signature]) return this._signatureToName[signature]; var upperTag = tag.toUpperCase(), baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag, name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName); return this._signatureToName[signature] = name, name }, PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) { var signature = this._hashClosingTag(tag); if (this._signatureToName[signature]) return this._signatureToName[signature]; var upperTag = tag.toUpperCase(), baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag, name = this._generateUniqueName("CLOSE_" + baseName); return this._signatureToName[signature] = name, name }, PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) { var upperName = name.toUpperCase(), signature = "PH: " + upperName + "=" + content; if (this._signatureToName[signature]) return this._signatureToName[signature]; var uniqueName = this._generateUniqueName(upperName); return this._signatureToName[signature] = uniqueName, uniqueName }, PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) { return this._generateUniqueName(name.toUpperCase()) }, PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) { var start = "<" + tag, strAttrs = Object.keys(attrs).sort().map(function (name) { return " " + name + "=" + attrs[name] }).join(""), end = isVoid ? "/>" : "></" + tag + ">"; return start + strAttrs + end }, PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, !1) }, PlaceholderRegistry.prototype._generateUniqueName = function (base) { var next = this._placeHolderNameCounts[base]; return this._placeHolderNameCounts[base] = next ? next + 1 : 1, next ? base + "_" + next : base }, PlaceholderRegistry }(), _expParser = new Parser(new Lexer), _I18nVisitor = function () {
        function _I18nVisitor(_expressionParser, _interpolationConfig) { this._expressionParser = _expressionParser, this._interpolationConfig = _interpolationConfig } return _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) { this._isIcu = 1 == nodes.length && nodes[0] instanceof Expansion, this._icuDepth = 0, this._placeholderRegistry = new PlaceholderRegistry, this._placeholderToContent = {}, this._placeholderToMessage = {}; var i18nodes = visitAll(this, nodes, {}); return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description) }, _I18nVisitor.prototype.visitElement = function (el, context) {
            var children = visitAll(this, el.children), attrs = {}; el.attrs.forEach(function (attr) { attrs[attr.name] = attr.value }); var isVoid = getHtmlTagDefinition(el.name).isVoid, startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid); this._placeholderToContent[startPhName] = el.sourceSpan.toString();
            var closePhName = ""; return isVoid || (closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name), this._placeholderToContent[closePhName] = "</" + el.name + ">"), new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan)
        }, _I18nVisitor.prototype.visitAttribute = function (attribute, context) { return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan) }, _I18nVisitor.prototype.visitText = function (text, context) { return this._visitTextWithInterpolation(text.value, text.sourceSpan) }, _I18nVisitor.prototype.visitComment = function (comment, context) { return null }, _I18nVisitor.prototype.visitExpansion = function (icu, context) { var _this = this; this._icuDepth++; var i18nIcuCases = {}, i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan); if (icu.cases.forEach(function (caze) { i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}) }), caze.expSourceSpan) }), this._icuDepth--, this._isIcu || this._icuDepth > 0) { var expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type); return i18nIcu.expressionPlaceholder = expPh, this._placeholderToContent[expPh] = icu.switchValue, i18nIcu } var phName = this._placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString()), visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig); return this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], "", ""), new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan) }, _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) { throw new Error("Unreachable code") }, _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) { var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig); if (!splitInterpolation) return new Text$1(text, sourceSpan); for (var nodes = [], container = new Container(nodes, sourceSpan), _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end, i = 0; i < splitInterpolation.strings.length - 1; i++) { var expression = splitInterpolation.expressions[i], baseName = _extractPlaceholderName(expression) || "INTERPOLATION", phName = this._placeholderRegistry.getPlaceholderName(baseName, expression); splitInterpolation.strings[i].length && nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan)), nodes.push(new Placeholder(expression, phName, sourceSpan)), this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter } var lastStringIdx = splitInterpolation.strings.length - 1; return splitInterpolation.strings[lastStringIdx].length && nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan)), container }, _I18nVisitor
    }(), _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g, __extends$7 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, I18nError = function (_super) { function I18nError(span, msg) { _super.call(this, span, msg) } return __extends$7(I18nError, _super), I18nError }(ParseError), _I18N_ATTR = "i18n", _I18N_ATTR_PREFIX = "i18n-", _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/, ExtractionResult = function () { function ExtractionResult(messages, errors) { this.messages = messages, this.errors = errors } return ExtractionResult }(), _VisitorMode = {}; _VisitorMode.Extract = 0, _VisitorMode.Merge = 1, _VisitorMode[_VisitorMode.Extract] = "Extract", _VisitorMode[_VisitorMode.Merge] = "Merge"; var _Visitor = function () { function _Visitor(_implicitTags, _implicitAttrs) { this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs } return _Visitor.prototype.extract = function (nodes, interpolationConfig) { var _this = this; return this._init(_VisitorMode.Extract, interpolationConfig), nodes.forEach(function (node) { return node.visit(_this, null) }), this._inI18nBlock && this._reportError(nodes[nodes.length - 1], "Unclosed block"), new ExtractionResult(this._messages, this._errors) }, _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) { this._init(_VisitorMode.Merge, interpolationConfig), this._translations = translations; var wrapper = new Element("wrapper", [], nodes, null, null, null), translatedNode = wrapper.visit(this, null); return this._inI18nBlock && this._reportError(nodes[nodes.length - 1], "Unclosed block"), new ParseTreeResult(translatedNode.children, this._errors) }, _Visitor.prototype.visitExpansionCase = function (icuCase, context) { var expression = visitAll(this, icuCase.expression, context); if (this._mode === _VisitorMode.Merge) return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan) }, _Visitor.prototype.visitExpansion = function (icu, context) { this._mayBeAddBlockChildren(icu); var wasInIcu = this._inIcu; this._inIcu || (this._isInTranslatableSection && this._addMessage([icu]), this._inIcu = !0); var cases = visitAll(this, icu.cases, context); return this._mode === _VisitorMode.Merge && (icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan)), this._inIcu = wasInIcu, icu }, _Visitor.prototype.visitComment = function (comment, context) { var isOpening = _isOpeningComment(comment); if (isOpening && this._isInTranslatableSection) return void this._reportError(comment, "Could not start a block inside a translatable section"); var isClosing = _isClosingComment(comment); if (isClosing && !this._inI18nBlock) return void this._reportError(comment, "Trying to close an unopened block"); if (!this._inI18nNode && !this._inIcu) if (this._inI18nBlock) { if (isClosing) { if (this._depth == this._blockStartDepth) { this._closeTranslatableSection(comment, this._blockChildren), this._inI18nBlock = !1; var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc), nodes = this._translateMessage(comment, message); return visitAll(this, nodes) } return void this._reportError(comment, "I18N blocks should not cross element boundaries") } } else isOpening && (this._inI18nBlock = !0, this._blockStartDepth = this._depth, this._blockChildren = [], this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, "").trim(), this._openTranslatableSection(comment)) }, _Visitor.prototype.visitText = function (text, context) { return this._isInTranslatableSection && this._mayBeAddBlockChildren(text), text }, _Visitor.prototype.visitElement = function (el, context) { var _this = this; this._mayBeAddBlockChildren(el), this._depth++; var childNodes, wasInI18nNode = this._inI18nNode, wasInImplicitNode = this._inImplicitNode, i18nAttr = _getI18nAttr(el), isImplicit = this._implicitTags.some(function (tag) { return el.name === tag }) && !this._inIcu && !this._isInTranslatableSection, isTopLevelImplicit = !wasInImplicitNode && isImplicit; if (this._inImplicitNode = this._inImplicitNode || isImplicit, this._isInTranslatableSection || this._inIcu) (i18nAttr || isTopLevelImplicit) && this._reportError(el, "Could not mark an element as translatable inside a translatable section"), this._mode == _VisitorMode.Extract && visitAll(this, el.children), this._mode == _VisitorMode.Merge && (childNodes = [], el.children.forEach(function (child) { var visited = child.visit(_this, context); visited && !_this._isInTranslatableSection && (childNodes = childNodes.concat(visited)) })); else { if (i18nAttr) { this._inI18nNode = !0; var message = this._addMessage(el.children, i18nAttr.value); childNodes = this._translateMessage(el, message) } else if (isTopLevelImplicit) { this._inI18nNode = !0; var message = this._addMessage(el.children); childNodes = this._translateMessage(el, message) } if (this._mode == _VisitorMode.Extract) { var isTranslatable = i18nAttr || isTopLevelImplicit; isTranslatable && this._openTranslatableSection(el), visitAll(this, el.children), isTranslatable && this._closeTranslatableSection(el, el.children) } this._mode !== _VisitorMode.Merge || i18nAttr || isTopLevelImplicit || (childNodes = [], el.children.forEach(function (child) { var visited = child.visit(_this, context); visited && !_this._isInTranslatableSection && (childNodes = childNodes.concat(visited)) })) } if (this._visitAttributesOf(el), this._depth--, this._inI18nNode = wasInI18nNode, this._inImplicitNode = wasInImplicitNode, this._mode === _VisitorMode.Merge) { var translatedAttrs = this._translateAttributes(el); return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan) } }, _Visitor.prototype.visitAttribute = function (attribute, context) { throw new Error("unreachable code") }, _Visitor.prototype._init = function (mode, interpolationConfig) { this._mode = mode, this._inI18nBlock = !1, this._inI18nNode = !1, this._depth = 0, this._inIcu = !1, this._msgCountAtSectionStart = void 0, this._errors = [], this._messages = [], this._inImplicitNode = !1, this._createI18nMessage = createI18nMessageFactory(interpolationConfig) }, _Visitor.prototype._visitAttributesOf = function (el) { var _this = this, explicitAttrNameToValue = {}, implicitAttrNames = this._implicitAttrs[el.name] || []; el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX) }).forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value }), el.attrs.forEach(function (attr) { attr.name in explicitAttrNameToValue ? _this._addMessage([attr], explicitAttrNameToValue[attr.name]) : implicitAttrNames.some(function (name) { return attr.name === name }) && _this._addMessage([attr]) }) }, _Visitor.prototype._addMessage = function (ast, meaningAndDesc) { if (!(0 == ast.length || 1 == ast.length && ast[0] instanceof Attribute$1 && !ast[0].value)) { var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1], message = this._createI18nMessage(ast, meaning, description); return this._messages.push(message), message } }, _Visitor.prototype._translateMessage = function (el, message) { if (message && this._mode === _VisitorMode.Merge) { var nodes = this._translations.get(message); if (nodes) return nodes; this._reportError(el, 'Translation unavailable for message id="' + this._translations.digest(message) + '"') } return [] }, _Visitor.prototype._translateAttributes = function (el) { var _this = this, attributes = el.attrs, i18nAttributeMeanings = {}; attributes.forEach(function (attr) { attr.name.startsWith(_I18N_ATTR_PREFIX) && (i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0]) }); var translatedAttributes = []; return attributes.forEach(function (attr) { if (attr.name !== _I18N_ATTR && !attr.name.startsWith(_I18N_ATTR_PREFIX)) if (attr.value && "" != attr.value && i18nAttributeMeanings.hasOwnProperty(attr.name)) { var meaning = i18nAttributeMeanings[attr.name], message = _this._createI18nMessage([attr], meaning, ""), nodes = _this._translations.get(message); if (nodes) if (nodes[0] instanceof Text) { var value = nodes[0].value; translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan)) } else _this._reportError(el, 'Unexpected translation for attribute "' + attr.name + '" (id="' + _this._translations.digest(message) + '")'); else _this._reportError(el, 'Translation unavailable for attribute "' + attr.name + '" (id="' + _this._translations.digest(message) + '")') } else translatedAttributes.push(attr) }), translatedAttributes }, _Visitor.prototype._mayBeAddBlockChildren = function (node) { this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth && this._blockChildren.push(node) }, _Visitor.prototype._openTranslatableSection = function (node) { this._isInTranslatableSection ? this._reportError(node, "Unexpected section start") : this._msgCountAtSectionStart = this._messages.length }, Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", { get: function () { return void 0 !== this._msgCountAtSectionStart }, enumerable: !0, configurable: !0 }), _Visitor.prototype._closeTranslatableSection = function (node, directChildren) { if (!this._isInTranslatableSection) return void this._reportError(node, "Unexpected section end"); var startIndex = this._msgCountAtSectionStart, significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1) }, 0); if (1 == significantChildren) for (var i = this._messages.length - 1; i >= startIndex; i--) { var ast = this._messages[i].nodes; if (!(1 == ast.length && ast[0] instanceof Text$1)) { this._messages.splice(i, 1); break } } this._msgCountAtSectionStart = void 0 }, _Visitor.prototype._reportError = function (node, msg) { this._errors.push(new I18nError(node.sourceSpan, msg)) }, _Visitor }(), XmlTagDefinition = function () { function XmlTagDefinition() { this.closedByParent = !1, this.contentType = TagContentType.PARSABLE_DATA, this.isVoid = !1, this.ignoreFirstLf = !1, this.canSelfClose = !0 } return XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return !1 }, XmlTagDefinition.prototype.isClosedByChild = function (name) { return !1 }, XmlTagDefinition }(), _TAG_DEFINITION = new XmlTagDefinition, __extends$8 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, XmlParser = function (_super) { function XmlParser() { _super.call(this, getXmlTagDefinition) } return __extends$8(XmlParser, _super), XmlParser.prototype.parse = function (source, url, parseExpansionForms) { return void 0 === parseExpansionForms && (parseExpansionForms = !1), _super.prototype.parse.call(this, source, url, parseExpansionForms, null) }, XmlParser }(Parser$1), __extends$9 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _SerializerVisitor = function () { function _SerializerVisitor() { } return _SerializerVisitor.prototype.visitText = function (text, context) { return text.value }, _SerializerVisitor.prototype.visitContainer = function (container, context) { var _this = this; return "[" + container.children.map(function (child) { return child.visit(_this) }).join(", ") + "]" }, _SerializerVisitor.prototype.visitIcu = function (icu, context) { var _this = this, strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}" }); return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(", ") + "}" }, _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) { var _this = this; return ph.isVoid ? '<ph tag name="' + ph.startName + '"/>' : '<ph tag name="' + ph.startName + '">' + ph.children.map(function (child) { return child.visit(_this) }).join(", ") + '</ph name="' + ph.closeName + '">' }, _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) { return ph.value ? '<ph name="' + ph.name + '">' + ph.value + "</ph>" : '<ph name="' + ph.name + '"/>' }, _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) { return '<ph icu name="' + ph.name + '">' + ph.value.visit(this) + "</ph>" }, _SerializerVisitor }(), serializerVisitor = new _SerializerVisitor, _SerializerIgnoreIcuExpVisitor = function (_super) { function _SerializerIgnoreIcuExpVisitor() { _super.apply(this, arguments) } return __extends$9(_SerializerIgnoreIcuExpVisitor, _super), _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) { var _this = this, strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}" }); return "{" + icu.type + ", " + strCases.join(", ") + "}" }, _SerializerIgnoreIcuExpVisitor }(_SerializerVisitor), Endian = {}; Endian.Little = 0, Endian.Big = 1, Endian[Endian.Little] = "Little", Endian[Endian.Big] = "Big";/**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
    var __extends$10 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _Visitor$1 = function () { function _Visitor() { } return _Visitor.prototype.visitTag = function (tag) { var _this = this, strAttrs = this._serializeAttributes(tag.attrs); if (0 == tag.children.length) return "<" + tag.name + strAttrs + "/>"; var strChildren = tag.children.map(function (node) { return node.visit(_this) }); return "<" + tag.name + strAttrs + ">" + strChildren.join("") + "</" + tag.name + ">" }, _Visitor.prototype.visitText = function (text) { return text.value }, _Visitor.prototype.visitDeclaration = function (decl) { return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>" }, _Visitor.prototype._serializeAttributes = function (attrs) { var strAttrs = Object.keys(attrs).map(function (name) { return name + '="' + attrs[name] + '"' }).join(" "); return strAttrs.length > 0 ? " " + strAttrs : "" }, _Visitor.prototype.visitDoctype = function (doctype) { return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>" }, _Visitor }(), _visitor = new _Visitor$1, Declaration = function () { function Declaration(unescapedAttrs) { var _this = this; this.attrs = {}, Object.keys(unescapedAttrs).forEach(function (k) { _this.attrs[k] = _escapeXml(unescapedAttrs[k]) }) } return Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this) }, Declaration }(), Doctype = function () { function Doctype(rootTag, dtd) { this.rootTag = rootTag, this.dtd = dtd } return Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this) }, Doctype }(), Tag = function () { function Tag(name, unescapedAttrs, children) { var _this = this; void 0 === unescapedAttrs && (unescapedAttrs = {}), void 0 === children && (children = []), this.name = name, this.children = children, this.attrs = {}, Object.keys(unescapedAttrs).forEach(function (k) { _this.attrs[k] = _escapeXml(unescapedAttrs[k]) }) } return Tag.prototype.visit = function (visitor) { return visitor.visitTag(this) }, Tag }(), Text$2 = function () { function Text(unescapedValue) { this.value = _escapeXml(unescapedValue) } return Text.prototype.visit = function (visitor) { return visitor.visitText(this) }, Text }(), CR = function (_super) { function CR(ws) { void 0 === ws && (ws = 0), _super.call(this, "\n" + new Array(ws + 1).join(" ")) } return __extends$10(CR, _super), CR }(Text$2), _ESCAPED_CHARS = [[/&/g, "&amp;"], [/"/g, "&quot;"], [/'/g, "&apos;"], [/</g, "&lt;"], [/>/g, "&gt;"]], _VERSION = "1.2", _XMLNS = "urn:oasis:names:tc:xliff:document:1.2", _SOURCE_LANG = "en", _PLACEHOLDER_TAG = "x", _SOURCE_TAG = "source", _TARGET_TAG = "target", _UNIT_TAG = "trans-unit", Xliff = function () { function Xliff() { } return Xliff.prototype.write = function (messages) { var _this = this, visitor = new _WriteVisitor, visited = {}, transUnits = []; messages.forEach(function (message) { var id = _this.digest(message); if (!visited[id]) { visited[id] = !0; var transUnit = new Tag(_UNIT_TAG, { id: id, datatype: "html" }); transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG)), message.description && transUnit.children.push(new CR(8), new Tag("note", { priority: "1", from: "description" }, [new Text$2(message.description)])), message.meaning && transUnit.children.push(new CR(8), new Tag("note", { priority: "1", from: "meaning" }, [new Text$2(message.meaning)])), transUnit.children.push(new CR(6)), transUnits.push(new CR(6), transUnit) } }); var body = new Tag("body", {}, transUnits.concat([new CR(4)])), file = new Tag("file", { "source-language": _SOURCE_LANG, datatype: "plaintext", original: "ng2.template" }, [new CR(4), body, new CR(2)]), xliff = new Tag("xliff", { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR]); return serialize([new Declaration({ version: "1.0", encoding: "UTF-8" }), new CR, xliff, new CR]) }, Xliff.prototype.load = function (content, url) { var xliffParser = new XliffParser, _a = xliffParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors, i18nNodesByMsgId = {}, converter = new XmlToI18n; if (Object.keys(mlNodesByMsgId).forEach(function (msgId) { var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors; errors.push.apply(errors, e), i18nNodesByMsgId[msgId] = i18nNodes }), errors.length) throw new Error("xliff parse errors:\n" + errors.join("\n")); return i18nNodesByMsgId }, Xliff.prototype.digest = function (message) { return digest(message) }, Xliff }(), _WriteVisitor = function () { function _WriteVisitor() { } return _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)] }, _WriteVisitor.prototype.visitContainer = function (container, context) { var _this = this, nodes = []; return container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)) }), nodes }, _WriteVisitor.prototype.visitIcu = function (icu, context) { if (this._isInIcu) throw new Error("xliff does not support nested ICU messages"); this._isInIcu = !0; var nodes = []; return this._isInIcu = !1, nodes }, _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) { var ctype = getCtypeForTag(ph.tag), startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype }); if (ph.isVoid) return [startTagPh]; var closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype }); return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]) }, _WriteVisitor.prototype.visitPlaceholder = function (ph, context) { return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })] }, _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) { return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })] }, _WriteVisitor.prototype.serialize = function (nodes) { var _this = this; return this._isInIcu = !1, (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this) })); var _a }, _WriteVisitor }(), XliffParser = function () { function XliffParser() { } return XliffParser.prototype.parse = function (xliff, url) { this._unitMlNodes = [], this._mlNodesByMsgId = {}; var xml = (new XmlParser).parse(xliff, url, !1); return this._errors = xml.errors, visitAll(this, xml.rootNodes, null), { mlNodesByMsgId: this._mlNodesByMsgId, errors: this._errors } }, XliffParser.prototype.visitElement = function (element, context) { switch (element.name) { case _UNIT_TAG: this._unitMlNodes = null; var idAttr = element.attrs.find(function (attr) { return "id" === attr.name }); if (idAttr) { var id = idAttr.value; this._mlNodesByMsgId.hasOwnProperty(id) ? this._addError(element, "Duplicated translations for msg " + id) : (visitAll(this, element.children, null), this._unitMlNodes ? this._mlNodesByMsgId[id] = this._unitMlNodes : this._addError(element, "Message " + id + " misses a translation")) } else this._addError(element, "<" + _UNIT_TAG + '> misses the "id" attribute'); break; case _SOURCE_TAG: break; case _TARGET_TAG: this._unitMlNodes = element.children; break; default: visitAll(this, element.children, null) } }, XliffParser.prototype.visitAttribute = function (attribute, context) { }, XliffParser.prototype.visitText = function (text, context) { }, XliffParser.prototype.visitComment = function (comment, context) { }, XliffParser.prototype.visitExpansion = function (expansion, context) { }, XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { }, XliffParser.prototype._addError = function (node, message) { this._errors.push(new I18nError(node.sourceSpan, message)) }, XliffParser }(), XmlToI18n = function () { function XmlToI18n() { } return XmlToI18n.prototype.convert = function (nodes) { return this._errors = [], { i18nNodes: visitAll(this, nodes), errors: this._errors } }, XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan) }, XmlToI18n.prototype.visitElement = function (el, context) { if (el.name === _PLACEHOLDER_TAG) { var nameAttr = el.attrs.find(function (attr) { return "id" === attr.name }); if (nameAttr) return new Placeholder("", nameAttr.value, el.sourceSpan); this._addError(el, "<" + _PLACEHOLDER_TAG + '> misses the "id" attribute') } else this._addError(el, "Unexpected tag") }, XmlToI18n.prototype.visitExpansion = function (icu, context) { }, XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { }, XmlToI18n.prototype.visitComment = function (comment, context) { }, XmlToI18n.prototype.visitAttribute = function (attribute, context) { }, XmlToI18n.prototype._addError = function (node, message) { this._errors.push(new I18nError(node.sourceSpan, message)) }, XmlToI18n }(), _MESSAGES_TAG = "messagebundle", _MESSAGE_TAG = "msg", _PLACEHOLDER_TAG$1 = "ph", _EXEMPLE_TAG = "ex", _DOCTYPE = '<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>', Xmb = function () { function Xmb() { } return Xmb.prototype.write = function (messages) { var _this = this, exampleVisitor = new ExampleVisitor, visitor = new _Visitor$2, visited = {}, rootNode = new Tag(_MESSAGES_TAG); return messages.forEach(function (message) { var id = _this.digest(message); if (!visited[id]) { visited[id] = !0; var attrs = { id: id }; message.description && (attrs.desc = message.description), message.meaning && (attrs.meaning = message.meaning), rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes))) } }), rootNode.children.push(new CR), serialize([new Declaration({ version: "1.0", encoding: "UTF-8" }), new CR, new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR, exampleVisitor.addDefaultExamples(rootNode), new CR]) }, Xmb.prototype.load = function (content, url) { throw new Error("Unsupported") }, Xmb.prototype.digest = function (message) { return digest$1(message) }, Xmb }(), _Visitor$2 = function () { function _Visitor() { } return _Visitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)] }, _Visitor.prototype.visitContainer = function (container, context) { var _this = this, nodes = []; return container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)) }), nodes }, _Visitor.prototype.visitIcu = function (icu, context) { var _this = this, nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")]; return Object.keys(icu.cases).forEach(function (c) { nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")])) }), nodes.push(new Text$2("}")), nodes }, _Visitor.prototype.visitTagPlaceholder = function (ph, context) { var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]), startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]); if (ph.isVoid) return [startTagPh]; var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]), closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]); return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]) }, _Visitor.prototype.visitPlaceholder = function (ph, context) { return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })] }, _Visitor.prototype.visitIcuPlaceholder = function (ph, context) { return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })] }, _Visitor.prototype.serialize = function (nodes) { var _this = this; return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this) })); var _a }, _Visitor }(), ExampleVisitor = function () { function ExampleVisitor() { } return ExampleVisitor.prototype.addDefaultExamples = function (node) { return node.visit(this), node }, ExampleVisitor.prototype.visitTag = function (tag) { var _this = this; if (tag.name === _PLACEHOLDER_TAG$1) { if (!tag.children || 0 == tag.children.length) { var exText = new Text$2(tag.attrs.name || "..."); tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])] } } else tag.children && tag.children.forEach(function (node) { return node.visit(_this) }) }, ExampleVisitor.prototype.visitText = function (text) { }, ExampleVisitor.prototype.visitDeclaration = function (decl) { }, ExampleVisitor.prototype.visitDoctype = function (doctype) { }, ExampleVisitor }(), _TRANSLATIONS_TAG = "translationbundle", _TRANSLATION_TAG = "translation", _PLACEHOLDER_TAG$2 = "ph", Xtb = function () { function Xtb() { } return Xtb.prototype.write = function (messages) { throw new Error("Unsupported") }, Xtb.prototype.load = function (content, url) { var xtbParser = new XtbParser, _a = xtbParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors, i18nNodesByMsgId = {}, converter = new XmlToI18n$1; if (Object.keys(mlNodesByMsgId).forEach(function (msgId) { var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors; errors.push.apply(errors, e), i18nNodesByMsgId[msgId] = i18nNodes }), errors.length) throw new Error("xtb parse errors:\n" + errors.join("\n")); return i18nNodesByMsgId }, Xtb.prototype.digest = function (message) { return digest$1(message) }, Xtb }(), XtbParser = function () { function XtbParser() { } return XtbParser.prototype.parse = function (xtb, url) { this._bundleDepth = 0, this._mlNodesByMsgId = {}; var xml = (new XmlParser).parse(xtb, url, !0); return this._errors = xml.errors, visitAll(this, xml.rootNodes), { mlNodesByMsgId: this._mlNodesByMsgId, errors: this._errors } }, XtbParser.prototype.visitElement = function (element, context) { switch (element.name) { case _TRANSLATIONS_TAG: this._bundleDepth++, this._bundleDepth > 1 && this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested"), visitAll(this, element.children, null), this._bundleDepth--; break; case _TRANSLATION_TAG: var idAttr = element.attrs.find(function (attr) { return "id" === attr.name }); if (idAttr) { var id = idAttr.value; this._mlNodesByMsgId.hasOwnProperty(id) ? this._addError(element, "Duplicated translations for msg " + id) : this._mlNodesByMsgId[id] = element.children } else this._addError(element, "<" + _TRANSLATION_TAG + '> misses the "id" attribute'); break; default: this._addError(element, "Unexpected tag") } }, XtbParser.prototype.visitAttribute = function (attribute, context) { }, XtbParser.prototype.visitText = function (text, context) { }, XtbParser.prototype.visitComment = function (comment, context) { }, XtbParser.prototype.visitExpansion = function (expansion, context) { }, XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { }, XtbParser.prototype._addError = function (node, message) { this._errors.push(new I18nError(node.sourceSpan, message)) }, XtbParser }(), XmlToI18n$1 = function () { function XmlToI18n() { } return XmlToI18n.prototype.convert = function (nodes) { return this._errors = [], { i18nNodes: visitAll(this, nodes), errors: this._errors } }, XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan) }, XmlToI18n.prototype.visitExpansion = function (icu, context) { var caseMap = {}; return visitAll(this, icu.cases).forEach(function (c) { caseMap[c.value] = new Container(c.nodes, icu.sourceSpan) }), new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan) }, XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { return { value: icuCase.value, nodes: visitAll(this, icuCase.expression) } }, XmlToI18n.prototype.visitElement = function (el, context) { if (el.name === _PLACEHOLDER_TAG$2) { var nameAttr = el.attrs.find(function (attr) { return "name" === attr.name }); if (nameAttr) return new Placeholder("", nameAttr.value, el.sourceSpan); this._addError(el, "<" + _PLACEHOLDER_TAG$2 + '> misses the "name" attribute') } else this._addError(el, "Unexpected tag") }, XmlToI18n.prototype.visitComment = function (comment, context) { }, XmlToI18n.prototype.visitAttribute = function (attribute, context) { }, XmlToI18n.prototype._addError = function (node, message) { this._errors.push(new I18nError(node.sourceSpan, message)) }, XmlToI18n }(), __extends$11 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, __decorate$3 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$3 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, HtmlParser = function (_super) { function HtmlParser() { _super.call(this, getHtmlTagDefinition) } return __extends$11(HtmlParser, _super), HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) { return void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig) }, HtmlParser = __decorate$3([CompilerInjectable(), __metadata$3("design:paramtypes", [])], HtmlParser) }(Parser$1), TranslationBundle = function () { function TranslationBundle(_i18nNodesByMsgId, digest) { void 0 === _i18nNodesByMsgId && (_i18nNodesByMsgId = {}), this._i18nNodesByMsgId = _i18nNodesByMsgId, this.digest = digest, this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, digest) } return TranslationBundle.load = function (content, url, serializer) { var i18nNodesByMsgId = serializer.load(content, url), digestFn = function (m) { return serializer.digest(m) }; return new TranslationBundle(i18nNodesByMsgId, digestFn) }, TranslationBundle.prototype.get = function (srcMsg) { var html = this._i18nToHtml.convert(srcMsg); if (html.errors.length) throw new Error(html.errors.join("\n")); return html.nodes }, TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId }, TranslationBundle }(), I18nToHtmlVisitor = function () { function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest) { void 0 === _i18nNodesByMsgId && (_i18nNodesByMsgId = {}), this._i18nNodesByMsgId = _i18nNodesByMsgId, this._digest = _digest, this._srcMsgStack = [], this._errors = [] } return I18nToHtmlVisitor.prototype.convert = function (srcMsg) { this._srcMsgStack.length = 0, this._errors.length = 0; var text = this._convertToText(srcMsg), url = srcMsg.nodes[0].sourceSpan.start.file.url, html = (new HtmlParser).parse(text, url, !0); return { nodes: html.rootNodes, errors: this._errors.concat(html.errors) } }, I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value }, I18nToHtmlVisitor.prototype.visitContainer = function (container, context) { var _this = this; return container.children.map(function (n) { return n.visit(_this) }).join("") }, I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) { var _this = this, cases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}" }), exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression] : icu.expression; return "{" + exp + ", " + icu.type + ", " + cases.join(" ") + "}" }, I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) { var phName = ph.name; return this._srcMsg.placeholders.hasOwnProperty(phName) ? this._srcMsg.placeholders[phName] : this._srcMsg.placeholderToMessage.hasOwnProperty(phName) ? this._convertToText(this._srcMsg.placeholderToMessage[phName]) : (this._addError(ph, "Unknown placeholder"), "") }, I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) { throw "unreachable code" }, I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) { throw "unreachable code" }, I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) { var _this = this, digest = this._digest(srcMsg); if (this._i18nNodesByMsgId.hasOwnProperty(digest)) { this._srcMsgStack.push(this._srcMsg), this._srcMsg = srcMsg; var nodes = this._i18nNodesByMsgId[digest], text = nodes.map(function (node) { return node.visit(_this) }).join(""); return this._srcMsg = this._srcMsgStack.pop(), text } return this._addError(srcMsg.nodes[0], "Missing translation for message " + digest), "" }, I18nToHtmlVisitor.prototype._addError = function (el, msg) { this._errors.push(new I18nError(el.sourceSpan, msg)) }, I18nToHtmlVisitor }(), I18NHtmlParser = function () { function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) { this._htmlParser = _htmlParser, this._translations = _translations, this._translationsFormat = _translationsFormat } return I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) { void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG); var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig); if (!this._translations || "" === this._translations) return parseResult; if (parseResult.errors.length) return new ParseTreeResult(parseResult.rootNodes, parseResult.errors); var serializer = this._createSerializer(), translationBundle = TranslationBundle.load(this._translations, url, serializer); return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {}) }, I18NHtmlParser.prototype._createSerializer = function () { var format = (this._translationsFormat || "xlf").toLowerCase(); switch (format) { case "xmb": return new Xmb; case "xtb": return new Xtb; case "xliff": case "xlf": default: return new Xliff } }, I18NHtmlParser }(), APP_VIEW_MODULE_URL = assetUrl("core", "linker/view"), VIEW_UTILS_MODULE_URL = assetUrl("core", "linker/view_utils"), CD_MODULE_URL = assetUrl("core", "change_detection/change_detection"), ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl("core", "animation/animation_style_util"), Identifiers = function () { function Identifiers() { } return Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = { name: "ANALYZE_FOR_ENTRY_COMPONENTS", moduleUrl: assetUrl("core", "metadata/di"), runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS }, Identifiers.ViewUtils = { name: "ViewUtils", moduleUrl: assetUrl("core", "linker/view_utils"), runtime: view_utils.ViewUtils }, Identifiers.AppView = { name: "AppView", moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView }, Identifiers.DebugAppView = { name: "DebugAppView", moduleUrl: APP_VIEW_MODULE_URL, runtime: DebugAppView }, Identifiers.ViewContainer = { name: "ViewContainer", moduleUrl: assetUrl("core", "linker/view_container"), runtime: ViewContainer }, Identifiers.ElementRef = { name: "ElementRef", moduleUrl: assetUrl("core", "linker/element_ref"), runtime: _angular_core.ElementRef }, Identifiers.ViewContainerRef = { name: "ViewContainerRef", moduleUrl: assetUrl("core", "linker/view_container_ref"), runtime: _angular_core.ViewContainerRef }, Identifiers.ChangeDetectorRef = { name: "ChangeDetectorRef", moduleUrl: assetUrl("core", "change_detection/change_detector_ref"), runtime: _angular_core.ChangeDetectorRef }, Identifiers.RenderComponentType = { name: "RenderComponentType", moduleUrl: assetUrl("core", "render/api"), runtime: _angular_core.RenderComponentType }, Identifiers.QueryList = { name: "QueryList", moduleUrl: assetUrl("core", "linker/query_list"), runtime: _angular_core.QueryList }, Identifiers.TemplateRef = { name: "TemplateRef", moduleUrl: assetUrl("core", "linker/template_ref"), runtime: _angular_core.TemplateRef }, Identifiers.TemplateRef_ = { name: "TemplateRef_", moduleUrl: assetUrl("core", "linker/template_ref"), runtime: TemplateRef_ }, Identifiers.CodegenComponentFactoryResolver = { name: "CodegenComponentFactoryResolver", moduleUrl: assetUrl("core", "linker/component_factory_resolver"), runtime: CodegenComponentFactoryResolver }, Identifiers.ComponentFactoryResolver = { name: "ComponentFactoryResolver", moduleUrl: assetUrl("core", "linker/component_factory_resolver"), runtime: _angular_core.ComponentFactoryResolver }, Identifiers.ComponentFactory = { name: "ComponentFactory", runtime: _angular_core.ComponentFactory, moduleUrl: assetUrl("core", "linker/component_factory") }, Identifiers.ComponentRef_ = { name: "ComponentRef_", runtime: ComponentRef_, moduleUrl: assetUrl("core", "linker/component_factory") }, Identifiers.ComponentRef = { name: "ComponentRef", runtime: _angular_core.ComponentRef, moduleUrl: assetUrl("core", "linker/component_factory") }, Identifiers.NgModuleFactory = { name: "NgModuleFactory", runtime: _angular_core.NgModuleFactory, moduleUrl: assetUrl("core", "linker/ng_module_factory") }, Identifiers.NgModuleInjector = { name: "NgModuleInjector", runtime: NgModuleInjector, moduleUrl: assetUrl("core", "linker/ng_module_factory") }, Identifiers.RegisterModuleFactoryFn = { name: "registerModuleFactory", runtime: registerModuleFactory, moduleUrl: assetUrl("core", "linker/ng_module_factory_loader") }, Identifiers.ValueUnwrapper = { name: "ValueUnwrapper", moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper }, Identifiers.Injector = { name: "Injector", moduleUrl: assetUrl("core", "di/injector"), runtime: _angular_core.Injector }, Identifiers.ViewEncapsulation = { name: "ViewEncapsulation", moduleUrl: assetUrl("core", "metadata/view"), runtime: _angular_core.ViewEncapsulation }, Identifiers.ViewType = { name: "ViewType", moduleUrl: assetUrl("core", "linker/view_type"), runtime: ViewType }, Identifiers.ChangeDetectionStrategy = { name: "ChangeDetectionStrategy", moduleUrl: CD_MODULE_URL, runtime: _angular_core.ChangeDetectionStrategy }, Identifiers.StaticNodeDebugInfo = { name: "StaticNodeDebugInfo", moduleUrl: assetUrl("core", "linker/debug_context"), runtime: StaticNodeDebugInfo }, Identifiers.DebugContext = { name: "DebugContext", moduleUrl: assetUrl("core", "linker/debug_context"), runtime: DebugContext }, Identifiers.Renderer = { name: "Renderer", moduleUrl: assetUrl("core", "render/api"), runtime: _angular_core.Renderer }, Identifiers.SimpleChange = { name: "SimpleChange", moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange }, Identifiers.UNINITIALIZED = { name: "UNINITIALIZED", moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED }, Identifiers.ChangeDetectorStatus = { name: "ChangeDetectorStatus", moduleUrl: CD_MODULE_URL, runtime: ChangeDetectorStatus }, Identifiers.checkBinding = { name: "checkBinding", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.checkBinding }, Identifiers.devModeEqual = { name: "devModeEqual", moduleUrl: CD_MODULE_URL, runtime: devModeEqual }, Identifiers.inlineInterpolate = { name: "inlineInterpolate", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.inlineInterpolate }, Identifiers.interpolate = { name: "interpolate", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.interpolate }, Identifiers.castByValue = { name: "castByValue", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.castByValue }, Identifiers.EMPTY_ARRAY = { name: "EMPTY_ARRAY", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.EMPTY_ARRAY }, Identifiers.EMPTY_MAP = { name: "EMPTY_MAP", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.EMPTY_MAP }, Identifiers.createRenderElement = { name: "createRenderElement", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.createRenderElement }, Identifiers.selectOrCreateRenderHostElement = { name: "selectOrCreateRenderHostElement", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.selectOrCreateRenderHostElement }, Identifiers.pureProxies = [null, { name: "pureProxy1", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy1 }, { name: "pureProxy2", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy2 }, { name: "pureProxy3", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy3 }, { name: "pureProxy4", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy4 }, { name: "pureProxy5", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy5 }, { name: "pureProxy6", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy6 }, { name: "pureProxy7", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy7 }, { name: "pureProxy8", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy8 }, { name: "pureProxy9", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy9 }, { name: "pureProxy10", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy10 }], Identifiers.SecurityContext = { name: "SecurityContext", moduleUrl: assetUrl("core", "security"), runtime: _angular_core.SecurityContext }, Identifiers.AnimationKeyframe = { name: "AnimationKeyframe", moduleUrl: assetUrl("core", "animation/animation_keyframe"), runtime: AnimationKeyframe }, Identifiers.AnimationStyles = { name: "AnimationStyles", moduleUrl: assetUrl("core", "animation/animation_styles"), runtime: AnimationStyles }, Identifiers.NoOpAnimationPlayer = { name: "NoOpAnimationPlayer", moduleUrl: assetUrl("core", "animation/animation_player"), runtime: NoOpAnimationPlayer }, Identifiers.AnimationGroupPlayer = { name: "AnimationGroupPlayer", moduleUrl: assetUrl("core", "animation/animation_group_player"), runtime: AnimationGroupPlayer }, Identifiers.AnimationSequencePlayer = { name: "AnimationSequencePlayer", moduleUrl: assetUrl("core", "animation/animation_sequence_player"), runtime: AnimationSequencePlayer }, Identifiers.prepareFinalAnimationStyles = { name: "prepareFinalAnimationStyles", moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: prepareFinalAnimationStyles }, Identifiers.balanceAnimationKeyframes = { name: "balanceAnimationKeyframes", moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: balanceAnimationKeyframes }, Identifiers.clearStyles = { name: "clearStyles", moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: clearStyles }, Identifiers.renderStyles = { name: "renderStyles", moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: renderStyles }, Identifiers.collectAndResolveStyles = { name: "collectAndResolveStyles", moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL, runtime: collectAndResolveStyles }, Identifiers.LOCALE_ID = { name: "LOCALE_ID", moduleUrl: assetUrl("core", "i18n/tokens"), runtime: _angular_core.LOCALE_ID }, Identifiers.TRANSLATIONS_FORMAT = { name: "TRANSLATIONS_FORMAT", moduleUrl: assetUrl("core", "i18n/tokens"), runtime: _angular_core.TRANSLATIONS_FORMAT }, Identifiers.setBindingDebugInfo = { name: "setBindingDebugInfo", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.setBindingDebugInfo }, Identifiers.setBindingDebugInfoForChanges = { name: "setBindingDebugInfoForChanges", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.setBindingDebugInfoForChanges }, Identifiers.AnimationTransition = { name: "AnimationTransition", moduleUrl: assetUrl("core", "animation/animation_transition"), runtime: AnimationTransition }, Identifiers.InlineArray = { name: "InlineArray", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null }, Identifiers.inlineArrays = [{ name: "InlineArray2", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 }, { name: "InlineArray2", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 }, { name: "InlineArray4", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray4 }, { name: "InlineArray8", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray8 }, { name: "InlineArray16", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray16 }], Identifiers.EMPTY_INLINE_ARRAY = { name: "EMPTY_INLINE_ARRAY", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.EMPTY_INLINE_ARRAY }, Identifiers.InlineArrayDynamic = { name: "InlineArrayDynamic", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArrayDynamic }, Identifiers.subscribeToRenderElement = { name: "subscribeToRenderElement", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.subscribeToRenderElement }, Identifiers.createRenderComponentType = { name: "createRenderComponentType", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.createRenderComponentType }, Identifiers.noop = { name: "noop", moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.noop }, Identifiers }(), __extends$12 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, PLURAL_CASES = ["zero", "one", "two", "few", "many", "other"], ExpansionResult = function () { function ExpansionResult(nodes, expanded, errors) { this.nodes = nodes, this.expanded = expanded, this.errors = errors } return ExpansionResult }(), ExpansionError = function (_super) { function ExpansionError(span, errorMsg) { _super.call(this, span, errorMsg) } return __extends$12(ExpansionError, _super), ExpansionError }(ParseError), _Expander = function () { function _Expander() { this.isExpanded = !1, this.errors = [] } return _Expander.prototype.visitElement = function (element, context) { return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan) }, _Expander.prototype.visitAttribute = function (attribute, context) { return attribute }, _Expander.prototype.visitText = function (text, context) { return text }, _Expander.prototype.visitComment = function (comment, context) { return comment }, _Expander.prototype.visitExpansion = function (icu, context) { return this.isExpanded = !0, "plural" == icu.type ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors) }, _Expander.prototype.visitExpansionCase = function (icuCase, context) { throw new Error("Should not be reached") }, _Expander }(), __extends$13 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ProviderError = function (_super) { function ProviderError(message, span) { _super.call(this, span, message) } return __extends$13(ProviderError, _super), ProviderError }(ParseError), ProviderViewContext = function () {
        function ProviderViewContext(component, sourceSpan) {
            var _this = this; this.component = component, this.sourceSpan = sourceSpan, this.errors = [], this.viewQueries = _getViewQueries(component), this.viewProviders = new Map, component.viewProviders.forEach(function (provider) { isBlank(_this.viewProviders.get(tokenReference(provider.token))) && _this.viewProviders.set(tokenReference(provider.token), !0) })
        } return ProviderViewContext
    }(), ProviderElementContext = function () { function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) { var _this = this; this.viewContext = viewContext, this._parent = _parent, this._isViewRoot = _isViewRoot, this._directiveAsts = _directiveAsts, this._sourceSpan = _sourceSpan, this._transformedProviders = new Map, this._seenProviders = new Map, this._hasViewContainer = !1, this._attrs = {}, attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value }); var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive }); this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors), this._contentQueries = _getContentQueries(directivesMeta); var queriedTokens = new Map; Array.from(this._allProviders.values()).forEach(function (provider) { _this._addQueryReadsTo(provider.token, queriedTokens) }), refs.forEach(function (refAst) { _this._addQueryReadsTo({ value: refAst.name }, queriedTokens) }), isPresent(queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) && (this._hasViewContainer = !0), Array.from(this._allProviders.values()).forEach(function (provider) { var eager = provider.eager || isPresent(queriedTokens.get(tokenReference(provider.token))); eager && _this._getOrCreateLocalProvider(provider.providerType, provider.token, !0) }) } return ProviderElementContext.prototype.afterElement = function () { var _this = this; Array.from(this._allProviders.values()).forEach(function (provider) { _this._getOrCreateLocalProvider(provider.providerType, provider.token, !1) }) }, Object.defineProperty(ProviderElementContext.prototype, "transformProviders", { get: function () { return Array.from(this._transformedProviders.values()) }, enumerable: !0, configurable: !0 }), Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", { get: function () { var sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier }), sortedDirectives = this._directiveAsts.slice(); return sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type) }), sortedDirectives }, enumerable: !0, configurable: !0 }), Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", { get: function () { return this._hasViewContainer }, enumerable: !0, configurable: !0 }), ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) { this._getQueriesFor(token).forEach(function (query) { var queryReadToken = query.read || token; isBlank(queryReadTokens.get(tokenReference(queryReadToken))) && queryReadTokens.set(tokenReference(queryReadToken), !0) }) }, ProviderElementContext.prototype._getQueriesFor = function (token) { for (var queries, result = [], currentEl = this, distance = 0; null !== currentEl;) queries = currentEl._contentQueries.get(tokenReference(token)), isPresent(queries) && result.push.apply(result, queries.filter(function (query) { return query.descendants || distance <= 1 })), currentEl._directiveAsts.length > 0 && distance++, currentEl = currentEl._parent; return queries = this.viewContext.viewQueries.get(tokenReference(token)), isPresent(queries) && result.push.apply(result, queries), result }, ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) { var _this = this, resolvedProvider = this._allProviders.get(tokenReference(token)); if (!resolvedProvider || (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService || (requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin) return null; var transformedProviderAst = this._transformedProviders.get(tokenReference(token)); if (isPresent(transformedProviderAst)) return transformedProviderAst; if (isPresent(this._seenProviders.get(tokenReference(token)))) return this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan)), null; this._seenProviders.set(tokenReference(token), !0); var transformedProviders = resolvedProvider.providers.map(function (provider) { var transformedDeps, transformedUseValue = provider.useValue, transformedUseExisting = provider.useExisting; if (isPresent(provider.useExisting)) { var existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager); isPresent(existingDiDep.token) ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value) } else if (isPresent(provider.useFactory)) { var deps = provider.deps || provider.useFactory.diDeps; transformedDeps = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager) }) } else if (isPresent(provider.useClass)) { var deps = provider.deps || provider.useClass.diDeps; transformedDeps = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager) }) } return _transformProvider(provider, { useExisting: transformedUseExisting, useValue: transformedUseValue, deps: transformedDeps }) }); return transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders }), this._transformedProviders.set(tokenReference(token), transformedProviderAst), transformedProviderAst }, ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) { if (void 0 === eager && (eager = null), dep.isAttribute) { var attrValue = this._attrs[dep.token.value]; return { isValue: !0, value: null == attrValue ? null : attrValue } } if (isPresent(dep.token)) { if (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component) { if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) return dep; tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef) && (this._hasViewContainer = !0) } if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) return dep; if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) return dep } return null }, ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) { void 0 === eager && (eager = null); var currElement = this, currEager = eager, result = null; if (dep.isSkipSelf || (result = this._getLocalDependency(requestingProviderType, dep, eager)), dep.isSelf) !result && dep.isOptional && (result = { isValue: !0, value: null }); else { for (; !result && isPresent(currElement._parent) ;) { var prevElement = currElement; currElement = currElement._parent, prevElement._isViewRoot && (currEager = !1), result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager) } result || (result = !dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token))) ? dep : dep.isOptional ? result = { isValue: !0, value: null } : null) } return result || this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan)), result }, ProviderElementContext }(), NgModuleProviderAnalyzer = function () { function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) { var _this = this; this._transformedProviders = new Map, this._seenProviders = new Map, this._errors = [], this._allProviders = new Map, ngModule.transitiveModule.modules.forEach(function (ngModuleType) { var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType }; _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, !0, sourceSpan, _this._errors, _this._allProviders) }), _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider }).concat(extraProviders), ProviderAstType.PublicService, !1, sourceSpan, this._errors, this._allProviders) } return NgModuleProviderAnalyzer.prototype.parse = function () { var _this = this; if (Array.from(this._allProviders.values()).forEach(function (provider) { _this._getOrCreateLocalProvider(provider.token, provider.eager) }), this._errors.length > 0) { var errorString = this._errors.join("\n"); throw new Error("Provider parse errors:\n" + errorString) } return Array.from(this._transformedProviders.values()) }, NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) { var _this = this, resolvedProvider = this._allProviders.get(tokenReference(token)); if (!resolvedProvider) return null; var transformedProviderAst = this._transformedProviders.get(tokenReference(token)); if (isPresent(transformedProviderAst)) return transformedProviderAst; if (isPresent(this._seenProviders.get(tokenReference(token)))) return this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan)), null; this._seenProviders.set(tokenReference(token), !0); var transformedProviders = resolvedProvider.providers.map(function (provider) { var transformedDeps, transformedUseValue = provider.useValue, transformedUseExisting = provider.useExisting; if (isPresent(provider.useExisting)) { var existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan); isPresent(existingDiDep.token) ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value) } else if (isPresent(provider.useFactory)) { var deps = provider.deps || provider.useFactory.diDeps; transformedDeps = deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan) }) } else if (isPresent(provider.useClass)) { var deps = provider.deps || provider.useClass.diDeps; transformedDeps = deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan) }) } return _transformProvider(provider, { useExisting: transformedUseExisting, useValue: transformedUseValue, deps: transformedDeps }) }); return transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders }), this._transformedProviders.set(tokenReference(token), transformedProviderAst), transformedProviderAst }, NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) { void 0 === eager && (eager = null); var foundLocal = !1; !dep.isSkipSelf && isPresent(dep.token) && (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver) ? foundLocal = !0 : isPresent(this._getOrCreateLocalProvider(dep.token, eager)) && (foundLocal = !0)); var result = dep; return dep.isSelf && !foundLocal && (dep.isOptional ? result = { isValue: !0, value: null } : this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan))), result }, NgModuleProviderAnalyzer }(), ElementSchemaRegistry = function () { function ElementSchemaRegistry() { } return ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { }, ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { }, ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) { }, ElementSchemaRegistry.prototype.allKnownElementNames = function () { }, ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { }, ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { }, ElementSchemaRegistry.prototype.validateProperty = function (name) { }, ElementSchemaRegistry.prototype.validateAttribute = function (name) { }, ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { }, ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { }, ElementSchemaRegistry }(), StyleWithImports = function () { function StyleWithImports(style, styleUrls) { this.style = style, this.styleUrls = styleUrls } return StyleWithImports }(), CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g, CSS_COMMENT_REGEXP = /\/\*.+?\*\//g, URL_WITH_SCHEMA_REGEXP = /^([^:\/?#]+):/, __extends$14 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, PROPERTY_PARTS_SEPARATOR = ".", ATTRIBUTE_PREFIX = "attr", CLASS_PREFIX = "class", STYLE_PREFIX = "style", ANIMATE_PROP_PREFIX = "animate-", BoundPropertyType = {}; BoundPropertyType.DEFAULT = 0, BoundPropertyType.LITERAL_ATTR = 1, BoundPropertyType.ANIMATION = 2, BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT", BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR", BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION"; var BoundProperty = function () { function BoundProperty(name, expression, type, sourceSpan) { this.name = name, this.expression = expression, this.type = type, this.sourceSpan = sourceSpan } return Object.defineProperty(BoundProperty.prototype, "isLiteral", { get: function () { return this.type === BoundPropertyType.LITERAL_ATTR }, enumerable: !0, configurable: !0 }), Object.defineProperty(BoundProperty.prototype, "isAnimation", { get: function () { return this.type === BoundPropertyType.ANIMATION }, enumerable: !0, configurable: !0 }), BoundProperty }(), BindingParser = function () { function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) { var _this = this; this._exprParser = _exprParser, this._interpolationConfig = _interpolationConfig, this._schemaRegistry = _schemaRegistry, this._targetErrors = _targetErrors, this.pipesByName = new Map, pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe) }) } return BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, sourceSpan) { var _this = this; if (dirMeta.hostProperties) { var boundProps_1 = []; return Object.keys(dirMeta.hostProperties).forEach(function (propName) { var expression = dirMeta.hostProperties[propName]; "string" == typeof expression ? _this.parsePropertyBinding(propName, expression, !0, sourceSpan, [], boundProps_1) : _this._reportError('Value of the host property binding "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan) }), boundProps_1.map(function (prop) { return _this.createElementPropertyAst(dirMeta.selector, prop) }) } }, BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) { var _this = this; if (dirMeta.hostListeners) { var targetEventAsts_1 = []; return Object.keys(dirMeta.hostListeners).forEach(function (propName) { var expression = dirMeta.hostListeners[propName]; "string" == typeof expression ? _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1) : _this._reportError('Value of the host listener "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan) }), targetEventAsts_1 } }, BindingParser.prototype.parseInterpolation = function (value, sourceSpan) { var sourceInfo = sourceSpan.start.toString(); try { var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig); return ast && this._reportExpressionParserErrors(ast.errors, sourceSpan), this._checkPipes(ast, sourceSpan), ast } catch (e) { return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo) } }, BindingParser.prototype.parseInlineTemplateBinding = function (name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) { for (var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan), i = 0; i < bindings.length; i++) { var binding = bindings[i]; binding.keyIsVar ? targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan)) : isPresent(binding.expression) ? this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps) : (targetMatchableAttrs.push([binding.key, ""]), this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps)) } }, BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) { var _this = this, sourceInfo = sourceSpan.start.toString(); try { var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo); return this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan), bindingsResult.templateBindings.forEach(function (binding) { isPresent(binding.expression) && _this._checkPipes(binding.expression, sourceSpan) }), bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING) }), bindingsResult.templateBindings } catch (e) { return this._reportError("" + e, sourceSpan), [] } }, BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) { _isAnimationLabel(name) ? (name = name.substring(1), value && this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is invalid. Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.', sourceSpan, ParseErrorLevel.FATAL), this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps)) : targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), BoundPropertyType.LITERAL_ATTR, sourceSpan)) }, BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) { var isAnimationProp = !1; name.startsWith(ANIMATE_PROP_PREFIX) ? (isAnimationProp = !0, name = name.substring(ANIMATE_PROP_PREFIX.length)) : _isAnimationLabel(name) && (isAnimationProp = !0, name = name.substring(1)), isAnimationProp ? this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps) : this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps) }, BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) { var expr = this.parseInterpolation(value, sourceSpan); return !!isPresent(expr) && (this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps), !0) }, BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) { targetMatchableAttrs.push([name, ast.source]), targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan)) }, BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) { var ast = this._parseBinding(expression || "null", !1, sourceSpan); targetMatchableAttrs.push([name, ast.source]), targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan)) }, BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) { var sourceInfo = sourceSpan.start.toString(); try { var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig); return ast && this._reportExpressionParserErrors(ast.errors, sourceSpan), this._checkPipes(ast, sourceSpan), ast } catch (e) { return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo) } }, BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) { if (boundProp.isAnimation) return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, (!1), boundProp.expression, null, boundProp.sourceSpan); var bindingType, securityContexts, unit = null, boundPropertyName = null, parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR); if (parts.length > 1) if (parts[0] == ATTRIBUTE_PREFIX) { boundPropertyName = parts[1], this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, !0), securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, !0); var nsSeparatorIdx = boundPropertyName.indexOf(":"); if (nsSeparatorIdx > -1) { var ns = boundPropertyName.substring(0, nsSeparatorIdx), name_1 = boundPropertyName.substring(nsSeparatorIdx + 1); boundPropertyName = mergeNsAndName(ns, name_1) } bindingType = PropertyBindingType.Attribute } else parts[0] == CLASS_PREFIX ? (boundPropertyName = parts[1], bindingType = PropertyBindingType.Class, securityContexts = [_angular_core.SecurityContext.NONE]) : parts[0] == STYLE_PREFIX && (unit = parts.length > 2 ? parts[2] : null, boundPropertyName = parts[1], bindingType = PropertyBindingType.Style, securityContexts = [_angular_core.SecurityContext.STYLE]); return null === boundPropertyName && (boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name), securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, !1), bindingType = PropertyBindingType.Property, this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, !1)), new BoundElementPropertyAst(boundPropertyName, bindingType, 1 === securityContexts.length ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan) }, BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) { _isAnimationLabel(name) ? (name = name.substr(1), this._parseAnimationEvent(name, expression, sourceSpan, targetEvents)) : this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) }, BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) { var matches = splitAtPeriod(name, [name, ""]), eventName = matches[0], phase = matches[1].toLowerCase(); if (phase) switch (phase) { case "start": case "done": var ast = this._parseAction(expression, sourceSpan); targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan)); break; default: this._reportError('The provided animation output phase value "' + phase + '" for "@' + eventName + '" is not supported (use start or done)', sourceSpan) } else this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan) }, BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) { var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1], ast = this._parseAction(expression, sourceSpan); targetMatchableAttrs.push([name, ast.source]), targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan)) }, BindingParser.prototype._parseAction = function (value, sourceSpan) { var sourceInfo = sourceSpan.start.toString(); try { var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig); return ast && this._reportExpressionParserErrors(ast.errors, sourceSpan), !ast || ast.ast instanceof EmptyExpr ? (this._reportError("Empty expressions are not allowed", sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo)) : (this._checkPipes(ast, sourceSpan), ast) } catch (e) { return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo) } }, BindingParser.prototype._reportError = function (message, sourceSpan, level) { void 0 === level && (level = ParseErrorLevel.FATAL), this._targetErrors.push(new ParseError(sourceSpan, message, level)) }, BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) { for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) { var error = errors_1[_i]; this._reportError(error.message, sourceSpan) } }, BindingParser.prototype._checkPipes = function (ast, sourceSpan) { var _this = this; if (isPresent(ast)) { var collector = new PipeCollector; ast.visit(collector), collector.pipes.forEach(function (ast, pipeName) { _this.pipesByName.has(pipeName) || _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end))) }) } }, BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) { var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName); report.error && this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL) }, BindingParser }(), PipeCollector = function (_super) { function PipeCollector() { _super.apply(this, arguments), this.pipes = new Map } return __extends$14(PipeCollector, _super), PipeCollector.prototype.visitPipe = function (ast, context) { return this.pipes.set(ast.name, ast), ast.exp.visit(this), this.visitAll(ast.args, context), null }, PipeCollector }(RecursiveAstVisitor), NG_CONTENT_SELECT_ATTR = "select", NG_CONTENT_ELEMENT = "ng-content", LINK_ELEMENT = "link", LINK_STYLE_REL_ATTR = "rel", LINK_STYLE_HREF_ATTR = "href", LINK_STYLE_REL_VALUE = "stylesheet", STYLE_ELEMENT = "style", SCRIPT_ELEMENT = "script", NG_NON_BINDABLE_ATTR = "ngNonBindable", NG_PROJECT_AS = "ngProjectAs", PreparsedElementType = {}; PreparsedElementType.NG_CONTENT = 0, PreparsedElementType.STYLE = 1, PreparsedElementType.STYLESHEET = 2, PreparsedElementType.SCRIPT = 3, PreparsedElementType.OTHER = 4, PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT", PreparsedElementType[PreparsedElementType.STYLE] = "STYLE", PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET", PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT", PreparsedElementType[PreparsedElementType.OTHER] = "OTHER"; var PreparsedElement = function () { function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) { this.type = type, this.selectAttr = selectAttr, this.hrefAttr = hrefAttr, this.nonBindable = nonBindable, this.projectAs = projectAs } return PreparsedElement }(), __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, __decorate = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/, KW_BIND_IDX = 1, KW_LET_IDX = 2, KW_REF_IDX = 3, KW_ON_IDX = 4, KW_BINDON_IDX = 5, KW_AT_IDX = 6, IDENT_KW_IDX = 7, IDENT_BANANA_BOX_IDX = 8, IDENT_PROPERTY_IDX = 9, IDENT_EVENT_IDX = 10, TEMPLATE_ELEMENT = "template", TEMPLATE_ATTR = "template", TEMPLATE_ATTR_PREFIX = "*", CLASS_ATTR = "class", TEXT_CSS_SELECTOR = CssSelector.parse("*")[0], TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken("TemplateTransforms"), TemplateParseError = function (_super) { function TemplateParseError(message, span, level) { _super.call(this, span, message, level) } return __extends(TemplateParseError, _super), TemplateParseError }(ParseError), TemplateParseResult = function () { function TemplateParseResult(templateAst, errors) { this.templateAst = templateAst, this.errors = errors } return TemplateParseResult }(), TemplateParser = function () { function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) { this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this._htmlParser = _htmlParser, this._console = _console, this.transforms = transforms } return TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) { var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl), warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING }), errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.FATAL }); if (warnings.length > 0 && this._console.warn("Template parse warnings:\n" + warnings.join("\n")), errors.length > 0) { var errorString = errors.join("\n"); throw new SyntaxError("Template parse errors:\n" + errorString) } return result.templateAst }, TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) { return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, !0, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl) }, TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) { var result, errors = htmlAstWithErrors.errors; if (htmlAstWithErrors.rootNodes.length > 0) { var uniqDirectives = removeSummaryDuplicates(directives), uniqPipes = removeSummaryDuplicates(pipes), providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan), interpolationConfig = void 0; component.template && component.template.interpolation && (interpolationConfig = { start: component.template.interpolation[0], end: component.template.interpolation[1] }); var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors), parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors); result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT), errors.push.apply(errors, providerViewContext.errors) } else result = []; return this._assertNoReferenceDuplicationOnTemplate(result, errors), errors.length > 0 ? new TemplateParseResult(result, errors) : (isPresent(this.transforms) && this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result) }), new TemplateParseResult(result, errors)) }, TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) { void 0 === forced && (forced = !1); var errors = htmlAstWithErrors.errors; if (0 == errors.length || forced) { var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes); errors.push.apply(errors, expandedHtmlAst.errors), htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors) } return htmlAstWithErrors }, TemplateParser.prototype.getInterpolationConfig = function (component) { if (component.template) return InterpolationConfig.fromArray(component.template.interpolation) }, TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) { var existingReferences = []; result.filter(function (element) { return !!element.references }).forEach(function (element) { return element.references.forEach(function (reference) { var name = reference.name; if (existingReferences.indexOf(name) < 0) existingReferences.push(name); else { var error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, ParseErrorLevel.FATAL); errors.push(error) } }) }) }, TemplateParser.ctorParameters = function () { return [{ type: Parser }, { type: ElementSchemaRegistry }, { type: I18NHtmlParser }, { type: Console }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS] }] }] }, TemplateParser = __decorate([CompilerInjectable(), __metadata("design:paramtypes", [Parser, ElementSchemaRegistry, I18NHtmlParser, Console, Array])], TemplateParser) }(), TemplateParseVisitor = function () {
        function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) { var _this = this; this.providerViewContext = providerViewContext, this._bindingParser = _bindingParser, this._schemaRegistry = _schemaRegistry, this._schemas = _schemas, this._targetErrors = _targetErrors, this.selectorMatcher = new SelectorMatcher, this.directivesIndex = new Map, this.ngContentCount = 0, directives.forEach(function (directive, index) { var selector = CssSelector.parse(directive.selector); _this.selectorMatcher.addSelectables(selector, directive), _this.directivesIndex.set(directive, index) }) } return TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null }, TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null }, TemplateParseVisitor.prototype.visitText = function (text, parent) { var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR), expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan); return isPresent(expr) ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(text.value, ngContentIndex, text.sourceSpan) }, TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan)
        }, TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null }, TemplateParseVisitor.prototype.visitElement = function (element, parent) { var _this = this, nodeName = element.name, preparsedElement = preparseElement(element); if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) return null; if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) return null; var matchableAttrs = [], elementOrDirectiveProps = [], elementOrDirectiveRefs = [], elementVars = [], events = [], templateElementOrDirectiveProps = [], templateMatchableAttrs = [], templateElementVars = [], hasInlineTemplates = !1, attrs = [], lcElName = splitNsName(nodeName.toLowerCase())[1], isTemplateElement = lcElName == TEMPLATE_ELEMENT; element.attrs.forEach(function (attr) { var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars), templateBindingsSource = void 0, prefixToken = void 0; _this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR ? templateBindingsSource = attr.value : attr.name.startsWith(TEMPLATE_ATTR_PREFIX) && (templateBindingsSource = attr.value, prefixToken = attr.name.substring(TEMPLATE_ATTR_PREFIX.length)); var hasTemplateBinding = isPresent(templateBindingsSource); hasTemplateBinding && (hasInlineTemplates && _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan), hasInlineTemplates = !0, _this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars)), hasBinding || hasTemplateBinding || (attrs.push(_this.visitAttribute(attr, null)), matchableAttrs.push([attr.name, attr.value])) }); var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs), _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement, references = [], directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references), elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts), isViewRoot = parent.isTemplateElement || hasInlineTemplates, providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan), children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext)); providerContext.afterElement(); var parsedElement, projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector, ngContentIndex = parent.findNgContentIndex(projectionSelector); if (preparsedElement.type === PreparsedElementType.NG_CONTENT) element.children && !element.children.every(_isEmptyTextNode) && this._reportError("<ng-content> element cannot have content.", element.sourceSpan), parsedElement = new NgContentAst((this.ngContentCount++), hasInlineTemplates ? null : ngContentIndex, element.sourceSpan); else if (isTemplateElement) this._assertAllEventsPublishedByDirectives(directiveAsts, events), this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan), parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan); else { this._assertElementExists(matchElement, element), this._assertOnlyOneComponent(directiveAsts, element.sourceSpan); var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector); parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan), this._findComponentDirectives(directiveAsts).forEach(function (componentDirectiveAst) { return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template) }); var componentTemplate = providerContext.viewContext.component.template; this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary()) } if (hasInlineTemplates) { var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs), templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives, templateDirectiveAsts = this._createDirectiveAsts(!0, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []), templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts); this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan); var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan); templateProviderContext.afterElement(), parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan) } return parsedElement }, TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) { var _this = this, triggerLookup = new Set; template.animations.forEach(function (entry) { triggerLookup.add(entry) }); var animationInputs = inputs.filter(function (input) { return input.isAnimation }); animationInputs.forEach(function (input) { var name = input.name; triggerLookup.has(name) || _this._reportError("Couldn't find an animation entry for \"" + name + '"', input.sourceSpan) }), outputs.forEach(function (output) { if (output.isAnimation) { var found = animationInputs.find(function (input) { return input.name == output.name }); found || _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan) } }) }, TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) { var name = this._normalizeAttributeName(attr.name), value = attr.value, srcSpan = attr.sourceSpan, bindParts = name.match(BIND_NAME_REGEXP), hasBinding = !1; if (null !== bindParts) if (hasBinding = !0, isPresent(bindParts[KW_BIND_IDX])) this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps); else if (bindParts[KW_LET_IDX]) if (isTemplateElement) { var identifier = bindParts[IDENT_KW_IDX]; this._parseVariable(identifier, value, srcSpan, targetVars) } else this._reportError('"let-" is only supported on template elements.', srcSpan); else if (bindParts[KW_REF_IDX]) { var identifier = bindParts[IDENT_KW_IDX]; this._parseReference(identifier, value, srcSpan, targetRefs) } else bindParts[KW_ON_IDX] ? this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents) : bindParts[KW_BINDON_IDX] ? (this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps), this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents)) : bindParts[KW_AT_IDX] ? this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps) : bindParts[IDENT_BANANA_BOX_IDX] ? (this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps), this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents)) : bindParts[IDENT_PROPERTY_IDX] ? this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps) : bindParts[IDENT_EVENT_IDX] && this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents); else hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps); return hasBinding || this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps), hasBinding }, TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) { return /^data-/i.test(attrName) ? attrName.substring(5) : attrName }, TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) { identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in variable names', sourceSpan), targetVars.push(new VariableAst(identifier, value, sourceSpan)) }, TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) { identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in reference names', sourceSpan), targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan)) }, TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) { this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents) }, TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) { var _this = this, directives = new Array(this.directivesIndex.size), matchElement = !1; return selectorMatcher.match(elementCssSelector, function (selector, directive) { directives[_this.directivesIndex.get(directive)] = directive, matchElement = matchElement || selector.hasElementSelector() }), { directives: directives.filter(function (dir) { return !!dir }), matchElement: matchElement } }, TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) { var _this = this, matchedReferences = new Set, component = null, directiveAsts = directives.map(function (directive) { var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type)); directive.isComponent && (component = directive); var directiveProperties = [], hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan); _this._checkPropertiesInSchema(elementName, hostProperties); var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan); return _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties), elementOrDirectiveRefs.forEach(function (elOrDirRef) { (0 === elOrDirRef.value.length && directive.isComponent || directive.exportAs == elOrDirRef.value) && (targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan)), matchedReferences.add(elOrDirRef.name)) }), new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan) }); return elementOrDirectiveRefs.forEach(function (elOrDirRef) { if (elOrDirRef.value.length > 0) matchedReferences.has(elOrDirRef.name) || _this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan); else if (!component) { var refToken = null; isTemplateElement && (refToken = createIdentifierToken(Identifiers.TemplateRef)), targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan)) } }), directiveAsts }, TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) { if (directiveProperties) { var boundPropsByName_1 = new Map; boundProps.forEach(function (boundProp) { var prevValue = boundPropsByName_1.get(boundProp.name); prevValue && !prevValue.isLiteral || boundPropsByName_1.set(boundProp.name, boundProp) }), Object.keys(directiveProperties).forEach(function (dirProp) { var elProp = directiveProperties[dirProp], boundProp = boundPropsByName_1.get(elProp); boundProp && targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan)) }) } }, TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) { var _this = this, boundElementProps = [], boundDirectivePropsIndex = new Map; return directives.forEach(function (directive) { directive.inputs.forEach(function (prop) { boundDirectivePropsIndex.set(prop.templateName, prop) }) }), props.forEach(function (prop) { prop.isLiteral || boundDirectivePropsIndex.get(prop.name) || boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop)) }), this._checkPropertiesInSchema(elementName, boundElementProps), boundElementProps }, TemplateParseVisitor.prototype._findComponentDirectives = function (directives) { return directives.filter(function (directive) { return directive.directive.isComponent }) }, TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) { return this._findComponentDirectives(directives).map(function (directive) { return identifierName(directive.directive.type) }) }, TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) { var componentTypeNames = this._findComponentDirectiveNames(directives); componentTypeNames.length > 1 && this._reportError("More than one component matched on this element.\nMake sure that only one component's selector can match a given element.\nConflicting components: " + componentTypeNames.join(","), sourceSpan) }, TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) { var elName = element.name.replace(/^:xhtml:/, ""); if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) { var errorMsg = "'" + elName + "' is not a known element:\n" + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message."); this._reportError(errorMsg, element.sourceSpan) } }, TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) { var _this = this, componentTypeNames = this._findComponentDirectiveNames(directives); componentTypeNames.length > 0 && this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan), elementProps.forEach(function (prop) { _this._reportError("Property binding " + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "@NgModule.declarations".', sourceSpan) }) }, TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) { var _this = this, allDirectiveEvents = new Set; directives.forEach(function (directive) { Object.keys(directive.directive.outputs).forEach(function (k) { var eventName = directive.directive.outputs[k]; allDirectiveEvents.add(eventName) }) }), events.forEach(function (event) { !isPresent(event.target) && allDirectiveEvents.has(event.name) || _this._reportError("Event binding " + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "@NgModule.declarations".', event.sourceSpan) }) }, TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) { var _this = this; boundProps.forEach(function (boundProp) { if (boundProp.type === PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) { var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'."; elementName.indexOf("-") > -1 && (errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n")), _this._reportError(errorMsg, boundProp.sourceSpan) } }) }, TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) { void 0 === level && (level = ParseErrorLevel.FATAL), this._targetErrors.push(new ParseError(sourceSpan, message, level)) }, TemplateParseVisitor
    }(), NonBindableVisitor = function () { function NonBindableVisitor() { } return NonBindableVisitor.prototype.visitElement = function (ast, parent) { var preparsedElement = preparseElement(ast); if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) return null; var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value] }), selector = createElementCssSelector(ast.name, attrNameAndValues), ngContentIndex = parent.findNgContentIndex(selector), children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT); return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], (!1), children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan) }, NonBindableVisitor.prototype.visitComment = function (comment, context) { return null }, NonBindableVisitor.prototype.visitAttribute = function (attribute, context) { return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan) }, NonBindableVisitor.prototype.visitText = function (text, parent) { var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR); return new TextAst(text.value, ngContentIndex, text.sourceSpan) }, NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion }, NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase }, NonBindableVisitor }(), ElementOrDirectiveRef = function () { function ElementOrDirectiveRef(name, value, sourceSpan) { this.name = name, this.value = value, this.sourceSpan = sourceSpan } return ElementOrDirectiveRef }(), ElementContext = function () { function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) { this.isTemplateElement = isTemplateElement, this._ngContentIndexMatcher = _ngContentIndexMatcher, this._wildcardNgContentIndex = _wildcardNgContentIndex, this.providerContext = providerContext } return ElementContext.create = function (isTemplateElement, directives, providerContext) { var matcher = new SelectorMatcher, wildcardNgContentIndex = null, component = directives.find(function (directive) { return directive.directive.isComponent }); if (component) for (var ngContentSelectors = component.directive.template.ngContentSelectors, i = 0; i < ngContentSelectors.length; i++) { var selector = ngContentSelectors[i]; "*" === selector ? wildcardNgContentIndex = i : matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i) } return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext) }, ElementContext.prototype.findNgContentIndex = function (selector) { var ngContentIndices = []; return this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex) }), ngContentIndices.sort(), isPresent(this._wildcardNgContentIndex) && ngContentIndices.push(this._wildcardNgContentIndex), ngContentIndices.length > 0 ? ngContentIndices[0] : null }, ElementContext }(), EMPTY_ELEMENT_CONTEXT = new ElementContext((!0), new SelectorMatcher, null, null), NON_BINDABLE_VISITOR = new NonBindableVisitor, CompilerConfig = function () { function CompilerConfig(_a) { var _b = void 0 === _a ? {} : _a, _c = _b.renderTypes, renderTypes = void 0 === _c ? new DefaultRenderTypes : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = void 0 === _d ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = void 0 === _e || _e; this.renderTypes = renderTypes, this.defaultEncapsulation = defaultEncapsulation, this._genDebugInfo = genDebugInfo, this._logBindingUpdate = logBindingUpdate, this.useJit = useJit } return Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", { get: function () { return void 0 === this._genDebugInfo ? _angular_core.isDevMode() : this._genDebugInfo }, enumerable: !0, configurable: !0 }), Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", { get: function () { return void 0 === this._logBindingUpdate ? _angular_core.isDevMode() : this._logBindingUpdate }, enumerable: !0, configurable: !0 }), CompilerConfig }(), RenderTypes = function () { function RenderTypes() { } return Object.defineProperty(RenderTypes.prototype, "renderer", { get: function () { return unimplemented$2() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderTypes.prototype, "renderText", { get: function () { return unimplemented$2() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderTypes.prototype, "renderElement", { get: function () { return unimplemented$2() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderTypes.prototype, "renderComment", { get: function () { return unimplemented$2() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderTypes.prototype, "renderNode", { get: function () { return unimplemented$2() }, enumerable: !0, configurable: !0 }), Object.defineProperty(RenderTypes.prototype, "renderEvent", { get: function () { return unimplemented$2() }, enumerable: !0, configurable: !0 }), RenderTypes }(), DefaultRenderTypes = function () { function DefaultRenderTypes() { this.renderText = null, this.renderElement = null, this.renderComment = null, this.renderNode = null, this.renderEvent = null } return Object.defineProperty(DefaultRenderTypes.prototype, "renderer", { get: function () { return createIdentifier(Identifiers.Renderer) }, enumerable: !0, configurable: !0 }), DefaultRenderTypes }(), __extends$16 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, AnimationAst = function () { function AnimationAst() { this.startTime = 0, this.playTime = 0 } return AnimationAst.prototype.visit = function (visitor, context) { }, AnimationAst }(), AnimationStateAst = function (_super) { function AnimationStateAst() { _super.apply(this, arguments) } return __extends$16(AnimationStateAst, _super), AnimationStateAst.prototype.visit = function (visitor, context) { }, AnimationStateAst }(AnimationAst), AnimationEntryAst = function (_super) { function AnimationEntryAst(name, stateDeclarations, stateTransitions) { _super.call(this), this.name = name, this.stateDeclarations = stateDeclarations, this.stateTransitions = stateTransitions } return __extends$16(AnimationEntryAst, _super), AnimationEntryAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationEntry(this, context) }, AnimationEntryAst }(AnimationAst), AnimationStateDeclarationAst = function (_super) { function AnimationStateDeclarationAst(stateName, styles) { _super.call(this), this.stateName = stateName, this.styles = styles } return __extends$16(AnimationStateDeclarationAst, _super), AnimationStateDeclarationAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationStateDeclaration(this, context) }, AnimationStateDeclarationAst }(AnimationStateAst), AnimationStateTransitionExpression = function () { function AnimationStateTransitionExpression(fromState, toState) { this.fromState = fromState, this.toState = toState } return AnimationStateTransitionExpression }(), AnimationStateTransitionAst = function (_super) { function AnimationStateTransitionAst(stateChanges, animation) { _super.call(this), this.stateChanges = stateChanges, this.animation = animation } return __extends$16(AnimationStateTransitionAst, _super), AnimationStateTransitionAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationStateTransition(this, context) }, AnimationStateTransitionAst }(AnimationStateAst), AnimationStepAst = function (_super) { function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) { _super.call(this), this.startingStyles = startingStyles, this.keyframes = keyframes, this.duration = duration, this.delay = delay, this.easing = easing } return __extends$16(AnimationStepAst, _super), AnimationStepAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationStep(this, context) }, AnimationStepAst }(AnimationAst), AnimationStylesAst = function (_super) { function AnimationStylesAst(styles) { _super.call(this), this.styles = styles } return __extends$16(AnimationStylesAst, _super), AnimationStylesAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationStyles(this, context) }, AnimationStylesAst }(AnimationAst), AnimationKeyframeAst = function (_super) { function AnimationKeyframeAst(offset, styles) { _super.call(this), this.offset = offset, this.styles = styles } return __extends$16(AnimationKeyframeAst, _super), AnimationKeyframeAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationKeyframe(this, context) }, AnimationKeyframeAst }(AnimationAst), AnimationWithStepsAst = function (_super) { function AnimationWithStepsAst(steps) { _super.call(this), this.steps = steps } return __extends$16(AnimationWithStepsAst, _super), AnimationWithStepsAst }(AnimationAst), AnimationGroupAst = function (_super) { function AnimationGroupAst(steps) { _super.call(this, steps) } return __extends$16(AnimationGroupAst, _super), AnimationGroupAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationGroup(this, context) }, AnimationGroupAst }(AnimationWithStepsAst), AnimationSequenceAst = function (_super) { function AnimationSequenceAst(steps) { _super.call(this, steps) } return __extends$16(AnimationSequenceAst, _super), AnimationSequenceAst.prototype.visit = function (visitor, context) { return visitor.visitAnimationSequence(this, context) }, AnimationSequenceAst }(AnimationWithStepsAst), StylesCollectionEntry = function () { function StylesCollectionEntry(time, value) { this.time = time, this.value = value } return StylesCollectionEntry.prototype.matches = function (time, value) { return time == this.time && value == this.value }, StylesCollectionEntry }(), StylesCollection = function () { function StylesCollection() { this.styles = {} } return StylesCollection.prototype.insertAtTime = function (property, time, value) { var tuple = new StylesCollectionEntry(time, value), entries = this.styles[property]; isPresent(entries) || (entries = this.styles[property] = []); for (var insertionIndex = 0, i = entries.length - 1; i >= 0; i--) if (entries[i].time <= time) { insertionIndex = i + 1; break } entries.splice(insertionIndex, 0, tuple) }, StylesCollection.prototype.getByIndex = function (property, index) { var items = this.styles[property]; return isPresent(items) ? index >= items.length ? null : items[index] : null }, StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) { var entries = this.styles[property]; if (isPresent(entries)) for (var i = entries.length - 1; i >= 0; i--) if (entries[i].time <= time) return i; return null }, StylesCollection }(), __extends$15 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, __decorate$4 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$4 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, _INITIAL_KEYFRAME = 0, _TERMINAL_KEYFRAME = 1, _ONE_SECOND = 1e3, AnimationParseError = function (_super) { function AnimationParseError(message) { _super.call(this, null, message) } return __extends$15(AnimationParseError, _super), AnimationParseError.prototype.toString = function () { return "" + this.msg }, AnimationParseError }(ParseError), AnimationEntryParseResult = function () { function AnimationEntryParseResult(ast, errors) { this.ast = ast, this.errors = errors } return AnimationEntryParseResult }(), AnimationParser = function () { function AnimationParser(_schema) { this._schema = _schema } return AnimationParser.prototype.parseComponent = function (component) { var _this = this, errors = [], componentName = identifierName(component.type), animationTriggerNames = new Set, asts = component.template.animations.map(function (entry) { var result = _this.parseEntry(entry), ast = result.ast, triggerName = ast.name; if (animationTriggerNames.has(triggerName) ? result.errors.push(new AnimationParseError('The animation trigger "' + triggerName + '" has already been registered for the ' + componentName + " component")) : animationTriggerNames.add(triggerName), result.errors.length > 0) { var errorMessage_1 = '- Unable to parse the animation sequence for "' + triggerName + '" on the ' + componentName + " component due to the following errors:"; result.errors.forEach(function (error) { errorMessage_1 += "\n-- " + error.msg }), errors.push(errorMessage_1) } return ast }); if (errors.length > 0) { var errorString = errors.join("\n"); throw new Error("Animation parse errors:\n" + errorString) } return asts }, AnimationParser.prototype.parseEntry = function (entry) { var _this = this, errors = [], stateStyles = {}, transitions = [], stateDeclarationAsts = []; entry.definitions.forEach(function (def) { def instanceof CompileAnimationStateDeclarationMetadata ? _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) { stateDeclarationAsts.push(ast), stateStyles[ast.stateName] = ast.styles }) : transitions.push(def) }); var stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors) }), ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts); return new AnimationEntryParseResult(ast, errors) }, AnimationParser = __decorate$4([CompilerInjectable(), __metadata$4("design:paramtypes", [ElementSchemaRegistry])], AnimationParser) }(), _AnimationTimings = function () { function _AnimationTimings(duration, delay, easing) { this.duration = duration, this.delay = delay, this.easing = easing } return _AnimationTimings }(), ResourceLoader = function () { function ResourceLoader() { } return ResourceLoader.prototype.get = function (url) { return null }, ResourceLoader }(), __decorate$6 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$6 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, DEFAULT_PACKAGE_URL_PROVIDER = { provide: _angular_core.PACKAGE_ROOT_URL, useValue: "/" }, UrlResolver = function () { function UrlResolver(_packagePrefix) { void 0 === _packagePrefix && (_packagePrefix = null), this._packagePrefix = _packagePrefix } return UrlResolver.prototype.resolve = function (baseUrl, url) { var resolvedUrl = url; isPresent(baseUrl) && baseUrl.length > 0 && (resolvedUrl = _resolveUrl(baseUrl, resolvedUrl)); var resolvedParts = _split(resolvedUrl), prefix = this._packagePrefix; if (isPresent(prefix) && isPresent(resolvedParts) && "package" == resolvedParts[_ComponentIndex.Scheme]) { var path = resolvedParts[_ComponentIndex.Path]; return prefix = prefix.replace(/\/+$/, ""), path = path.replace(/^\/+/, ""), prefix + "/" + path } return resolvedUrl }, UrlResolver.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL] }] }] }, UrlResolver = __decorate$6([CompilerInjectable(), __metadata$6("design:paramtypes", [String])], UrlResolver) }(), _splitRe = new RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$"), _ComponentIndex = {}; _ComponentIndex.Scheme = 1, _ComponentIndex.UserInfo = 2, _ComponentIndex.Domain = 3, _ComponentIndex.Port = 4, _ComponentIndex.Path = 5, _ComponentIndex.QueryData = 6, _ComponentIndex.Fragment = 7, _ComponentIndex[_ComponentIndex.Scheme] = "Scheme", _ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo", _ComponentIndex[_ComponentIndex.Domain] = "Domain", _ComponentIndex[_ComponentIndex.Port] = "Port", _ComponentIndex[_ComponentIndex.Path] = "Path",
    _ComponentIndex[_ComponentIndex.QueryData] = "QueryData", _ComponentIndex[_ComponentIndex.Fragment] = "Fragment";/**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
    var __decorate$5 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$5 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, DirectiveNormalizer = function () { function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) { this._resourceLoader = _resourceLoader, this._urlResolver = _urlResolver, this._htmlParser = _htmlParser, this._config = _config, this._resourceLoaderCache = new Map } return DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear() }, DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) { var _this = this; normalizedDirective.isComponent && (this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl), normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl) })) }, DirectiveNormalizer.prototype._fetch = function (url) { var result = this._resourceLoaderCache.get(url); return result || (result = this._resourceLoader.get(url), this._resourceLoaderCache.set(url, result)), result }, DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) { var normalizedTemplateAsync, _this = this, normalizedTemplateSync = null; if (isPresent(prenormData.template)) normalizedTemplateSync = this.normalizeTemplateSync(prenormData), normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync); else { if (!prenormData.templateUrl) throw new SyntaxError("No template specified for component " + stringify(prenormData.componentType)); normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData) } return normalizedTemplateSync && 0 === normalizedTemplateSync.styleUrls.length ? new SyncAsyncResult(normalizedTemplateSync) : new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate) })) }, DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) { return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl) }, DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) { var _this = this, templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl); return this._fetch(templateUrl).then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl) }) }, DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) { var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation), rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), !1, interpolationConfig); if (rootNodesAndErrors.errors.length > 0) { var errorString = rootNodesAndErrors.errors.join("\n"); throw new SyntaxError("Template parse errors:\n" + errorString) } var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenomData.styles, styleUrls: prenomData.styleUrls, moduleUrl: prenomData.moduleUrl })), visitor = new TemplatePreparseVisitor; visitAll(visitor, rootNodesAndErrors.rootNodes); var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl })), encapsulation = prenomData.encapsulation; isBlank(encapsulation) && (encapsulation = this._config.defaultEncapsulation); var styles = templateMetadataStyles.styles.concat(templateStyles.styles), styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls); return encapsulation === _angular_core.ViewEncapsulation.Emulated && 0 === styles.length && 0 === styleUrls.length && (encapsulation = _angular_core.ViewEncapsulation.None), new CompileTemplateMetadata({ encapsulation: encapsulation, template: template, templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls, ngContentSelectors: visitor.ngContentSelectors, animations: prenomData.animations, interpolation: prenomData.interpolation }) }, DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) { return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function (externalStylesheets) { return new CompileTemplateMetadata({ encapsulation: templateMeta.encapsulation, template: templateMeta.template, templateUrl: templateMeta.templateUrl, styles: templateMeta.styles, styleUrls: templateMeta.styleUrls, externalStylesheets: externalStylesheets, ngContentSelectors: templateMeta.ngContentSelectors, animations: templateMeta.animations, interpolation: templateMeta.interpolation }) }) }, DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) { var _this = this; return void 0 === loadedStylesheets && (loadedStylesheets = new Map), Promise.all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl) }).map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) { var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl })); return loadedStylesheets.set(styleUrl, stylesheet), _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets) }) })).then(function (_) { return Array.from(loadedStylesheets.values()) }) }, DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) { var _this = this, allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url) }), allStyles = stylesheet.styles.map(function (style) { var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style); return allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls), styleWithImports.style }); return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl }) }, DirectiveNormalizer = __decorate$5([CompilerInjectable(), __metadata$5("design:paramtypes", [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig])], DirectiveNormalizer) }(), TemplatePreparseVisitor = function () { function TemplatePreparseVisitor() { this.ngContentSelectors = [], this.styles = [], this.styleUrls = [], this.ngNonBindableStackCount = 0 } return TemplatePreparseVisitor.prototype.visitElement = function (ast, context) { var preparsedElement = preparseElement(ast); switch (preparsedElement.type) { case PreparsedElementType.NG_CONTENT: 0 === this.ngNonBindableStackCount && this.ngContentSelectors.push(preparsedElement.selectAttr); break; case PreparsedElementType.STYLE: var textContent_1 = ""; ast.children.forEach(function (child) { child instanceof Text && (textContent_1 += child.value) }), this.styles.push(textContent_1); break; case PreparsedElementType.STYLESHEET: this.styleUrls.push(preparsedElement.hrefAttr) } return preparsedElement.nonBindable && this.ngNonBindableStackCount++, visitAll(this, ast.children), preparsedElement.nonBindable && this.ngNonBindableStackCount--, null }, TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null }, TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null }, TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null }, TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null }, TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null }, TemplatePreparseVisitor }(), __decorate$7 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$7 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, DirectiveResolver = function () { function DirectiveResolver(_reflector) { void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector } return DirectiveResolver.prototype.isDirective = function (type) { var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type)); return typeMetadata && typeMetadata.some(isDirectiveMetadata) }, DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) { void 0 === throwIfNotFound && (throwIfNotFound = !0); var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type)); if (typeMetadata) { var metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata); if (metadata) { var propertyMetadata = this._reflector.propMetadata(type); return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type) } } if (throwIfNotFound) throw new Error("No Directive annotation found on " + stringify(type)); return null }, DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) { var inputs = [], outputs = [], host = {}, queries = {}; return Object.keys(propertyMetadata).forEach(function (propName) { var input = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input }); input && (input.bindingPropertyName ? inputs.push(propName + ": " + input.bindingPropertyName) : inputs.push(propName)); var output = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output }); output && (output.bindingPropertyName ? outputs.push(propName + ": " + output.bindingPropertyName) : outputs.push(propName)); var hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding }); hostBindings.forEach(function (hostBinding) { if (hostBinding.hostPropertyName) { var startWith = hostBinding.hostPropertyName[0]; if ("(" === startWith) throw new Error("@HostBinding can not bind to events. Use @HostListener instead."); if ("[" === startWith) throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'."); host["[" + hostBinding.hostPropertyName + "]"] = propName } else host["[" + propName + "]"] = propName }); var hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener }); hostListeners.forEach(function (hostListener) { var args = hostListener.args || []; host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(",") + ")" }); var query = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query }); query && (queries[propName] = query) }), this._merge(dm, inputs, outputs, host, queries, directiveType) }, DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim() }, DirectiveResolver.prototype._dedupeBindings = function (bindings) { for (var names = new Set, reversedResult = [], i = bindings.length - 1; i >= 0; i--) { var binding = bindings[i], name_1 = this._extractPublicName(binding); names.has(name_1) || (names.add(name_1), reversedResult.push(binding)) } return reversedResult.reverse() }, DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) { var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs), mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs), mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host, mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries; return directive instanceof _angular_core.Component ? new _angular_core.Component({ selector: directive.selector, inputs: mergedInputs, outputs: mergedOutputs, host: mergedHost, exportAs: directive.exportAs, moduleId: directive.moduleId, queries: mergedQueries, changeDetection: directive.changeDetection, providers: directive.providers, viewProviders: directive.viewProviders, entryComponents: directive.entryComponents, template: directive.template, templateUrl: directive.templateUrl, styles: directive.styles, styleUrls: directive.styleUrls, encapsulation: directive.encapsulation, animations: directive.animations, interpolation: directive.interpolation }) : new _angular_core.Directive({ selector: directive.selector, inputs: mergedInputs, outputs: mergedOutputs, host: mergedHost, exportAs: directive.exportAs, queries: mergedQueries, providers: directive.providers }) }, DirectiveResolver = __decorate$7([CompilerInjectable(), __metadata$7("design:paramtypes", [ReflectorReader])], DirectiveResolver) }(), __extends$17 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, TypeModifier = {}; TypeModifier.Const = 0, TypeModifier[TypeModifier.Const] = "Const"; var Type$1 = function () { function Type(modifiers) { void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, modifiers || (this.modifiers = []) } return Type.prototype.visitType = function (visitor, context) { }, Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1 }, Type }(), BuiltinTypeName = {}; BuiltinTypeName.Dynamic = 0, BuiltinTypeName.Bool = 1, BuiltinTypeName.String = 2, BuiltinTypeName.Int = 3, BuiltinTypeName.Number = 4, BuiltinTypeName.Function = 5, BuiltinTypeName.Null = 6, BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic", BuiltinTypeName[BuiltinTypeName.Bool] = "Bool", BuiltinTypeName[BuiltinTypeName.String] = "String", BuiltinTypeName[BuiltinTypeName.Int] = "Int", BuiltinTypeName[BuiltinTypeName.Number] = "Number", BuiltinTypeName[BuiltinTypeName.Function] = "Function", BuiltinTypeName[BuiltinTypeName.Null] = "Null"; var BuiltinType = function (_super) { function BuiltinType(name, modifiers) { void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name } return __extends$17(BuiltinType, _super), BuiltinType.prototype.visitType = function (visitor, context) { return visitor.visitBuiltintType(this, context) }, BuiltinType }(Type$1), ExpressionType = function (_super) { function ExpressionType(value, typeParams, modifiers) { void 0 === typeParams && (typeParams = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.value = value, this.typeParams = typeParams } return __extends$17(ExpressionType, _super), ExpressionType.prototype.visitType = function (visitor, context) { return visitor.visitExpressionType(this, context) }, ExpressionType }(Type$1), ArrayType = function (_super) { function ArrayType(of, modifiers) { void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.of = of } return __extends$17(ArrayType, _super), ArrayType.prototype.visitType = function (visitor, context) { return visitor.visitArrayType(this, context) }, ArrayType }(Type$1), MapType = function (_super) { function MapType(valueType, modifiers) { void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.valueType = valueType } return __extends$17(MapType, _super), MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context) }, MapType }(Type$1), DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic), BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool), NUMBER_TYPE = (new BuiltinType(BuiltinTypeName.Int), new BuiltinType(BuiltinTypeName.Number)), STRING_TYPE = new BuiltinType(BuiltinTypeName.String), FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function), NULL_TYPE = new BuiltinType(BuiltinTypeName.Null), BinaryOperator = {}; BinaryOperator.Equals = 0, BinaryOperator.NotEquals = 1, BinaryOperator.Identical = 2, BinaryOperator.NotIdentical = 3, BinaryOperator.Minus = 4, BinaryOperator.Plus = 5, BinaryOperator.Divide = 6, BinaryOperator.Multiply = 7, BinaryOperator.Modulo = 8, BinaryOperator.And = 9, BinaryOperator.Or = 10, BinaryOperator.Lower = 11, BinaryOperator.LowerEquals = 12, BinaryOperator.Bigger = 13, BinaryOperator.BiggerEquals = 14, BinaryOperator[BinaryOperator.Equals] = "Equals", BinaryOperator[BinaryOperator.NotEquals] = "NotEquals", BinaryOperator[BinaryOperator.Identical] = "Identical", BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical", BinaryOperator[BinaryOperator.Minus] = "Minus", BinaryOperator[BinaryOperator.Plus] = "Plus", BinaryOperator[BinaryOperator.Divide] = "Divide", BinaryOperator[BinaryOperator.Multiply] = "Multiply", BinaryOperator[BinaryOperator.Modulo] = "Modulo", BinaryOperator[BinaryOperator.And] = "And", BinaryOperator[BinaryOperator.Or] = "Or", BinaryOperator[BinaryOperator.Lower] = "Lower", BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals", BinaryOperator[BinaryOperator.Bigger] = "Bigger", BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals"; var Expression = function () { function Expression(type) { this.type = type } return Expression.prototype.visitExpression = function (visitor, context) { }, Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name) }, Expression.prototype.key = function (index, type) { return void 0 === type && (type = null), new ReadKeyExpr(this, index, type) }, Expression.prototype.callMethod = function (name, params) { return new InvokeMethodExpr(this, name, params) }, Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params) }, Expression.prototype.instantiate = function (params, type) { return void 0 === type && (type = null), new InstantiateExpr(this, params, type) }, Expression.prototype.conditional = function (trueCase, falseCase) { return void 0 === falseCase && (falseCase = null), new ConditionalExpr(this, trueCase, falseCase) }, Expression.prototype.equals = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs) }, Expression.prototype.notEquals = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs) }, Expression.prototype.identical = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs) }, Expression.prototype.notIdentical = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs) }, Expression.prototype.minus = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs) }, Expression.prototype.plus = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs) }, Expression.prototype.divide = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs) }, Expression.prototype.multiply = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs) }, Expression.prototype.modulo = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs) }, Expression.prototype.and = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.And, this, rhs) }, Expression.prototype.or = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs) }, Expression.prototype.lower = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs) }, Expression.prototype.lowerEquals = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs) }, Expression.prototype.bigger = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs) }, Expression.prototype.biggerEquals = function (rhs) { return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs) }, Expression.prototype.isBlank = function () { return this.equals(TYPED_NULL_EXPR) }, Expression.prototype.cast = function (type) { return new CastExpr(this, type) }, Expression.prototype.toStmt = function () { return new ExpressionStatement(this) }, Expression }(), BuiltinVar = {}; BuiltinVar.This = 0, BuiltinVar.Super = 1, BuiltinVar.CatchError = 2, BuiltinVar.CatchStack = 3, BuiltinVar[BuiltinVar.This] = "This", BuiltinVar[BuiltinVar.Super] = "Super", BuiltinVar[BuiltinVar.CatchError] = "CatchError", BuiltinVar[BuiltinVar.CatchStack] = "CatchStack"; var ReadVarExpr = function (_super) { function ReadVarExpr(name, type) { void 0 === type && (type = null), _super.call(this, type), "string" == typeof name ? (this.name = name, this.builtin = null) : (this.name = null, this.builtin = name) } return __extends$17(ReadVarExpr, _super), ReadVarExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitReadVarExpr(this, context) }, ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value) }, ReadVarExpr }(Expression), WriteVarExpr = function (_super) { function WriteVarExpr(name, value, type) { void 0 === type && (type = null), _super.call(this, type || value.type), this.name = name, this.value = value } return __extends$17(WriteVarExpr, _super), WriteVarExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitWriteVarExpr(this, context) }, WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) { return void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), new DeclareVarStmt(this.name, this.value, type, modifiers) }, WriteVarExpr }(Expression), WriteKeyExpr = function (_super) { function WriteKeyExpr(receiver, index, value, type) { void 0 === type && (type = null), _super.call(this, type || value.type), this.receiver = receiver, this.index = index, this.value = value } return __extends$17(WriteKeyExpr, _super), WriteKeyExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitWriteKeyExpr(this, context) }, WriteKeyExpr }(Expression), WritePropExpr = function (_super) { function WritePropExpr(receiver, name, value, type) { void 0 === type && (type = null), _super.call(this, type || value.type), this.receiver = receiver, this.name = name, this.value = value } return __extends$17(WritePropExpr, _super), WritePropExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitWritePropExpr(this, context) }, WritePropExpr }(Expression), BuiltinMethod = {}; BuiltinMethod.ConcatArray = 0, BuiltinMethod.SubscribeObservable = 1, BuiltinMethod.Bind = 2, BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray", BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable", BuiltinMethod[BuiltinMethod.Bind] = "Bind"; var InvokeMethodExpr = function (_super) { function InvokeMethodExpr(receiver, method, args, type) { void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.args = args, "string" == typeof method ? (this.name = method, this.builtin = null) : (this.name = null, this.builtin = method) } return __extends$17(InvokeMethodExpr, _super), InvokeMethodExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitInvokeMethodExpr(this, context) }, InvokeMethodExpr }(Expression), InvokeFunctionExpr = function (_super) { function InvokeFunctionExpr(fn, args, type) { void 0 === type && (type = null), _super.call(this, type), this.fn = fn, this.args = args } return __extends$17(InvokeFunctionExpr, _super), InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitInvokeFunctionExpr(this, context) }, InvokeFunctionExpr }(Expression), InstantiateExpr = function (_super) { function InstantiateExpr(classExpr, args, type) { _super.call(this, type), this.classExpr = classExpr, this.args = args } return __extends$17(InstantiateExpr, _super), InstantiateExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitInstantiateExpr(this, context) }, InstantiateExpr }(Expression), LiteralExpr = function (_super) { function LiteralExpr(value, type) { void 0 === type && (type = null), _super.call(this, type), this.value = value } return __extends$17(LiteralExpr, _super), LiteralExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitLiteralExpr(this, context) }, LiteralExpr }(Expression), ExternalExpr = function (_super) { function ExternalExpr(value, type, typeParams) { void 0 === type && (type = null), void 0 === typeParams && (typeParams = null), _super.call(this, type), this.value = value, this.typeParams = typeParams } return __extends$17(ExternalExpr, _super), ExternalExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitExternalExpr(this, context) }, ExternalExpr }(Expression), ConditionalExpr = function (_super) { function ConditionalExpr(condition, trueCase, falseCase, type) { void 0 === falseCase && (falseCase = null), void 0 === type && (type = null), _super.call(this, type || trueCase.type), this.condition = condition, this.falseCase = falseCase, this.trueCase = trueCase } return __extends$17(ConditionalExpr, _super), ConditionalExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitConditionalExpr(this, context) }, ConditionalExpr }(Expression), NotExpr = function (_super) { function NotExpr(condition) { _super.call(this, BOOL_TYPE), this.condition = condition } return __extends$17(NotExpr, _super), NotExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitNotExpr(this, context) }, NotExpr }(Expression), CastExpr = function (_super) { function CastExpr(value, type) { _super.call(this, type), this.value = value } return __extends$17(CastExpr, _super), CastExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitCastExpr(this, context) }, CastExpr }(Expression), FnParam = function () { function FnParam(name, type) { void 0 === type && (type = null), this.name = name, this.type = type } return FnParam }(), FunctionExpr = function (_super) { function FunctionExpr(params, statements, type) { void 0 === type && (type = null), _super.call(this, type), this.params = params, this.statements = statements } return __extends$17(FunctionExpr, _super), FunctionExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitFunctionExpr(this, context) }, FunctionExpr.prototype.toDeclStmt = function (name, modifiers) { return void 0 === modifiers && (modifiers = null), new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers) }, FunctionExpr }(Expression), BinaryOperatorExpr = function (_super) { function BinaryOperatorExpr(operator, lhs, rhs, type) { void 0 === type && (type = null), _super.call(this, type || lhs.type), this.operator = operator, this.rhs = rhs, this.lhs = lhs } return __extends$17(BinaryOperatorExpr, _super), BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitBinaryOperatorExpr(this, context) }, BinaryOperatorExpr }(Expression), ReadPropExpr = function (_super) { function ReadPropExpr(receiver, name, type) { void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.name = name } return __extends$17(ReadPropExpr, _super), ReadPropExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitReadPropExpr(this, context) }, ReadPropExpr.prototype.set = function (value) { return new WritePropExpr(this.receiver, this.name, value) }, ReadPropExpr }(Expression), ReadKeyExpr = function (_super) { function ReadKeyExpr(receiver, index, type) { void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.index = index } return __extends$17(ReadKeyExpr, _super), ReadKeyExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitReadKeyExpr(this, context) }, ReadKeyExpr.prototype.set = function (value) { return new WriteKeyExpr(this.receiver, this.index, value) }, ReadKeyExpr }(Expression), LiteralArrayExpr = function (_super) { function LiteralArrayExpr(entries, type) { void 0 === type && (type = null), _super.call(this, type), this.entries = entries } return __extends$17(LiteralArrayExpr, _super), LiteralArrayExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitLiteralArrayExpr(this, context) }, LiteralArrayExpr }(Expression), LiteralMapEntry = function () { function LiteralMapEntry(key, value, quoted) { void 0 === quoted && (quoted = !1), this.key = key, this.value = value, this.quoted = quoted } return LiteralMapEntry }(), LiteralMapExpr = function (_super) { function LiteralMapExpr(entries, type) { void 0 === type && (type = null), _super.call(this, type), this.entries = entries, this.valueType = null, isPresent(type) && (this.valueType = type.valueType) } return __extends$17(LiteralMapExpr, _super), LiteralMapExpr.prototype.visitExpression = function (visitor, context) { return visitor.visitLiteralMapExpr(this, context) }, LiteralMapExpr }(Expression), THIS_EXPR = new ReadVarExpr(BuiltinVar.This), SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super), NULL_EXPR = (new ReadVarExpr(BuiltinVar.CatchError), new ReadVarExpr(BuiltinVar.CatchStack), new LiteralExpr(null, null)), TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE), StmtModifier = {}; StmtModifier.Final = 0, StmtModifier.Private = 1, StmtModifier[StmtModifier.Final] = "Final", StmtModifier[StmtModifier.Private] = "Private"; var Statement = function () { function Statement(modifiers) { void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, modifiers || (this.modifiers = []) } return Statement.prototype.visitStatement = function (visitor, context) { }, Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1 }, Statement }(), DeclareVarStmt = function (_super) { function DeclareVarStmt(name, value, type, modifiers) { void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.value = value, this.type = type || value.type } return __extends$17(DeclareVarStmt, _super), DeclareVarStmt.prototype.visitStatement = function (visitor, context) { return visitor.visitDeclareVarStmt(this, context) }, DeclareVarStmt }(Statement), DeclareFunctionStmt = function (_super) { function DeclareFunctionStmt(name, params, statements, type, modifiers) { void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.params = params, this.statements = statements, this.type = type } return __extends$17(DeclareFunctionStmt, _super), DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) { return visitor.visitDeclareFunctionStmt(this, context) }, DeclareFunctionStmt }(Statement), ExpressionStatement = function (_super) { function ExpressionStatement(expr) { _super.call(this), this.expr = expr } return __extends$17(ExpressionStatement, _super), ExpressionStatement.prototype.visitStatement = function (visitor, context) { return visitor.visitExpressionStmt(this, context) }, ExpressionStatement }(Statement), ReturnStatement = function (_super) { function ReturnStatement(value) { _super.call(this), this.value = value } return __extends$17(ReturnStatement, _super), ReturnStatement.prototype.visitStatement = function (visitor, context) { return visitor.visitReturnStmt(this, context) }, ReturnStatement }(Statement), AbstractClassPart = function () { function AbstractClassPart(type, modifiers) { void 0 === type && (type = null), this.type = type, this.modifiers = modifiers, modifiers || (this.modifiers = []) } return AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1 }, AbstractClassPart }(), ClassField = function (_super) { function ClassField(name, type, modifiers) { void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name } return __extends$17(ClassField, _super), ClassField }(AbstractClassPart), ClassMethod = function (_super) { function ClassMethod(name, params, body, type, modifiers) { void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name, this.params = params, this.body = body } return __extends$17(ClassMethod, _super), ClassMethod }(AbstractClassPart), ClassGetter = function (_super) { function ClassGetter(name, body, type, modifiers) { void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name, this.body = body } return __extends$17(ClassGetter, _super), ClassGetter }(AbstractClassPart), ClassStmt = function (_super) { function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) { void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.parent = parent, this.fields = fields, this.getters = getters, this.constructorMethod = constructorMethod, this.methods = methods } return __extends$17(ClassStmt, _super), ClassStmt.prototype.visitStatement = function (visitor, context) { return visitor.visitDeclareClassStmt(this, context) }, ClassStmt }(Statement), IfStmt = function (_super) { function IfStmt(condition, trueCase, falseCase) { void 0 === falseCase && (falseCase = []), _super.call(this), this.condition = condition, this.trueCase = trueCase, this.falseCase = falseCase } return __extends$17(IfStmt, _super), IfStmt.prototype.visitStatement = function (visitor, context) { return visitor.visitIfStmt(this, context) }, IfStmt }(Statement), TryCatchStmt = (function (_super) { function CommentStmt(comment) { _super.call(this), this.comment = comment } return __extends$17(CommentStmt, _super), CommentStmt.prototype.visitStatement = function (visitor, context) { return visitor.visitCommentStmt(this, context) }, CommentStmt }(Statement), function (_super) { function TryCatchStmt(bodyStmts, catchStmts) { _super.call(this), this.bodyStmts = bodyStmts, this.catchStmts = catchStmts } return __extends$17(TryCatchStmt, _super), TryCatchStmt.prototype.visitStatement = function (visitor, context) { return visitor.visitTryCatchStmt(this, context) }, TryCatchStmt }(Statement)), ThrowStmt = function (_super) {
        function ThrowStmt(error) { _super.call(this), this.error = error } return __extends$17(ThrowStmt, _super), ThrowStmt.prototype.visitStatement = function (visitor, context) {
            return visitor.visitThrowStmt(this, context);
        }, ThrowStmt
    }(Statement), ExpressionTransformer = function () { function ExpressionTransformer() { } return ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast }, ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) { return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) { return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) { return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) { var method = ast.builtin || ast.name; return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type) }, ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) { return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type) }, ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) { return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type) }, ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast }, ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast }, ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) { return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitNotExpr = function (ast, context) { return new NotExpr(ast.condition.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitCastExpr = function (ast, context) { return new CastExpr(ast.value.visitExpression(this, context), context) }, ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) { return ast }, ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) { return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type) }, ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) { return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type) }, ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) { return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type) }, ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) { return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context)) }, ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) { var _this = this, entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted) }); return new LiteralMapExpr(entries) }, ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) { var _this = this; return exprs.map(function (expr) { return expr.visitExpression(_this, context) }) }, ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) { return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers) }, ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) { return stmt }, ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) { return new ExpressionStatement(stmt.expr.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) { return new ReturnStatement(stmt.value.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) { return stmt }, ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) { return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context)) }, ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) { return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context)) }, ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) { return new ThrowStmt(stmt.error.visitExpression(this, context)) }, ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt }, ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) { var _this = this; return stmts.map(function (stmt) { return stmt.visitStatement(_this, context) }) }, ExpressionTransformer }(), RecursiveExpressionVisitor = function () { function RecursiveExpressionVisitor() { } return RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast }, RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) { return expr.value.visitExpression(this, context), expr }, RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) { return expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr }, RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) { return expr.receiver.visitExpression(this, context), expr.value.visitExpression(this, context), expr }, RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) { return ast.receiver.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast }, RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) { return ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast }, RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) { return ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast }, RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast }, RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast }, RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) { return ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast }, RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) { return ast.condition.visitExpression(this, context), ast }, RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) { return ast.value.visitExpression(this, context), ast }, RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast }, RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) { return ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast }, RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) { return ast.receiver.visitExpression(this, context), ast }, RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) { return ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast }, RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) { return this.visitAllExpressions(ast.entries, context), ast }, RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) { var _this = this; return ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context) }), ast }, RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) { var _this = this; exprs.forEach(function (expr) { return expr.visitExpression(_this, context) }) }, RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) { return stmt.value.visitExpression(this, context), stmt }, RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { return stmt }, RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) { return stmt.expr.visitExpression(this, context), stmt }, RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) { return stmt.value.visitExpression(this, context), stmt }, RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) { return stmt }, RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) { return stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt }, RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) { return this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt }, RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) { return stmt.error.visitExpression(this, context), stmt }, RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt }, RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) { var _this = this; stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context) }) }, RecursiveExpressionVisitor }(), _ReplaceVariableTransformer = function (_super) { function _ReplaceVariableTransformer(_varName, _newValue) { _super.call(this), this._varName = _varName, this._newValue = _newValue } return __extends$17(_ReplaceVariableTransformer, _super), _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast.name == this._varName ? this._newValue : ast }, _ReplaceVariableTransformer }(ExpressionTransformer), _VariableFinder = function (_super) { function _VariableFinder() { _super.apply(this, arguments), this.varNames = new Set } return __extends$17(_VariableFinder, _super), _VariableFinder.prototype.visitReadVarExpr = function (ast, context) { return this.varNames.add(ast.name), null }, _VariableFinder }(RecursiveExpressionVisitor), CheckBindingField = function () { function CheckBindingField(expression, bindingId) { this.expression = expression, this.bindingId = bindingId } return CheckBindingField }(), VAL_UNWRAPPER_VAR = variable("valUnwrapper"), EventHandlerVars = function () { function EventHandlerVars() { } return EventHandlerVars.event = variable("$event"), EventHandlerVars }(), ConvertPropertyBindingResult = function () { function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) { this.stmts = stmts, this.currValExpr = currValExpr, this.forceUpdate = forceUpdate } return ConvertPropertyBindingResult }(), ConvertActionBindingResult = function () { function ConvertActionBindingResult(stmts, preventDefault) { this.stmts = stmts, this.preventDefault = preventDefault } return ConvertActionBindingResult }(), _Mode = {}; _Mode.Statement = 0, _Mode.Expression = 1, _Mode[_Mode.Statement] = "Statement", _Mode[_Mode.Expression] = "Expression"; var _AstToIrVisitor = function () { function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) { this._builder = _builder, this._nameResolver = _nameResolver, this._implicitReceiver = _implicitReceiver, this._valueUnwrapper = _valueUnwrapper, this.bindingId = bindingId, this.isAction = isAction, this._nodeMap = new Map, this._resultMap = new Map, this._currentTemporary = 0, this.needsValueUnwrapper = !1, this.temporaryCount = 0 } return _AstToIrVisitor.prototype.visitBinary = function (ast, mode) { var op; switch (ast.operation) { case "+": op = BinaryOperator.Plus; break; case "-": op = BinaryOperator.Minus; break; case "*": op = BinaryOperator.Multiply; break; case "/": op = BinaryOperator.Divide; break; case "%": op = BinaryOperator.Modulo; break; case "&&": op = BinaryOperator.And; break; case "||": op = BinaryOperator.Or; break; case "==": op = BinaryOperator.Equals; break; case "!=": op = BinaryOperator.NotEquals; break; case "===": op = BinaryOperator.Identical; break; case "!==": op = BinaryOperator.NotIdentical; break; case "<": op = BinaryOperator.Lower; break; case ">": op = BinaryOperator.Bigger; break; case "<=": op = BinaryOperator.LowerEquals; break; case ">=": op = BinaryOperator.BiggerEquals; break; default: throw new Error("Unsupported operation " + ast.operation) } return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression))) }, _AstToIrVisitor.prototype.visitChain = function (ast, mode) { return ensureStatementMode(mode, ast), this.visitAll(ast.expressions, mode) }, _AstToIrVisitor.prototype.visitConditional = function (ast, mode) { var value = this.visit(ast.condition, _Mode.Expression); return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression))) }, _AstToIrVisitor.prototype.visitPipe = function (ast, mode) { var input = this.visit(ast.exp, _Mode.Expression), args = this.visitAll(ast.args, _Mode.Expression), value = this._nameResolver.callPipe(ast.name, input, args); if (!value) throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!"); return this.needsValueUnwrapper = !0, convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod("unwrap", [value])) }, _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) { return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression))) }, _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) { return ensureExpressionMode(mode, ast), this._implicitReceiver }, _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) { ensureExpressionMode(mode, ast); for (var args = [literal(ast.expressions.length)], i = 0; i < ast.strings.length - 1; i++) args.push(literal(ast.strings[i])), args.push(this.visit(ast.expressions[i], _Mode.Expression)); return args.push(literal(ast.strings[ast.strings.length - 1])), ast.expressions.length <= 9 ? importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(createIdentifier(Identifiers.interpolate)).callFn([args[0], literalArr(args.slice(1))]) }, _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) { var leftMostSafe = this.leftMostSafeNode(ast); return leftMostSafe ? this.convertSafeAccess(ast, leftMostSafe, mode) : convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression))) }, _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) { var obj = this.visit(ast.obj, _Mode.Expression), key = this.visit(ast.key, _Mode.Expression), value = this.visit(ast.value, _Mode.Expression); return convertToStatementIfNeeded(mode, obj.key(key).set(value)) }, _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) { var parts = this.visitAll(ast.expressions, mode), literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts); return convertToStatementIfNeeded(mode, literalArr$$) }, _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) { for (var parts = [], i = 0; i < ast.keys.length; i++) parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]); var literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts); return convertToStatementIfNeeded(mode, literalMap$$) }, _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) { return convertToStatementIfNeeded(mode, literal(ast.value)) }, _AstToIrVisitor.prototype._getLocal = function (name) { return this.isAction && name == EventHandlerVars.event.name ? EventHandlerVars.event : this._nameResolver.getLocal(name) }, _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) { var leftMostSafe = this.leftMostSafeNode(ast); if (leftMostSafe) return this.convertSafeAccess(ast, leftMostSafe, mode); var args = this.visitAll(ast.args, _Mode.Expression), result = null, receiver = this.visit(ast.receiver, _Mode.Expression); if (receiver === this._implicitReceiver) { var varExpr = this._getLocal(ast.name); isPresent(varExpr) && (result = varExpr.callFn(args)) } return isBlank(result) && (result = receiver.callMethod(ast.name, args)), convertToStatementIfNeeded(mode, result) }, _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) { return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression))) }, _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) { var leftMostSafe = this.leftMostSafeNode(ast); if (leftMostSafe) return this.convertSafeAccess(ast, leftMostSafe, mode); var result = null, receiver = this.visit(ast.receiver, _Mode.Expression); return receiver === this._implicitReceiver && (result = this._getLocal(ast.name)), isBlank(result) && (result = receiver.prop(ast.name)), convertToStatementIfNeeded(mode, result) }, _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) { var receiver = this.visit(ast.receiver, _Mode.Expression); if (receiver === this._implicitReceiver) { var varExpr = this._getLocal(ast.name); if (isPresent(varExpr)) throw new Error("Cannot assign to a reference or variable!") } return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression))) }, _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) { return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode) }, _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) { return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode) }, _AstToIrVisitor.prototype.visitAll = function (asts, mode) { var _this = this; return asts.map(function (ast) { return _this.visit(ast, mode) }) }, _AstToIrVisitor.prototype.visitQuote = function (ast, mode) { throw new Error("Quotes are not supported for evaluation!") }, _AstToIrVisitor.prototype.visit = function (ast, mode) { var result = this._resultMap.get(ast); return result ? result : (this._nodeMap.get(ast) || ast).visit(this, mode) }, _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) { var temporary, guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression); this.needsTemporary(leftMostSafe.receiver) && (temporary = this.allocateTemporary(), guardedExpression = temporary.set(guardedExpression), this._resultMap.set(leftMostSafe.receiver, temporary)); var condition = guardedExpression.isBlank(); leftMostSafe instanceof SafeMethodCall ? this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args)) : this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name)); var access = this.visit(ast, _Mode.Expression); return this._nodeMap.delete(leftMostSafe), temporary && this.releaseTemporary(temporary), convertToStatementIfNeeded(mode, condition.conditional(literal(null), access)) }, _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) { var _this = this, visit = function (visitor, ast) { return (_this._nodeMap.get(ast) || ast).visit(visitor) }; return ast.visit({ visitBinary: function (ast) { return null }, visitChain: function (ast) { return null }, visitConditional: function (ast) { return null }, visitFunctionCall: function (ast) { return null }, visitImplicitReceiver: function (ast) { return null }, visitInterpolation: function (ast) { return null }, visitKeyedRead: function (ast) { return visit(this, ast.obj) }, visitKeyedWrite: function (ast) { return null }, visitLiteralArray: function (ast) { return null }, visitLiteralMap: function (ast) { return null }, visitLiteralPrimitive: function (ast) { return null }, visitMethodCall: function (ast) { return visit(this, ast.receiver) }, visitPipe: function (ast) { return null }, visitPrefixNot: function (ast) { return null }, visitPropertyRead: function (ast) { return visit(this, ast.receiver) }, visitPropertyWrite: function (ast) { return null }, visitQuote: function (ast) { return null }, visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast }, visitSafePropertyRead: function (ast) { return visit(this, ast.receiver) || ast } }) }, _AstToIrVisitor.prototype.needsTemporary = function (ast) { var _this = this, visit = function (visitor, ast) { return ast && (_this._nodeMap.get(ast) || ast).visit(visitor) }, visitSome = function (visitor, ast) { return ast.some(function (ast) { return visit(visitor, ast) }) }; return ast.visit({ visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right) }, visitChain: function (ast) { return !1 }, visitConditional: function (ast) { return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp) }, visitFunctionCall: function (ast) { return !0 }, visitImplicitReceiver: function (ast) { return !1 }, visitInterpolation: function (ast) { return visitSome(this, ast.expressions) }, visitKeyedRead: function (ast) { return !1 }, visitKeyedWrite: function (ast) { return !1 }, visitLiteralArray: function (ast) { return !0 }, visitLiteralMap: function (ast) { return !0 }, visitLiteralPrimitive: function (ast) { return !1 }, visitMethodCall: function (ast) { return !0 }, visitPipe: function (ast) { return !0 }, visitPrefixNot: function (ast) { return visit(this, ast.expression) }, visitPropertyRead: function (ast) { return !1 }, visitPropertyWrite: function (ast) { return !1 }, visitQuote: function (ast) { return !1 }, visitSafeMethodCall: function (ast) { return !0 }, visitSafePropertyRead: function (ast) { return !1 } }) }, _AstToIrVisitor.prototype.allocateTemporary = function () { var tempNumber = this._currentTemporary++; return this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount), new ReadVarExpr(temporaryName(this.bindingId, tempNumber)) }, _AstToIrVisitor.prototype.releaseTemporary = function (temporary) { if (this._currentTemporary--, temporary.name != temporaryName(this.bindingId, this._currentTemporary)) throw new Error("Temporary " + temporary.name + " released out of order") }, _AstToIrVisitor }(), DefaultNameResolver = function () { function DefaultNameResolver() { } return DefaultNameResolver.prototype.callPipe = function (name, input, args) { return null }, DefaultNameResolver.prototype.getLocal = function (name) { return null }, DefaultNameResolver }(), __decorate$8 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$8 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, DirectiveWrapperCompileResult = function () { function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) { this.statements = statements, this.dirWrapperClassVar = dirWrapperClassVar } return DirectiveWrapperCompileResult }(), CONTEXT_FIELD_NAME = "context", CHANGES_FIELD_NAME = "_changes", CHANGED_FIELD_NAME = "_changed", EVENT_HANDLER_FIELD_NAME = "_eventHandler", CURR_VALUE_VAR = variable("currValue"), THROW_ON_CHANGE_VAR = variable("throwOnChange"), FORCE_UPDATE_VAR = variable("forceUpdate"), VIEW_VAR = variable("view"), COMPONENT_VIEW_VAR = variable("componentView"), RENDER_EL_VAR = variable("el"), EVENT_NAME_VAR = variable("eventName"), RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt(), DirectiveWrapperCompiler = function () { function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) { this.compilerConfig = compilerConfig, this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this._console = _console } return DirectiveWrapperCompiler.dirWrapperClassName = function (id) { return "Wrapper_" + identifierName(id) }, DirectiveWrapperCompiler.prototype.compile = function (dirMeta) { var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry); reportParseErrors(hostParseResult.errors, this._console); var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta); Object.keys(dirMeta.inputs).forEach(function (inputFieldName) { addCheckInputMethod(inputFieldName, builder) }), addNgDoCheckMethod(builder), addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder), addHandleEventMethod(hostParseResult.hostListeners, builder), addSubscribeMethod(dirMeta, builder); var classStmt = builder.build(); return new DirectiveWrapperCompileResult([classStmt], classStmt.name) }, DirectiveWrapperCompiler = __decorate$8([CompilerInjectable(), __metadata$8("design:paramtypes", [CompilerConfig, Parser, ElementSchemaRegistry, Console])], DirectiveWrapperCompiler) }(), DirectiveWrapperBuilder = function () { function DirectiveWrapperBuilder(compilerConfig, dirMeta) { this.compilerConfig = compilerConfig, this.dirMeta = dirMeta, this.fields = [], this.getters = [], this.methods = [], this.ctorStmts = [], this.detachStmts = [], this.destroyStmts = []; var dirLifecycleHooks = dirMeta.type.lifecycleHooks; this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 || this.compilerConfig.logBindingUpdate, this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1, this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1, this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1, this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1, this.ngOnDestroy && this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod("ngOnDestroy", []).toStmt()) } return DirectiveWrapperBuilder.prototype.build = function () { for (var dirDepParamNames = [], i = 0; i < this.dirMeta.type.diDeps.length; i++) dirDepParamNames.push("p" + i); var methods = [new ClassMethod("ngOnDetach", [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE)], this.detachStmts), new ClassMethod("ngOnDestroy", [], this.destroyStmts)], fields = [new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]), new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)), new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private])], ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(!1)).toStmt()]; return this.genChanges && (fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private])), ctorStmts.push(RESET_CHANGES_STMT)), ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function (paramName) { return variable(paramName) }))).toStmt()), createClassStmt({ name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type), ctorParams: dirDepParamNames.map(function (paramName) { return new FnParam(paramName, DYNAMIC_TYPE) }), builders: [{ fields: fields, ctorStmts: ctorStmts, methods: methods }, this] }) }, DirectiveWrapperBuilder }(), ParseResult = function () { function ParseResult(hostProps, hostListeners, errors) { this.hostProps = hostProps, this.hostListeners = hostListeners, this.errors = errors } return ParseResult }(), DirectiveWrapperExpressions = function () { function DirectiveWrapperExpressions() { } return DirectiveWrapperExpressions.create = function (dir, depsExpr) { return importExpr(dir).instantiate(depsExpr, importType(dir)) }, DirectiveWrapperExpressions.context = function (dirWrapper) { return dirWrapper.prop(CONTEXT_FIELD_NAME) }, DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement, throwOnChange) { return dirWrapper.callMethod("ngDoCheck", [view, renderElement, throwOnChange]) }, DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) { return hostProps.length ? [dirWrapper.callMethod("checkHost", [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts)).toStmt()] : [] }, DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) { return hostProps.some(function (prop) { return prop.isAnimation }) ? [dirWrapper.callMethod("ngOnDetach", [view, componentView, renderEl]).toStmt()] : [] }, DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) { return dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 || Object.keys(dir.outputs).length > 0 ? [dirWrapper.callMethod("ngOnDestroy", []).toStmt()] : [] }, DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) { var needsSubscribe = !1, eventFlags = []; return Object.keys(dirMeta.outputs).forEach(function (propName) { var eventName = dirMeta.outputs[propName], eventUsed = usedEvents.indexOf(eventName) > -1; needsSubscribe = needsSubscribe || eventUsed, eventFlags.push(literal(eventUsed)) }), hostProps.forEach(function (hostProp) { hostProp.isAnimation && usedEvents.length > 0 && (needsSubscribe = !0) }), needsSubscribe ? [dirWrapper.callMethod("subscribe", [view, eventListener].concat(eventFlags)).toStmt()] : [] }, DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) { return dirWrapper.callMethod("handleEvent", [eventName, event]) }, DirectiveWrapperExpressions }(), __decorate$10 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$10 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, NgModuleResolver = function () { function NgModuleResolver(_reflector) { void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector } return NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata) }, NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) { void 0 === throwIfNotFound && (throwIfNotFound = !0); var ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata); if (isPresent(ngModuleMeta)) return ngModuleMeta; if (throwIfNotFound) throw new Error("No NgModule metadata found for '" + stringify(type) + "'."); return null }, NgModuleResolver = __decorate$10([CompilerInjectable(), __metadata$10("design:paramtypes", [ReflectorReader])], NgModuleResolver) }(), __decorate$11 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$11 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, PipeResolver = function () { function PipeResolver(_reflector) { void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector } return PipeResolver.prototype.isPipe = function (type) { var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type)); return typeMetadata && typeMetadata.some(_isPipeMetadata) }, PipeResolver.prototype.resolve = function (type, throwIfNotFound) { void 0 === throwIfNotFound && (throwIfNotFound = !0); var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type)); if (isPresent(metas)) { var annotation = ListWrapper.findLast(metas, _isPipeMetadata); if (isPresent(annotation)) return annotation } if (throwIfNotFound) throw new Error("No Pipe decorator found on " + stringify(type)); return null }, PipeResolver = __decorate$11([CompilerInjectable(), __metadata$11("design:paramtypes", [ReflectorReader])], PipeResolver) }(), __decorate$12 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$12 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, SummaryResolver = function () { function SummaryResolver() { } return SummaryResolver.prototype.resolveSummary = function (reference) { return null }, SummaryResolver.prototype.getSymbolsOf = function (filePath) { return [] }, SummaryResolver = __decorate$12([CompilerInjectable(), __metadata$12("design:paramtypes", [])], SummaryResolver) }(), __extends$18 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, __decorate$9 = this && this.__decorate || function (decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r
    }, __metadata$9 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, ERROR_COLLECTOR_TOKEN = new _angular_core.OpaqueToken("ErrorCollector"), CompileMetadataResolver = function () { function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _reflector, _errorCollector) { void 0 === _reflector && (_reflector = reflector), this._ngModuleResolver = _ngModuleResolver, this._directiveResolver = _directiveResolver, this._pipeResolver = _pipeResolver, this._summaryResolver = _summaryResolver, this._schemaRegistry = _schemaRegistry, this._directiveNormalizer = _directiveNormalizer, this._reflector = _reflector, this._errorCollector = _errorCollector, this._directiveCache = new Map, this._summaryCache = new Map, this._pipeCache = new Map, this._ngModuleCache = new Map, this._ngModuleOfTypes = new Map } return CompileMetadataResolver.prototype.clearCacheFor = function (type) { var dirMeta = this._directiveCache.get(type); this._directiveCache.delete(type), this._summaryCache.delete(type), this._pipeCache.delete(type), this._ngModuleOfTypes.delete(type), this._ngModuleCache.clear(), dirMeta && this._directiveNormalizer.clearCacheFor(dirMeta) }, CompileMetadataResolver.prototype.clearCache = function () { this._directiveCache.clear(), this._summaryCache.clear(), this._pipeCache.clear(), this._ngModuleCache.clear(), this._ngModuleOfTypes.clear(), this._directiveNormalizer.clearCache() }, CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) { var _this = this, defs = entry.definitions.map(function (def) { return _this._getAnimationStateMetadata(def) }); return new CompileAnimationEntryMetadata(entry.name, defs) }, CompileMetadataResolver.prototype._getAnimationStateMetadata = function (value) { if (value instanceof _angular_core.AnimationStateDeclarationMetadata) { var styles = this._getAnimationStyleMetadata(value.styles); return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles) } return value instanceof _angular_core.AnimationStateTransitionMetadata ? new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps)) : null }, CompileMetadataResolver.prototype._getAnimationStyleMetadata = function (value) { return new CompileAnimationStyleMetadata(value.offset, value.styles) }, CompileMetadataResolver.prototype._getAnimationMetadata = function (value) { var _this = this; if (value instanceof _angular_core.AnimationStyleMetadata) return this._getAnimationStyleMetadata(value); if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this._getAnimationStyleMetadata(entry) })); if (value instanceof _angular_core.AnimationAnimateMetadata) { var animateData = this._getAnimationMetadata(value.styles); return new CompileAnimationAnimateMetadata(value.timings, animateData) } if (value instanceof _angular_core.AnimationWithStepsMetadata) { var steps = value.steps.map(function (step) { return _this._getAnimationMetadata(step) }); return value instanceof _angular_core.AnimationGroupMetadata ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps) } return null }, CompileMetadataResolver.prototype._loadSummary = function (type, kind) { var typeSummary = this._summaryCache.get(type); if (!typeSummary) { var summary = this._summaryResolver.resolveSummary(type); typeSummary = summary ? summary.type : null, this._summaryCache.set(type, typeSummary) } return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null }, CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) { var _this = this; if (!this._directiveCache.has(directiveType)) { directiveType = _angular_core.resolveForwardRef(directiveType); var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata, createDirectiveMetadata = function (templateMetadata) { var normalizedDirMeta = new CompileDirectiveMetadata({ type: metadata.type, isComponent: metadata.isComponent, selector: metadata.selector, exportAs: metadata.exportAs, changeDetection: metadata.changeDetection, inputs: metadata.inputs, outputs: metadata.outputs, hostListeners: metadata.hostListeners, hostProperties: metadata.hostProperties, hostAttributes: metadata.hostAttributes, providers: metadata.providers, viewProviders: metadata.viewProviders, queries: metadata.queries, viewQueries: metadata.viewQueries, entryComponents: metadata.entryComponents, template: templateMetadata }); return _this._directiveCache.set(directiveType, normalizedDirMeta), _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary()), normalizedDirMeta }; if (metadata.isComponent) { var templateMeta = this._directiveNormalizer.normalizeTemplate({ componentType: directiveType, moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation), encapsulation: metadata.template.encapsulation, template: metadata.template.template, templateUrl: metadata.template.templateUrl, styles: metadata.template.styles, styleUrls: metadata.template.styleUrls, animations: metadata.template.animations, interpolation: metadata.template.interpolation }); return templateMeta.syncResult ? (createDirectiveMetadata(templateMeta.syncResult), null) : isSync ? (this._reportError(new ComponentStillLoadingError(directiveType), directiveType), null) : templateMeta.asyncResult.then(createDirectiveMetadata) } return createDirectiveMetadata(null), null } }, CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) { var _this = this; directiveType = _angular_core.resolveForwardRef(directiveType); var dirMeta = this._directiveResolver.resolve(directiveType); if (!dirMeta) return null; var nonNormalizedTemplateMetadata; if (dirMeta instanceof _angular_core.Component) { assertArrayOfStrings("styles", dirMeta.styles), assertArrayOfStrings("styleUrls", dirMeta.styleUrls), assertInterpolationSymbols("interpolation", dirMeta.interpolation); var animations = dirMeta.animations ? dirMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e) }) : null; nonNormalizedTemplateMetadata = new CompileTemplateMetadata({ encapsulation: dirMeta.encapsulation, template: dirMeta.template, templateUrl: dirMeta.templateUrl, styles: dirMeta.styles, styleUrls: dirMeta.styleUrls, animations: animations, interpolation: dirMeta.interpolation }) } var changeDetectionStrategy = null, viewProviders = [], entryComponentMetadata = [], selector = dirMeta.selector; dirMeta instanceof _angular_core.Component ? (changeDetectionStrategy = dirMeta.changeDetection, dirMeta.viewProviders && (viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, 'viewProviders for "' + stringifyType(directiveType) + '"', [], directiveType)), dirMeta.entryComponents && (entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function (type) { return _this._getIdentifierMetadata(type) }).concat(entryComponentMetadata)), selector || (selector = this._schemaRegistry.getDefaultComponentElementName())) : selector || (this._reportError(new SyntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType), selector = "error"); var providers = []; isPresent(dirMeta.providers) && (providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, 'providers for "' + stringifyType(directiveType) + '"', [], directiveType)); var queries = [], viewQueries = []; isPresent(dirMeta.queries) && (queries = this._getQueriesMetadata(dirMeta.queries, !1, directiveType), viewQueries = this._getQueriesMetadata(dirMeta.queries, !0, directiveType)); var metadata = CompileDirectiveMetadata.create({ selector: selector, exportAs: dirMeta.exportAs, isComponent: !!nonNormalizedTemplateMetadata, type: this._getTypeMetadata(directiveType), template: nonNormalizedTemplateMetadata, changeDetection: changeDetectionStrategy, inputs: dirMeta.inputs, outputs: dirMeta.outputs, host: dirMeta.host, providers: providers, viewProviders: viewProviders, queries: queries, viewQueries: viewQueries, entryComponents: entryComponentMetadata }); return { metadata: metadata, annotation: dirMeta } }, CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) { var dirMeta = this._directiveCache.get(directiveType); return dirMeta || this._reportError(new SyntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType), dirMeta }, CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) { var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive); return dirSummary || this._reportError(new SyntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType), dirSummary }, CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type) }, CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type) }, CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) { var moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule); if (!moduleSummary) { var moduleMeta = this.getNgModuleMetadata(moduleType, !1); moduleSummary = moduleMeta ? moduleMeta.toSummary() : null, moduleSummary && this._summaryCache.set(moduleType, moduleSummary) } return moduleSummary }, CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) { var _this = this; void 0 === throwIfNotFound && (throwIfNotFound = !0); var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound), loading = []; return ngModule && (ngModule.declaredDirectives.forEach(function (id) { var promise = _this._loadDirectiveMetadata(id.reference, isSync); promise && loading.push(promise) }), ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference) })), Promise.all(loading) }, CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) { var _this = this; void 0 === throwIfNotFound && (throwIfNotFound = !0), moduleType = _angular_core.resolveForwardRef(moduleType); var compileMeta = this._ngModuleCache.get(moduleType); if (compileMeta) return compileMeta; var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound); if (!meta) return null; var declaredDirectives = [], exportedNonModuleIdentifiers = [], declaredPipes = [], importedModules = [], exportedModules = [], providers = [], entryComponents = [], bootstrapComponents = [], schemas = []; meta.imports && flattenAndDedupeArray(meta.imports).forEach(function (importedType) { var importedModuleType; if (isValidType(importedType)) importedModuleType = importedType; else if (importedType && importedType.ngModule) { var moduleWithProviders = importedType; importedModuleType = moduleWithProviders.ngModule, moduleWithProviders.providers && providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType)) } if (!importedModuleType) return void _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType); var importedModuleSummary = _this.getNgModuleSummary(importedModuleType); return importedModuleSummary ? void importedModules.push(importedModuleSummary) : void _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType) }), meta.exports && flattenAndDedupeArray(meta.exports).forEach(function (exportedType) { if (!isValidType(exportedType)) return void _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType); var exportedModuleSummary = _this.getNgModuleSummary(exportedType); exportedModuleSummary ? exportedModules.push(exportedModuleSummary) : exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType)) }); var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules); meta.declarations && flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) { if (!isValidType(declaredType)) return void _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType); var declaredIdentifier = _this._getIdentifierMetadata(declaredType); if (_this._directiveResolver.isDirective(declaredType)) transitiveModule.addDirective(declaredIdentifier), declaredDirectives.push(declaredIdentifier), _this._addTypeToModule(declaredType, moduleType); else { if (!_this._pipeResolver.isPipe(declaredType)) return void _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType); transitiveModule.addPipe(declaredIdentifier), transitiveModule.pipes.push(declaredIdentifier), declaredPipes.push(declaredIdentifier), _this._addTypeToModule(declaredType, moduleType) } }); var exportedDirectives = [], exportedPipes = []; return exportedNonModuleIdentifiers.forEach(function (exportedId) { transitiveModule.directivesSet.has(exportedId.reference) ? (exportedDirectives.push(exportedId), transitiveModule.addExportedDirective(exportedId)) : transitiveModule.pipesSet.has(exportedId.reference) ? (exportedPipes.push(exportedId), transitiveModule.addExportedPipe(exportedId)) : _this._reportError(new SyntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType) }), meta.providers && providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType)), meta.entryComponents && entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function (type) { return _this._getIdentifierMetadata(type) })), meta.bootstrap && flattenAndDedupeArray(meta.bootstrap).forEach(function (type) { return isValidType(type) ? void bootstrapComponents.push(_this._getIdentifierMetadata(type)) : void _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType) }), entryComponents.push.apply(entryComponents, bootstrapComponents), meta.schemas && schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas)), compileMeta = new CompileNgModuleMetadata({ type: this._getTypeMetadata(moduleType), providers: providers, entryComponents: entryComponents, bootstrapComponents: bootstrapComponents, schemas: schemas, declaredDirectives: declaredDirectives, exportedDirectives: exportedDirectives, declaredPipes: declaredPipes, exportedPipes: exportedPipes, importedModules: importedModules, exportedModules: exportedModules, transitiveModule: transitiveModule, id: meta.id }), entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id) }), providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type) }), transitiveModule.addModule(compileMeta.type), this._ngModuleCache.set(moduleType, compileMeta), compileMeta }, CompileMetadataResolver.prototype._getTypeDescriptor = function (type) { return this._directiveResolver.isDirective(type) ? "directive" : this._pipeResolver.isPipe(type) ? "pipe" : this._ngModuleResolver.isNgModule(type) ? "module" : type.provide ? "provider" : "value" }, CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) { var oldModule = this._ngModuleOfTypes.get(type); oldModule && oldModule !== moduleType && this._reportError(new SyntaxError("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! " + ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType), this._ngModuleOfTypes.set(type, moduleType) }, CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) { var result = new TransitiveCompileNgModuleMetadata, modulesByToken = new Map; return importedModules.concat(exportedModules).forEach(function (modSummary) { modSummary.modules.forEach(function (mod) { return result.addModule(mod) }), modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp) }); var addedTokens = new Set; modSummary.providers.forEach(function (entry) { var tokenRef = tokenReference(entry.provider.token), prevModules = modulesByToken.get(tokenRef); prevModules || (prevModules = new Set, modulesByToken.set(tokenRef, prevModules)); var moduleRef = entry.module.reference; !addedTokens.has(tokenRef) && prevModules.has(moduleRef) || (prevModules.add(moduleRef), addedTokens.add(tokenRef), result.addProvider(entry.provider, entry.module)) }) }), exportedModules.forEach(function (modSummary) { modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id) }), modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id) }) }), importedModules.forEach(function (modSummary) { modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id) }), modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id) }) }), result }, CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) { return type = _angular_core.resolveForwardRef(type), { reference: type } }, CompileMetadataResolver.prototype.isInjectable = function (type) { var annotations = this._reflector.annotations(type); return annotations.some(function (ann) { return ann.constructor === _angular_core.Injectable }) }, CompileMetadataResolver.prototype.getInjectableSummary = function (type) { return { summaryKind: CompileSummaryKind.Injectable, type: this._getTypeMetadata(type) } }, CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) { void 0 === dependencies && (dependencies = null); var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable); return typeSummary ? typeSummary.type : this._getTypeMetadata(type, dependencies) }, CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies) { void 0 === dependencies && (dependencies = null); var identifier = this._getIdentifierMetadata(type); return { reference: identifier.reference, diDeps: this._getDependenciesMetadata(identifier.reference, dependencies), lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference) }) } }, CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) { return void 0 === dependencies && (dependencies = null), factory = _angular_core.resolveForwardRef(factory), { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) } }, CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) { var pipeMeta = this._pipeCache.get(pipeType); return pipeMeta || this._reportError(new SyntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType), pipeMeta }, CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) { var pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe); return pipeSummary || this._reportError(new SyntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType), pipeSummary }, CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) { var pipeMeta = this._pipeCache.get(pipeType); return pipeMeta || (pipeMeta = this._loadPipeMetadata(pipeType)), pipeMeta }, CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) { pipeType = _angular_core.resolveForwardRef(pipeType); var pipeAnnotation = this._pipeResolver.resolve(pipeType), pipeMeta = new CompilePipeMetadata({ type: this._getTypeMetadata(pipeType), name: pipeAnnotation.name, pure: pipeAnnotation.pure }); return this._pipeCache.set(pipeType, pipeMeta), this._summaryCache.set(pipeType, pipeMeta.toSummary()), pipeMeta }, CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) { var _this = this, hasUnknownDeps = !1, params = dependencies || this._reflector.parameters(typeOrFunc) || [], dependenciesMetadata = params.map(function (param) { var isAttribute = !1, isHost = !1, isSelf = !1, isSkipSelf = !1, isOptional = !1, token = null; return Array.isArray(param) ? param.forEach(function (paramEntry) { paramEntry instanceof _angular_core.Host ? isHost = !0 : paramEntry instanceof _angular_core.Self ? isSelf = !0 : paramEntry instanceof _angular_core.SkipSelf ? isSkipSelf = !0 : paramEntry instanceof _angular_core.Optional ? isOptional = !0 : paramEntry instanceof _angular_core.Attribute ? (isAttribute = !0, token = paramEntry.attributeName) : paramEntry instanceof _angular_core.Inject ? token = paramEntry.token : isValidType(paramEntry) && isBlank(token) && (token = paramEntry) }) : token = param, isBlank(token) ? (hasUnknownDeps = !0, null) : { isAttribute: isAttribute, isHost: isHost, isSelf: isSelf, isSkipSelf: isSkipSelf, isOptional: isOptional, token: _this._getTokenMetadata(token) } }); if (hasUnknownDeps) { var depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : "?" }).join(", "); this._reportError(new SyntaxError("Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ")."), typeOrFunc) } return dependenciesMetadata }, CompileMetadataResolver.prototype._getTokenMetadata = function (token) { token = _angular_core.resolveForwardRef(token); var compileToken; return compileToken = "string" == typeof token ? { value: token } : { identifier: { reference: token } } }, CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) { var _this = this; return void 0 === compileProviders && (compileProviders = []), providers.forEach(function (provider, providerIdx) { if (Array.isArray(provider)) _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders); else { provider = _angular_core.resolveForwardRef(provider); var providerMeta = void 0; if (provider && "object" == typeof provider && provider.hasOwnProperty("provide")) providerMeta = new ProviderMeta(provider.provide, provider); else if (isValidType(provider)) providerMeta = new ProviderMeta(provider, { useClass: provider }); else { var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) { return seenProviderIdx < providerIdx ? soFar.push("" + stringifyType(seenProvider)) : seenProviderIdx == providerIdx ? soFar.push("?" + stringifyType(seenProvider) + "?") : seenProviderIdx == providerIdx + 1 && soFar.push("..."), soFar }, []).join(", "); _this._reportError(new SyntaxError("Invalid " + (debugInfo ? debugInfo : "provider") + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type) } providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS) ? targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type)) : compileProviders.push(_this.getProviderMetadata(providerMeta)) } }), compileProviders }, CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) { var _this = this, components = [], collectedIdentifiers = []; return provider.useFactory || provider.useExisting || provider.useClass ? (this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type), []) : provider.multi ? (extractIdentifiers(provider.useValue, collectedIdentifiers), collectedIdentifiers.forEach(function (identifier) { (_this._directiveResolver.isDirective(identifier.reference) || _this._loadSummary(identifier.reference, CompileSummaryKind.Directive)) && components.push(identifier) }), components) : (this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type), []) }, CompileMetadataResolver.prototype.getProviderMetadata = function (provider) { var compileDeps, compileTypeMetadata = null, compileFactoryMetadata = null, token = this._getTokenMetadata(provider.token); return provider.useClass ? (compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies), compileDeps = compileTypeMetadata.diDeps, provider.token === provider.useClass && (token = { identifier: compileTypeMetadata })) : provider.useFactory && (compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies), compileDeps = compileFactoryMetadata.diDeps), { token: token, useClass: compileTypeMetadata, useValue: provider.useValue, useFactory: compileFactoryMetadata, useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null, deps: compileDeps, multi: provider.multi } }, CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) { var _this = this, res = []; return Object.keys(queries).forEach(function (propertyName) { var query = queries[propertyName]; query.isViewQuery === isViewQuery && res.push(_this._getQueryMetadata(query, propertyName, directiveType)) }), res }, CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/) }, CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) { var selectors, _this = this; return "string" == typeof q.selector ? selectors = this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName) }) : (q.selector || this._reportError(new SyntaxError("Can't construct a query for the property \"" + propertyName + '" of "' + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc), selectors = [this._getTokenMetadata(q.selector)]), { selectors: selectors, first: q.first, descendants: q.descendants, propertyName: propertyName, read: q.read ? this._getTokenMetadata(q.read) : null } }, CompileMetadataResolver.prototype._reportError = function (error, type, otherType) { if (!this._errorCollector) throw error; this._errorCollector(error, type), otherType && this._errorCollector(error, otherType) }, CompileMetadataResolver.ctorParameters = function () { return [{ type: NgModuleResolver }, { type: DirectiveResolver }, { type: PipeResolver }, { type: SummaryResolver }, { type: ElementSchemaRegistry }, { type: DirectiveNormalizer }, { type: ReflectorReader }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN] }] }] }, CompileMetadataResolver = __decorate$9([CompilerInjectable(), __metadata$9("design:paramtypes", [NgModuleResolver, DirectiveResolver, PipeResolver, SummaryResolver, ElementSchemaRegistry, DirectiveNormalizer, ReflectorReader, Function])], CompileMetadataResolver) }(), _CompileValueConverter = function (_super) { function _CompileValueConverter() { _super.apply(this, arguments) } return __extends$18(_CompileValueConverter, _super), _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) { targetIdentifiers.push({ reference: value }) }, _CompileValueConverter }(ValueTransformer), QUOTED_KEYS = "$quoted$", _ValueOutputAstTransformer = function () { function _ValueOutputAstTransformer() { } return _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) { var _this = this; return literalArr(arr.map(function (value) { return visitValue(value, _this, null) }), type) }, _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) { var _this = this, entries = [], quotedSet = new Set(map && map[QUOTED_KEYS]); return Object.keys(map).forEach(function (key) { entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key))) }), new LiteralMapExpr(entries, type) }, _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type) }, _ValueOutputAstTransformer.prototype.visitOther = function (value, type) { return value instanceof Expression ? value : importExpr({ reference: value }) }, _ValueOutputAstTransformer }(), __decorate$13 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$13 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, ComponentFactoryDependency = function () { function ComponentFactoryDependency(comp, placeholder) { this.comp = comp, this.placeholder = placeholder } return ComponentFactoryDependency }(), NgModuleCompileResult = function () { function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) { this.statements = statements, this.ngModuleFactoryVar = ngModuleFactoryVar, this.dependencies = dependencies } return NgModuleCompileResult }(), NgModuleCompiler = function () { function NgModuleCompiler() { } return NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) { var moduleUrl = identifierModuleUrl(ngModuleMeta.type), sourceFileName = isPresent(moduleUrl) ? "in NgModule " + identifierName(ngModuleMeta.type) + " in " + moduleUrl : "in NgModule " + identifierName(ngModuleMeta.type), sourceFile = new ParseSourceFile("", sourceFileName), sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null)), deps = [], bootstrapComponentFactories = [], entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) { var id = { reference: null }; return ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.reference }) && bootstrapComponentFactories.push(id), deps.push(new ComponentFactoryDependency(entryComponent, id)), id }), builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan), providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan); providerParser.parse().forEach(function (provider) { return builder.addProvider(provider) }); var injectorClass = builder.build(), ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory", ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(createIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]), stmts = [injectorClass, ngModuleFactoryStmt]; if (ngModuleMeta.id) { var registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)]).toStmt(); stmts.push(registerFactoryStmt) } return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps) }, NgModuleCompiler = __decorate$13([CompilerInjectable(), __metadata$13("design:paramtypes", [])], NgModuleCompiler) }(), _InjectorBuilder = function () {
        function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) { this._ngModuleMeta = _ngModuleMeta, this._entryComponentFactories = _entryComponentFactories, this._bootstrapComponentFactories = _bootstrapComponentFactories, this._sourceSpan = _sourceSpan, this.fields = [], this.getters = [], this.methods = [], this.ctorStmts = [], this._tokens = [], this._instances = new Map, this._createStmts = [], this._destroyStmts = [] } return _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
            var _this = this, providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider) }), propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size, instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager); resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && this._destroyStmts.push(instance.callMethod("ngOnDestroy", []).toStmt()), this._tokens.push(resolvedProvider.token), this._instances.set(tokenReference(resolvedProvider.token), instance);
        }, _InjectorBuilder.prototype.build = function () { var _this = this, getMethodStmts = this._tokens.map(function (token) { var providerExpr = _this._instances.get(tokenReference(token)); return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]) }), methods = [new ClassMethod("createInternal", [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod("getInternal", [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod("destroyInternal", [], this._destroyStmts)], parentArgs = [variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory) })), literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory) }))], injClassName = identifierName(this._ngModuleMeta.type) + "Injector"; return createClassStmt({ name: injClassName, ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))], parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]), parentArgs: parentArgs, builders: [{ methods: methods }, this] }) }, _InjectorBuilder.prototype._getProviderValue = function (provider) { var result, _this = this; if (isPresent(provider.useExisting)) result = this._getDependency({ token: provider.useExisting }); else if (isPresent(provider.useFactory)) { var deps = provider.deps || provider.useFactory.diDeps, depsExpr = deps.map(function (dep) { return _this._getDependency(dep) }); result = importExpr(provider.useFactory).callFn(depsExpr) } else if (isPresent(provider.useClass)) { var deps = provider.deps || provider.useClass.diDeps, depsExpr = deps.map(function (dep) { return _this._getDependency(dep) }); result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass)) } else result = convertValueToOutputAst(provider.useValue); return result }, _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) { var resolvedProviderValueExpr, type; if (isMulti ? (resolvedProviderValueExpr = literalArr(providerValueExpressions), type = new ArrayType(DYNAMIC_TYPE)) : (resolvedProviderValueExpr = providerValueExpressions[0], type = providerValueExpressions[0].type), type || (type = DYNAMIC_TYPE), isEager) this.fields.push(new ClassField(propName, type)), this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt()); else { var internalField = "_" + propName; this.fields.push(new ClassField(internalField, type)); var getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))]; this.getters.push(new ClassGetter(propName, getterStmts, type)) } return THIS_EXPR.prop(propName) }, _InjectorBuilder.prototype._getDependency = function (dep) { var result = null; if (dep.isValue && (result = literal(dep.value)), dep.isSkipSelf || (!dep.token || tokenReference(dep.token) !== resolveIdentifier(Identifiers.Injector) && tokenReference(dep.token) !== resolveIdentifier(Identifiers.ComponentFactoryResolver) || (result = THIS_EXPR), result || (result = this._instances.get(tokenReference(dep.token)))), !result) { var args = [createDiTokenExpression(dep.token)]; dep.isOptional && args.push(NULL_EXPR), result = InjectorProps.parent.callMethod("get", args) } return result }, _InjectorBuilder
    }(), InjectorProps = function () { function InjectorProps() { } return InjectorProps.parent = THIS_EXPR.prop("parent"), InjectorProps }(), InjectMethodVars = function () { function InjectMethodVars() { } return InjectMethodVars.token = variable("token"), InjectMethodVars.notFoundResult = variable("notFoundResult"), InjectMethodVars }(), _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g, _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i, CATCH_ERROR_VAR$1 = variable("error"), CATCH_STACK_VAR$1 = variable("stack"), _EmittedLine = function () { function _EmittedLine(indent) { this.indent = indent, this.parts = [] } return _EmittedLine }(), EmitterVisitorContext = function () { function EmitterVisitorContext(_exportedVars, _indent) { this._exportedVars = _exportedVars, this._indent = _indent, this._classes = [], this._lines = [new _EmittedLine(_indent)] } return EmitterVisitorContext.createRoot = function (exportedVars) { return new EmitterVisitorContext(exportedVars, 0) }, Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", { get: function () { return this._lines[this._lines.length - 1] }, enumerable: !0, configurable: !0 }), EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1 }, EmitterVisitorContext.prototype.println = function (lastPart) { void 0 === lastPart && (lastPart = ""), this.print(lastPart, !0) }, EmitterVisitorContext.prototype.lineIsEmpty = function () { return 0 === this._currentLine.parts.length }, EmitterVisitorContext.prototype.print = function (part, newLine) { void 0 === newLine && (newLine = !1), part.length > 0 && this._currentLine.parts.push(part), newLine && this._lines.push(new _EmittedLine(this._indent)) }, EmitterVisitorContext.prototype.removeEmptyLastLine = function () { this.lineIsEmpty() && this._lines.pop() }, EmitterVisitorContext.prototype.incIndent = function () { this._indent++, this._currentLine.indent = this._indent }, EmitterVisitorContext.prototype.decIndent = function () { this._indent--, this._currentLine.indent = this._indent }, EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz) }, EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop() }, Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", { get: function () { return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null }, enumerable: !0, configurable: !0 }), EmitterVisitorContext.prototype.toSource = function () { var lines = this._lines; return 0 === lines[lines.length - 1].parts.length && (lines = lines.slice(0, lines.length - 1)), lines.map(function (line) { return line.parts.length > 0 ? _createIndent(line.indent) + line.parts.join("") : "" }).join("\n") }, EmitterVisitorContext }(), AbstractEmitterVisitor = function () { function AbstractEmitterVisitor(_escapeDollarInStrings) { this._escapeDollarInStrings = _escapeDollarInStrings } return AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) { return stmt.expr.visitExpression(this, ctx), ctx.println(";"), null }, AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) { return ctx.print("return "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null }, AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { }, AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { }, AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) { ctx.print("if ("), stmt.condition.visitExpression(this, ctx), ctx.print(") {"); var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0; return stmt.trueCase.length <= 1 && !hasElseCase ? (ctx.print(" "), this.visitAllStatements(stmt.trueCase, ctx), ctx.removeEmptyLastLine(), ctx.print(" ")) : (ctx.println(), ctx.incIndent(), this.visitAllStatements(stmt.trueCase, ctx), ctx.decIndent(), hasElseCase && (ctx.println("} else {"), ctx.incIndent(), this.visitAllStatements(stmt.falseCase, ctx), ctx.decIndent())), ctx.println("}"), null }, AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { }, AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) { return ctx.print("throw "), stmt.error.visitExpression(this, ctx), ctx.println(";"), null }, AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) { var lines = stmt.comment.split("\n"); return lines.forEach(function (line) { ctx.println("// " + line) }), null }, AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { }, AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) { var lineWasEmpty = ctx.lineIsEmpty(); return lineWasEmpty || ctx.print("("), ctx.print(expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) { var lineWasEmpty = ctx.lineIsEmpty(); return lineWasEmpty || ctx.print("("), expr.receiver.visitExpression(this, ctx), ctx.print("["), expr.index.visitExpression(this, ctx), ctx.print("] = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) { var lineWasEmpty = ctx.lineIsEmpty(); return lineWasEmpty || ctx.print("("), expr.receiver.visitExpression(this, ctx), ctx.print("." + expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) { expr.receiver.visitExpression(this, ctx); var name = expr.name; return isPresent(expr.builtin) && (name = this.getBuiltinMethodName(expr.builtin), isBlank(name)) ? null : (ctx.print("." + name + "("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(")"), null) }, AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { }, AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) { return expr.fn.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) { var varName = ast.name; if (isPresent(ast.builtin)) switch (ast.builtin) { case BuiltinVar.Super: varName = "super"; break; case BuiltinVar.This: varName = "this"; break; case BuiltinVar.CatchError: varName = CATCH_ERROR_VAR$1.name; break; case BuiltinVar.CatchStack: varName = CATCH_STACK_VAR$1.name; break; default: throw new Error("Unknown builtin variable " + ast.builtin) } return ctx.print(varName), null }, AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) { return ctx.print("new "), ast.classExpr.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(ast.args, ctx, ","), ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) { var value = ast.value; return "string" == typeof value ? ctx.print(escapeIdentifier(value, this._escapeDollarInStrings)) : ctx.print("" + value), null }, AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { }, AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) { return ctx.print("("), ast.condition.visitExpression(this, ctx), ctx.print("? "), ast.trueCase.visitExpression(this, ctx), ctx.print(": "), ast.falseCase.visitExpression(this, ctx), ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) { return ctx.print("!"), ast.condition.visitExpression(this, ctx), null }, AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { }, AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { }, AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) { var opStr; switch (ast.operator) { case BinaryOperator.Equals: opStr = "=="; break; case BinaryOperator.Identical: opStr = "==="; break; case BinaryOperator.NotEquals: opStr = "!="; break; case BinaryOperator.NotIdentical: opStr = "!=="; break; case BinaryOperator.And: opStr = "&&"; break; case BinaryOperator.Or: opStr = "||"; break; case BinaryOperator.Plus: opStr = "+"; break; case BinaryOperator.Minus: opStr = "-"; break; case BinaryOperator.Divide: opStr = "/"; break; case BinaryOperator.Multiply: opStr = "*"; break; case BinaryOperator.Modulo: opStr = "%"; break; case BinaryOperator.Lower: opStr = "<"; break; case BinaryOperator.LowerEquals: opStr = "<="; break; case BinaryOperator.Bigger: opStr = ">"; break; case BinaryOperator.BiggerEquals: opStr = ">="; break; default: throw new Error("Unknown operator " + ast.operator) } return ctx.print("("), ast.lhs.visitExpression(this, ctx), ctx.print(" " + opStr + " "), ast.rhs.visitExpression(this, ctx), ctx.print(")"), null }, AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) { return ast.receiver.visitExpression(this, ctx), ctx.print("."), ctx.print(ast.name), null }, AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) { return ast.receiver.visitExpression(this, ctx), ctx.print("["), ast.index.visitExpression(this, ctx), ctx.print("]"), null }, AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) { var useNewLine = ast.entries.length > 1; return ctx.print("[", useNewLine), ctx.incIndent(), this.visitAllExpressions(ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print("]", useNewLine), null }, AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) { var _this = this, useNewLine = ast.entries.length > 1; return ctx.print("{", useNewLine), ctx.incIndent(), this.visitAllObjects(function (entry) { ctx.print(escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": "), entry.value.visitExpression(_this, ctx) }, ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print("}", useNewLine), null }, AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) { var _this = this; void 0 === newLine && (newLine = !1), this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx) }, expressions, ctx, separator, newLine) }, AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) { void 0 === newLine && (newLine = !1); for (var i = 0; i < expressions.length; i++) i > 0 && ctx.print(separator, newLine), handler(expressions[i]); newLine && ctx.println() }, AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) { var _this = this; statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx) }) }, AbstractEmitterVisitor }(), __extends$19 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _debugModuleUrl = "/debug/lib", TypeScriptEmitter = function () { function TypeScriptEmitter(_importGenerator) { this._importGenerator = _importGenerator } return TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) { var _this = this, converter = new _TsEmitterVisitor(moduleUrl), ctx = EmitterVisitorContext.createRoot(exportedVars); converter.visitAllStatements(stmts, ctx); var srcParts = []; return converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) { srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.fileNameToModuleName(importedModuleUrl, moduleUrl) + "';")) }), srcParts.push(ctx.toSource()), srcParts.join("\n") }, TypeScriptEmitter }(), _TsEmitterVisitor = function (_super) { function _TsEmitterVisitor(_moduleUrl) { _super.call(this, !1), this._moduleUrl = _moduleUrl, this.importsWithPrefixes = new Map } return __extends$19(_TsEmitterVisitor, _super), _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) { void 0 === defaultType && (defaultType = "any"), isPresent(t) ? t.visitType(this, ctx) : ctx.print(defaultType) }, _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) { var value = ast.value; return isBlank(value) && ast.type != NULL_TYPE ? (ctx.print("(" + value + " as any)"), null) : _super.prototype.visitLiteralExpr.call(this, ast, ctx) }, _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) { 0 === ast.entries.length && ctx.print("("); var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx); return 0 === ast.entries.length && ctx.print(" as any[])"), result }, _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { return this._visitIdentifier(ast.value, ast.typeParams, ctx), null }, _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { return ctx.isExportedVar(stmt.name) && ctx.print("export "), stmt.hasModifier(StmtModifier.Final) ? ctx.print("const") : ctx.print("var"), ctx.print(" " + stmt.name + ":"), this.visitType(stmt.type, ctx), ctx.print(" = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null }, _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) { return ctx.print("(<"), ast.type.visitType(this, ctx), ctx.print(">"), ast.value.visitExpression(this, ctx), ctx.print(")"), null }, _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { var _this = this; return ctx.pushClass(stmt), ctx.isExportedVar(stmt.name) && ctx.print("export "), ctx.print("class " + stmt.name), isPresent(stmt.parent) && (ctx.print(" extends "), stmt.parent.visitExpression(this, ctx)), ctx.println(" {"), ctx.incIndent(), stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx) }), isPresent(stmt.constructorMethod) && this._visitClassConstructor(stmt, ctx), stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx) }), stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx) }), ctx.decIndent(), ctx.println("}"), ctx.popClass(), null }, _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) { field.hasModifier(StmtModifier.Private) && ctx.print("/*private*/ "), ctx.print(field.name), ctx.print(":"), this.visitType(field.type, ctx), ctx.println(";") }, _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) { getter.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print("get " + getter.name + "()"), ctx.print(":"), this.visitType(getter.type, ctx), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(getter.body, ctx), ctx.decIndent(), ctx.println("}") }, _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) { ctx.print("constructor("), this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.constructorMethod.body, ctx), ctx.decIndent(), ctx.println("}") }, _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) { method.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print(method.name + "("), this._visitParams(method.params, ctx), ctx.print("):"), this.visitType(method.type, ctx, "void"), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(method.body, ctx), ctx.decIndent(), ctx.println("}") }, _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { return ctx.print("("), this._visitParams(ast.params, ctx), ctx.print("):"), this.visitType(ast.type, ctx, "void"), ctx.println(" => {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null }, _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) { return ctx.isExportedVar(stmt.name) && ctx.print("export "), ctx.print("function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.print("):"), this.visitType(stmt.type, ctx, "void"), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null }, _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {"), ctx.incIndent(); var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts); return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null }, _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) { var typeStr; switch (type.name) { case BuiltinTypeName.Bool: typeStr = "boolean"; break; case BuiltinTypeName.Dynamic: typeStr = "any"; break; case BuiltinTypeName.Function: typeStr = "Function"; break; case BuiltinTypeName.Number: typeStr = "number"; break; case BuiltinTypeName.Int: typeStr = "number"; break; case BuiltinTypeName.String: typeStr = "string"; break; default: throw new Error("Unsupported builtin type " + type.name) } return ctx.print(typeStr), null }, _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) { var _this = this; return ast.value.visitExpression(this, ctx), isPresent(ast.typeParams) && ast.typeParams.length > 0 && (ctx.print("<"), this.visitAllObjects(function (type) { return type.visitType(_this, ctx) }, ast.typeParams, ctx, ","), ctx.print(">")), null }, _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) { return this.visitType(type.of, ctx), ctx.print("[]"), null }, _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) { return ctx.print("{[key: string]:"), this.visitType(type.valueType, ctx), ctx.print("}"), null }, _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) { var name; switch (method) { case BuiltinMethod.ConcatArray: name = "concat"; break; case BuiltinMethod.SubscribeObservable: name = "subscribe"; break; case BuiltinMethod.Bind: name = "bind"; break; default: throw new Error("Unknown builtin method: " + method) } return name }, _TsEmitterVisitor.prototype._visitParams = function (params, ctx) { var _this = this; this.visitAllObjects(function (param) { ctx.print(param.name), ctx.print(":"), _this.visitType(param.type, ctx) }, params, ctx, ",") }, _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) { var _this = this, name = identifierName(value), moduleUrl = identifierModuleUrl(value); if (isBlank(name)) throw new Error("Internal error: unknown identifier " + value); if (isPresent(moduleUrl) && moduleUrl != this._moduleUrl) { var prefix = this.importsWithPrefixes.get(moduleUrl); isBlank(prefix) && (prefix = "import" + this.importsWithPrefixes.size, this.importsWithPrefixes.set(moduleUrl, prefix)), ctx.print(prefix + ".") } value.reference && value.reference.members && value.reference.members.length ? (ctx.print(value.reference.name), ctx.print("."), ctx.print(value.reference.members.join("."))) : ctx.print(name), isPresent(typeParams) && typeParams.length > 0 && (ctx.print("<"), this.visitAllObjects(function (type) { return type.visitType(_this, ctx) }, typeParams, ctx, ","), ctx.print(">")) }, _TsEmitterVisitor }(AbstractEmitterVisitor), SECURITY_SCHEMA = {}; registerContext(_angular_core.SecurityContext.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]), registerContext(_angular_core.SecurityContext.STYLE, ["*|style"]), registerContext(_angular_core.SecurityContext.URL, ["*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "img|srcset", "input|src", "ins|cite", "q|cite", "source|src", "source|srcset", "track|src", "video|poster", "video|src"]), registerContext(_angular_core.SecurityContext.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src"]);/**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
    var __extends$20 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, __decorate$14 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$14 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, BOOLEAN = "boolean", NUMBER = "number", STRING = "string", OBJECT = "object", SCHEMA = ["[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume", ":svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username", "area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username", "audio^media|", "br^[HTMLElement]|clear", "base^[HTMLElement]|href,target", "body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas^[HTMLElement]|#height,#width", "content^[HTMLElement]|select", "dl^[HTMLElement]|!compact", "datalist^[HTMLElement]|", "details^[HTMLElement]|!open", "dialog^[HTMLElement]|!open,returnValue", "dir^[HTMLElement]|!compact", "div^[HTMLElement]|align", "embed^[HTMLElement]|align,height,name,src,type,width", "fieldset^[HTMLElement]|!disabled,name", "font^[HTMLElement]|color,face,size", "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr^[HTMLElement]|align,color,!noShade,size,width", "head^[HTMLElement]|", "h1,h2,h3,h4,h5,h6^[HTMLElement]|align", "html^[HTMLElement]|version", "iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width", "img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width", "input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name", "li^[HTMLElement]|type,#value", "label^[HTMLElement]|htmlFor", "legend^[HTMLElement]|align", "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map^[HTMLElement]|name", "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu^[HTMLElement]|!compact", "meta^[HTMLElement]|content,httpEquiv,name,scheme", "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value", "ins,del^[HTMLElement]|cite,dateTime", "ol^[HTMLElement]|!compact,!reversed,#start,type", "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup^[HTMLElement]|!disabled,label", "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value", "output^[HTMLElement]|defaultValue,%htmlFor,name,value", "p^[HTMLElement]|align", "param^[HTMLElement]|name,type,value,valueType", "picture^[HTMLElement]|", "pre^[HTMLElement]|#width", "progress^[HTMLElement]|#max,#value", "q,blockquote,cite^[HTMLElement]|", "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow^[HTMLElement]|", "source^[HTMLElement]|media,sizes,src,srcset,type", "span^[HTMLElement]|", "style^[HTMLElement]|!disabled,media,type", "caption^[HTMLElement]|align", "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width", "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign", "template^[HTMLElement]|", "textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title^[HTMLElement]|text", "track^[HTMLElement]|!default,kind,label,src,srclang", "ul^[HTMLElement]|!compact,type", "unknown^[HTMLElement]|", "video^media|#height,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:cursor^:svg:|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan", "data^[HTMLElement]|value", "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default", "summary^[HTMLElement]|", "time^[HTMLElement]|dateTime"], _ATTR_TO_PROP = { class: "className", for: "htmlFor", formaction: "formAction", innerHtml: "innerHTML", readonly: "readOnly", tabindex: "tabIndex" }, DomElementSchemaRegistry = function (_super) { function DomElementSchemaRegistry() { var _this = this; _super.call(this), this._schema = {}, SCHEMA.forEach(function (encodedType) { var type = {}, _a = encodedType.split("|"), strType = _a[0], strProperties = _a[1], properties = strProperties.split(","), _b = strType.split("^"), typeNames = _b[0], superName = _b[1]; typeNames.split(",").forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type }); var superType = superName && _this._schema[superName.toLowerCase()]; superType && Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop] }), properties.forEach(function (property) { if (property.length > 0) switch (property[0]) { case "*": break; case "!": type[property.substring(1)] = BOOLEAN; break; case "#": type[property.substring(1)] = NUMBER; break; case "%": type[property.substring(1)] = OBJECT; break; default: type[property] = STRING } }) }) } return __extends$20(DomElementSchemaRegistry, _super), DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name })) return !0; if (tagName.indexOf("-") > -1) { if ("ng-container" === tagName || "ng-content" === tagName) return !1; if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name })) return !0 } var elementProperties = this._schema[tagName.toLowerCase()] || this._schema.unknown; return !!elementProperties[propName] }, DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name })) return !0; if (tagName.indexOf("-") > -1) { if ("ng-container" === tagName || "ng-content" === tagName) return !0; if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name })) return !0 } return !!this._schema[tagName.toLowerCase()] }, DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) { isAttribute && (propName = this.getMappedPropName(propName)), tagName = tagName.toLowerCase(), propName = propName.toLowerCase(); var ctx = SECURITY_SCHEMA[tagName + "|" + propName]; return ctx ? ctx : (ctx = SECURITY_SCHEMA["*|" + propName], ctx ? ctx : _angular_core.SecurityContext.NONE) }, DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName }, DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return "ng-component" }, DomElementSchemaRegistry.prototype.validateProperty = function (name) { if (name.toLowerCase().startsWith("on")) { var msg = "Binding to event property '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module."; return { error: !0, msg: msg } } return { error: !1 } }, DomElementSchemaRegistry.prototype.validateAttribute = function (name) { if (name.toLowerCase().startsWith("on")) { var msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=..."); return { error: !0, msg: msg } } return { error: !1 } }, DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema) }, DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { return dashCaseToCamelCase(propName) }, DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { var unit = "", strVal = val.toString().trim(), errorMsg = null; if (_isPixelDimensionStyle(camelCaseProp) && 0 !== val && "0" !== val) if ("number" == typeof val) unit = "px"; else { var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/); valAndSuffixMatch && 0 == valAndSuffixMatch[1].length && (errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val) } return { error: errorMsg, value: strVal + unit } }, DomElementSchemaRegistry = __decorate$14([CompilerInjectable(), __metadata$14("design:paramtypes", [])], DomElementSchemaRegistry) }(ElementSchemaRegistry), ShadowCss = function () { function ShadowCss() { this.strictStyling = !0 } return ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) { void 0 === hostSelector && (hostSelector = ""); var sourceMappingUrl = extractSourceMappingUrl(cssText); return cssText = stripComments(cssText), cssText = this._insertDirectives(cssText), this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl }, ShadowCss.prototype._insertDirectives = function (cssText) { return cssText = this._insertPolyfillDirectivesInCssText(cssText), this._insertPolyfillRulesInCssText(cssText) }, ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) { return cssText.replace(_cssContentNextSelectorRe, function () { for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; return m[2] + "{" }) }, ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) { return cssText.replace(_cssContentRuleRe, function () { for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; var rule = m[0].replace(m[1], "").replace(m[2], ""); return m[4] + rule }) }, ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) { var unscopedRules = this._extractUnscopedRulesFromCssText(cssText); return cssText = this._insertPolyfillHostInCssText(cssText), cssText = this._convertColonHost(cssText), cssText = this._convertColonHostContext(cssText), cssText = this._convertShadowDOMSelectors(cssText), scopeSelector && (cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector)), cssText = cssText + "\n" + unscopedRules, cssText.trim() }, ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) { var m, r = ""; for (_cssContentUnscopedRuleRe.lastIndex = 0; null !== (m = _cssContentUnscopedRuleRe.exec(cssText)) ;) { var rule = m[0].replace(m[2], "").replace(m[1], m[4]); r += rule + "\n\n" } return r }, ShadowCss.prototype._convertColonHost = function (cssText) { return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer) }, ShadowCss.prototype._convertColonHostContext = function (cssText) { return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer) }, ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) { return cssText.replace(regExp, function () { for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i - 0] = arguments[_i]; if (m[2]) { for (var parts = m[2].split(","), r = [], i = 0; i < parts.length; i++) { var p = parts[i].trim(); if (!p) break; r.push(partReplacer(_polyfillHostNoCombinator, p, m[3])) } return r.join(",") } return _polyfillHostNoCombinator + m[3] }) }, ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) { return part.indexOf(_polyfillHost) > -1 ? this._colonHostPartReplacer(host, part, suffix) : host + part + suffix + ", " + part + " " + host + suffix }, ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) { return host + part.replace(_polyfillHost, "") + suffix }, ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) { return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, " ") }, cssText) }, ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) { var _this = this; return processRules(cssText, function (rule) { var selector = rule.selector, content = rule.content; return "@" != rule.selector[0] ? selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling) : (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) && (content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector)), new CssRule(selector, content) }) }, ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) { var _this = this; return selector.split(",").map(function (part) { return part.trim().split(_shadowDeepSelectors) }).map(function (deepParts) { var shallowPart = deepParts[0], otherParts = deepParts.slice(1), applyScope = function (shallowPart) { return _this._selectorNeedsScoping(shallowPart, scopeSelector) ? strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector) : shallowPart }; return [applyScope(shallowPart)].concat(otherParts).join(" ") }).join(", ") }, ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) { var re = this._makeScopeMatcher(scopeSelector); return !re.test(selector) }, ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) { var lre = /\[/g, rre = /\]/g; return scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]"), new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m") }, ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) { return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector) }, ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) { if (_polyfillHostRe.lastIndex = 0, _polyfillHostRe.test(selector)) { var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector; return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) { return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) { return before + replaceBy_1 + colon + after }) }).replace(_polyfillHostRe, replaceBy_1 + " ") } return scopeSelector + " " + selector }, ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) { var _this = this, isRe = /\[is=([^\]]*)\]/g; scopeSelector = scopeSelector.replace(isRe, function (_) { for (var parts = [], _i = 1; _i < arguments.length; _i++) parts[_i - 1] = arguments[_i]; return parts[0] }); var attrName = "[" + scopeSelector + "]", _scopeSelectorPart = function (p) { var scopedP = p.trim(); if (!scopedP) return ""; if (p.indexOf(_polyfillHostNoCombinator) > -1) scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector); else { var t = p.replace(_polyfillHostRe, ""); if (t.length > 0) { var matches = t.match(/([^:]*)(:*)(.*)/); matches && (scopedP = matches[1] + attrName + matches[2] + matches[3]) } } return scopedP }, safeContent = new SafeSelector(selector); selector = safeContent.content(); for (var res, scopedSelector = "", startIndex = 0, sep = /( |>|\+|~(?!=))\s*/g, scopeAfter = selector.indexOf(_polyfillHostNoCombinator) ; null !== (res = sep.exec(selector)) ;) { var separator = res[1], part = selector.slice(startIndex, res.index).trim(), scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part; scopedSelector += scopedPart + " " + separator + " ", startIndex = sep.lastIndex } return scopedSelector += _scopeSelectorPart(selector.substring(startIndex)), safeContent.restore(scopedSelector) }, ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) { return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost) }, ShadowCss }(), SafeSelector = function () { function SafeSelector(selector) { var _this = this; this.placeholders = [], this.index = 0, selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) { var replaceBy = "__ph-" + _this.index + "__"; return _this.placeholders.push(keep), _this.index++, replaceBy }), this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) { var replaceBy = "__ph-" + _this.index + "__"; return _this.placeholders.push(exp), _this.index++, pseudo + replaceBy }) } return SafeSelector.prototype.restore = function (content) { var _this = this; return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index] }) }, SafeSelector.prototype.content = function () { return this._content }, SafeSelector }(), _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim, _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim, _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim, _polyfillHost = "-shadowcsshost", _polyfillHostContext = "-shadowcsscontext", _parenSuffix = ")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)", _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim"), _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim"), _polyfillHostNoCombinator = _polyfillHost + "-no-combinator", _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/, _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g], _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g, _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$", _polyfillHostRe = /-shadowcsshost/gim, _colonHostRe = /:host/gim, _colonHostContextRe = /:host-context/gim, _commentRe = /\/\*\s*[\s\S]*?\*\//g, _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//, _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g, _curlyRe = /([{}])/g, OPEN_CURLY = "{", CLOSE_CURLY = "}", BLOCK_PLACEHOLDER = "%BLOCK%", CssRule = function () { function CssRule(selector, content) { this.selector = selector, this.content = content } return CssRule }(), StringWithEscapedBlocks = function () { function StringWithEscapedBlocks(escapedString, blocks) { this.escapedString = escapedString, this.blocks = blocks } return StringWithEscapedBlocks }(), __decorate$15 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$15 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, COMPONENT_VARIABLE = "%COMP%", HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE, CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE, StylesCompileDependency = function () { function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) { this.name = name, this.moduleUrl = moduleUrl, this.isShimmed = isShimmed, this.valuePlaceholder = valuePlaceholder } return StylesCompileDependency }(), StylesCompileResult = function () { function StylesCompileResult(componentStylesheet, externalStylesheets) { this.componentStylesheet = componentStylesheet, this.externalStylesheets = externalStylesheets } return StylesCompileResult }(), CompiledStylesheet = function () { function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) { this.statements = statements, this.stylesVar = stylesVar, this.dependencies = dependencies, this.isShimmed = isShimmed, this.meta = meta } return CompiledStylesheet }(), StyleCompiler = function () { function StyleCompiler(_urlResolver) { this._urlResolver = _urlResolver, this._shadowCss = new ShadowCss } return StyleCompiler.prototype.compileComponent = function (comp) { var _this = this, externalStylesheets = [], componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({ styles: comp.template.styles, styleUrls: comp.template.styleUrls, moduleUrl: identifierModuleUrl(comp.type) }), !0); return comp.template.externalStylesheets.forEach(function (stylesheetMeta) { var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, !1); externalStylesheets.push(compiledStylesheet) }), new StylesCompileResult(componentStylesheet, externalStylesheets) }, StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) { for (var _this = this, shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated, styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)) }), dependencies = [], i = 0; i < stylesheet.styleUrls.length; i++) { var identifier = { reference: null }; dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier)), styleExpressions.push(new ExternalExpr(identifier)) } var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null), stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]); return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet) }, StyleCompiler.prototype._shimIfNeeded = function (style, shim) { return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style }, StyleCompiler = __decorate$15([CompilerInjectable(), __metadata$15("design:paramtypes", [UrlResolver])], StyleCompiler) }(), _DebugState = function () { function _DebugState(nodeIndex, sourceAst) { this.nodeIndex = nodeIndex, this.sourceAst = sourceAst } return _DebugState }(), NULL_DEBUG_STATE = new _DebugState(null, null), CompileMethod = function () { function CompileMethod(_view) { this._view = _view, this._newState = NULL_DEBUG_STATE, this._currState = NULL_DEBUG_STATE, this._bodyStatements = [], this._debugEnabled = this._view.genConfig.genDebugInfo } return CompileMethod.prototype._updateDebugContextIfNeeded = function () { if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) { var expr = this._updateDebugContext(this._newState); isPresent(expr) && this._bodyStatements.push(expr.toStmt()) } }, CompileMethod.prototype._updateDebugContext = function (newState) { if (this._currState = this._newState = newState, this._debugEnabled) { var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null; return THIS_EXPR.callMethod("debug", [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]) } return null }, CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) { var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst)); return res || NULL_EXPR }, CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) { this._newState = new _DebugState(nodeIndex, templateAst) }, CompileMethod.prototype.push = function () { for (var stmts = [], _i = 0; _i < arguments.length; _i++) stmts[_i - 0] = arguments[_i]; this.addStmts(stmts) }, CompileMethod.prototype.addStmt = function (stmt) { this._updateDebugContextIfNeeded(), this._bodyStatements.push(stmt) }, CompileMethod.prototype.addStmts = function (stmts) { this._updateDebugContextIfNeeded(), (_a = this._bodyStatements).push.apply(_a, stmts); var _a }, CompileMethod.prototype.finish = function () { return this._bodyStatements }, CompileMethod.prototype.isEmpty = function () { return 0 === this._bodyStatements.length }, CompileMethod }(), __extends$22 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _ReplaceViewTransformer = function (_super) { function _ReplaceViewTransformer(_viewExpr, _view) { _super.call(this), this._viewExpr = _viewExpr, this._view = _view } return __extends$22(_ReplaceViewTransformer, _super), _ReplaceViewTransformer.prototype._isThis = function (expr) { return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This }, _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) { return this._isThis(ast) ? this._viewExpr : ast }, _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) { return this._isThis(ast.receiver) && (this._view.fields.some(function (field) { return field.name == ast.name }) || this._view.getters.some(function (field) { return field.name == ast.name })) ? this._viewExpr.cast(this._view.classType).prop(ast.name) : _super.prototype.visitReadPropExpr.call(this, ast, context) }, _ReplaceViewTransformer }(ExpressionTransformer), ViewQueryValues = function () { function ViewQueryValues(view, values) { this.view = view, this.values = values } return ViewQueryValues }(), CompileQuery = function () {
        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) { this.meta = meta, this.queryList = queryList, this.ownerDirectiveExpression = ownerDirectiveExpression, this.view = view, this._values = new ViewQueryValues(view, []) } return CompileQuery.prototype.addValue = function (value, view) { for (var currentView = view, elPath = []; isPresent(currentView) && currentView !== this.view;) { var parentEl = currentView.declarationElement; elPath.unshift(parentEl), currentView = parentEl.view } var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view), viewValues = this._values; elPath.forEach(function (el) { var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null; if (last instanceof ViewQueryValues && last.view === el.embeddedView) viewValues = last; else { var newViewValues = new ViewQueryValues(el.embeddedView, []); viewValues.values.push(newViewValues), viewValues = newViewValues } }), viewValues.values.push(value), elPath.length > 0 && view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod("setDirty", []).toStmt()) }, CompileQuery.prototype._isStatic = function () { return !this._values.values.some(function (value) { return value instanceof ViewQueryValues }) }, CompileQuery.prototype.afterChildren = function (targetStaticMethod, targetDynamicMethod) {
            var values = createQueryValues(this._values), updateStmts = [this.queryList.callMethod("reset", [literalArr(values)]).toStmt()]; if (isPresent(this.ownerDirectiveExpression)) { var valueExpr = this.meta.first ? this.queryList.prop("first") : this.queryList; updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt()) } this.meta.first || updateStmts.push(this.queryList.callMethod("notifyOnChanges", []).toStmt()), this.meta.first && this._isStatic() ? targetStaticMethod.addStmts(updateStmts) : targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop("dirty"), updateStmts));
        }, CompileQuery
    }(), ViewTypeEnum = function () { function ViewTypeEnum() { } return ViewTypeEnum.fromValue = function (value) { return createEnumExpression(Identifiers.ViewType, value) }, ViewTypeEnum }(), ViewEncapsulationEnum = function () { function ViewEncapsulationEnum() { } return ViewEncapsulationEnum.fromValue = function (value) { return createEnumExpression(Identifiers.ViewEncapsulation, value) }, ViewEncapsulationEnum }(), ChangeDetectorStatusEnum = function () { function ChangeDetectorStatusEnum() { } return ChangeDetectorStatusEnum.fromValue = function (value) { return createEnumExpression(Identifiers.ChangeDetectorStatus, value) }, ChangeDetectorStatusEnum }(), ViewConstructorVars = function () { function ViewConstructorVars() { } return ViewConstructorVars.viewUtils = variable("viewUtils"), ViewConstructorVars.parentView = variable("parentView"), ViewConstructorVars.parentIndex = variable("parentIndex"), ViewConstructorVars.parentElement = variable("parentElement"), ViewConstructorVars }(), ViewProperties = function () { function ViewProperties() { } return ViewProperties.renderer = THIS_EXPR.prop("renderer"), ViewProperties.viewUtils = THIS_EXPR.prop("viewUtils"), ViewProperties }(), InjectMethodVars$1 = function () { function InjectMethodVars() { } return InjectMethodVars.token = variable("token"), InjectMethodVars.requestNodeIndex = variable("requestNodeIndex"), InjectMethodVars.notFoundResult = variable("notFoundResult"), InjectMethodVars }(), DetectChangesVars = function () { function DetectChangesVars() { } return DetectChangesVars.throwOnChange = variable("throwOnChange"), DetectChangesVars.changes = variable("changes"), DetectChangesVars.changed = variable("changed"), DetectChangesVars }(), ViewClassDependency = function () { function ViewClassDependency(comp, name, placeholder) { this.comp = comp, this.name = name, this.placeholder = placeholder } return ViewClassDependency }(), ComponentFactoryDependency$1 = function () { function ComponentFactoryDependency(comp, placeholder) { this.comp = comp, this.placeholder = placeholder } return ComponentFactoryDependency }(), DirectiveWrapperDependency = function () { function DirectiveWrapperDependency(dir, name, placeholder) { this.dir = dir, this.name = name, this.placeholder = placeholder } return DirectiveWrapperDependency }(), __extends$21 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, CompileNode = function () { function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) { this.parent = parent, this.view = view, this.nodeIndex = nodeIndex, this.renderNode = renderNode, this.sourceAst = sourceAst } return CompileNode.prototype.isNull = function () { return !this.renderNode }, CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view }, CompileNode }(), CompileElement = function (_super) { function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) { var _this = this; _super.call(this, parent, view, nodeIndex, renderNode, sourceAst), this.component = component, this._directives = _directives, this._resolvedProvidersArray = _resolvedProvidersArray, this.hasViewContainer = hasViewContainer, this.hasEmbeddedView = hasEmbeddedView, this.compViewExpr = null, this.instances = new Map, this.directiveWrapperInstance = new Map, this._queryCount = 0, this._queries = new Map, this.contentNodesByNgContentIndex = null, this.referenceTokens = {}, references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value }), this.elementRef = importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]), this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef), this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod("injector", [literal(this.nodeIndex)])), this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop("renderer")), (this.hasViewContainer || this.hasEmbeddedView) && this._createViewContainer(), this.component && this._createComponentFactoryResolver() } return __extends$21(CompileElement, _super), CompileElement.createNull = function () { return new CompileElement(null, null, null, null, null, null, [], [], (!1), (!1), []) }, CompileElement.prototype._createViewContainer = function () { var fieldName = "_vc_" + this.nodeIndex, parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex; this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private])); var statement = THIS_EXPR.prop(fieldName).set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt(); this.view.createMethod.addStmt(statement), this.viewContainer = THIS_EXPR.prop(fieldName), this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer), this.view.viewContainers.push(this.viewContainer) }, CompileElement.prototype._createComponentFactoryResolver = function () { var _this = this, entryComponents = this.component.entryComponents.map(function (entryComponent) { var id = { reference: null }; return _this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent, id)), id }); if (entryComponents && 0 !== entryComponents.length) { var createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent) })), injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), !1)]), provider = { token: createIdentifierToken(Identifiers.ComponentFactoryResolver), useValue: createComponentFactoryResolverExpr }; this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, (!1), (!0), [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan)) } }, CompileElement.prototype.setComponentView = function (compViewExpr) { this.compViewExpr = compViewExpr, this.contentNodesByNgContentIndex = new Array(this.component.template.ngContentSelectors.length); for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) this.contentNodesByNgContentIndex[i] = [] }, CompileElement.prototype.setEmbeddedView = function (embeddedView) { if (this.embeddedView = embeddedView, isPresent(embeddedView)) { var createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([THIS_EXPR, literal(this.nodeIndex), this.renderNode]), provider = { token: createIdentifierToken(Identifiers.TemplateRef), useValue: createTemplateRefExpr }; this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, (!1), (!0), [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan)) } }, CompileElement.prototype.beforeChildren = function () { var _this = this; this.hasViewContainer && this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop("vcRef")), this._resolvedProviders = new Map, this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(tokenReference(provider.token), provider) }), Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) { var isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component || resolvedProvider.providerType === ProviderAstType.Directive, providerValueExpressions = resolvedProvider.providers.map(function (provider) { if (provider.useExisting) return _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }); if (provider.useFactory) { var deps = provider.deps || provider.useFactory.diDeps, depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep) }); return importExpr(provider.useFactory).callFn(depsExpr) } if (provider.useClass) { var deps = provider.deps || provider.useClass.diDeps, depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep) }); if (isDirectiveWrapper) { var directiveWrapperIdentifier = { reference: null }; return _this.view.targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass), directiveWrapperIdentifier)), DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr) } return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass)) } return convertValueToOutputAst(provider.useValue) }), propName = "_" + tokenName(resolvedProvider.token) + "_" + _this.nodeIndex + "_" + _this.instances.size, instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this); isDirectiveWrapper ? (_this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance), _this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance))) : _this.instances.set(tokenReference(resolvedProvider.token), instance) }); for (var _loop_1 = function (i) { var directive = this_1._directives[i], directiveInstance = this_1.instances.get(tokenReference(identifierToken(directive.type))); directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance) }) }, this_1 = this, i = 0; i < this._directives.length; i++) _loop_1(i); var queriesWithReads = []; Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) { var queriesForProvider = _this._getQueriesFor(resolvedProvider.token); queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, resolvedProvider.token) })) }), Object.keys(this.referenceTokens).forEach(function (varName) { var varValue, token = _this.referenceTokens[varName]; varValue = token ? _this.instances.get(tokenReference(token)) : _this.renderNode, _this.view.locals.set(varName, varValue); var varToken = { value: varName }; queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken) })) }), queriesWithReads.forEach(function (queryWithRead) { var value; if (isPresent(queryWithRead.read.identifier)) value = _this.instances.get(tokenReference(queryWithRead.read)); else { var token = _this.referenceTokens[queryWithRead.read.value]; value = isPresent(token) ? _this.instances.get(tokenReference(token)) : _this.elementRef } isPresent(value) && queryWithRead.query.addValue(value, _this.view) }) }, CompileElement.prototype.afterChildren = function (childNodeCount) { var _this = this; Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) { var providerExpr = _this.instances.get(tokenReference(resolvedProvider.token)), providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount; _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr)) }), Array.from(this._queries.values()).forEach(function (queries) { return queries.forEach(function (q) { return q.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod) }) }) }, CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) { this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr) }, CompileElement.prototype.getComponent = function () { return isPresent(this.component) ? this.instances.get(tokenReference(identifierToken(this.component.type))) : null }, CompileElement.prototype.getProviderTokens = function () { return Array.from(this._resolvedProviders.values()).map(function (resolvedProvider) { return createDiTokenExpression(resolvedProvider.token) }) }, CompileElement.prototype._getQueriesFor = function (token) { for (var queries, result = [], currentEl = this, distance = 0; !currentEl.isNull() ;) queries = currentEl._queries.get(tokenReference(token)), isPresent(queries) && result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1 })), currentEl._directives.length > 0 && distance++, currentEl = currentEl.parent; return queries = this.view.componentView.viewQueries.get(tokenReference(token)), isPresent(queries) && result.push.apply(result, queries), result }, CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) { var propName = "_query_" + tokenName(queryMeta.selectors[0]) + "_" + this.nodeIndex + "_" + this._queryCount++, queryList = createQueryList(queryMeta, directiveInstance, propName, this.view), query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view); return addQueryToTokenMap(this._queries, query), query }, CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) { var result = null; if (isPresent(dep.token)) { if (!result && tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) return requestingProviderType === ProviderAstType.Component ? this.compViewExpr.prop("ref") : getPropertyInView(THIS_EXPR.prop("ref"), this.view, this.view.componentView); if (!result) { var resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token)); if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService) return null; result = this.instances.get(tokenReference(dep.token)) } } return result }, CompileElement.prototype._getDependency = function (requestingProviderType, dep) { var currElement = this, result = null; for (dep.isValue && (result = literal(dep.value)), result || dep.isSkipSelf || (result = this._getLocalDependency(requestingProviderType, dep)) ; !result && !currElement.parent.isNull() ;) currElement = currElement.parent, result = currElement._getLocalDependency(ProviderAstType.PublicService, { token: dep.token }); return result || (result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional)), result || (result = NULL_EXPR), getPropertyInView(result, this.view, currElement.view) }, CompileElement }(CompileNode), _QueryWithRead = function () { function _QueryWithRead(query, match) { this.query = query, this.read = query.meta.read || match } return _QueryWithRead }(), CompilePipe = function () { function CompilePipe(view, meta) { var _this = this; this.view = view, this.meta = meta, this._purePipeProxyCount = 0, this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++); var deps = this.meta.type.diDeps.map(function (diDep) { return tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ? getPropertyInView(THIS_EXPR.prop("ref"), _this.view, _this.view.componentView) : injectFromViewParentInjector(view, diDep.token, !1) }); this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type))), this.view.createMethod.resetDebugInfo(null, null), this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt()) } return CompilePipe.call = function (view, name, args) { var pipe, compView = view.componentView, meta = _findPipeMeta(compView, name); return meta.pure ? (pipe = compView.purePipes.get(name), pipe || (pipe = new CompilePipe(compView, meta), compView.purePipes.set(name, pipe), compView.pipes.push(pipe))) : (pipe = new CompilePipe(view, meta), view.pipes.push(pipe)), pipe._call(view, args) }, Object.defineProperty(CompilePipe.prototype, "pure", { get: function () { return this.meta.pure }, enumerable: !0, configurable: !0 }), CompilePipe.prototype._call = function (callingView, args) { if (this.meta.pure) { var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++), pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view); return createPureProxy(pipeInstanceSeenFromPureProxy.prop("transform").callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod }), importExpr(createIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop("transform")]).callFn(args) } return getPropertyInView(this.instance, callingView, this.view).callMethod("transform", args) }, CompilePipe }(), CompileViewRootNodeType = {}; CompileViewRootNodeType.Node = 0, CompileViewRootNodeType.ViewContainer = 1, CompileViewRootNodeType.NgContent = 2, CompileViewRootNodeType[CompileViewRootNodeType.Node] = "Node", CompileViewRootNodeType[CompileViewRootNodeType.ViewContainer] = "ViewContainer", CompileViewRootNodeType[CompileViewRootNodeType.NgContent] = "NgContent"; var CompileViewRootNode = function () { function CompileViewRootNode(type, expr, ngContentIndex) { this.type = type, this.expr = expr, this.ngContentIndex = ngContentIndex } return CompileViewRootNode }(), CompileView = function () { function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) { var _this = this; this.component = component, this.genConfig = genConfig, this.pipeMetas = pipeMetas, this.styles = styles, this.animations = animations, this.viewIndex = viewIndex, this.declarationElement = declarationElement, this.templateVariableBindings = templateVariableBindings, this.targetDependencies = targetDependencies, this.viewChildren = [], this.nodes = [], this.rootNodes = [], this.lastRenderNode = NULL_EXPR, this.viewContainers = [], this.methods = [], this.ctorStmts = [], this.fields = [], this.getters = [], this.disposables = [], this.purePipes = new Map, this.pipes = [], this.locals = new Map, this.literalArrayCount = 0, this.literalMapCount = 0, this.pipeCount = 0, this.createMethod = new CompileMethod(this), this.animationBindingsMethod = new CompileMethod(this), this.injectorGetMethod = new CompileMethod(this), this.updateContentQueriesMethod = new CompileMethod(this), this.dirtyParentQueriesMethod = new CompileMethod(this), this.updateViewQueriesMethod = new CompileMethod(this), this.detectChangesInInputsMethod = new CompileMethod(this), this.detectChangesRenderPropertiesMethod = new CompileMethod(this), this.afterContentLifecycleCallbacksMethod = new CompileMethod(this), this.afterViewLifecycleCallbacksMethod = new CompileMethod(this), this.destroyMethod = new CompileMethod(this), this.detachMethod = new CompileMethod(this), this.viewType = getViewType(component, viewIndex), this.className = getViewClassName(component, viewIndex), this.classType = expressionType(variable(this.className)), this.classExpr = variable(this.className), this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST ? this.componentView = this : this.componentView = this.declarationElement.view.componentView, this.componentContext = getPropertyInView(THIS_EXPR.prop("context"), this, this.componentView); var viewQueries = new Map; if (this.viewType === ViewType.COMPONENT) { var directiveInstance_1 = THIS_EXPR.prop("context"); this.component.viewQueries.forEach(function (queryMeta, queryIndex) { var propName = "_viewQuery_" + tokenName(queryMeta.selectors[0]) + "_" + queryIndex, queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this), query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this); addQueryToTokenMap(viewQueries, query) }) } this.viewQueries = viewQueries, templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop("context").prop(entry[0])) }), this.declarationElement.isNull() || this.declarationElement.setEmbeddedView(this) } return CompileView.prototype.callPipe = function (name, input, args) { return CompilePipe.call(this, name, [input].concat(args)) }, CompileView.prototype.getLocal = function (name) { if (name == EventHandlerVars.event.name) return EventHandlerVars.event; for (var currView = this, result = currView.locals.get(name) ; !result && isPresent(currView.declarationElement.view) ;) currView = currView.declarationElement.view, result = currView.locals.get(name); return isPresent(result) ? getPropertyInView(result, this, currView) : null }, CompileView.prototype.afterNodes = function () { var _this = this; Array.from(this.viewQueries.values()).forEach(function (queries) { return queries.forEach(function (q) { return q.afterChildren(_this.createMethod, _this.updateViewQueriesMethod) }) }) }, CompileView }(), STATE_IS_NEVER_CHECKED = THIS_EXPR.prop("numberOfChecks").identical(new LiteralExpr(0)), ViewBinderVisitor = (not(DetectChangesVars.throwOnChange), function () { function ViewBinderVisitor(view, _schemaRegistry) { this.view = view, this._schemaRegistry = _schemaRegistry, this._nodeIndex = 0 } return ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) { var node = this.view.nodes[this._nodeIndex++]; return bindRenderText(ast, node, this.view), null }, ViewBinderVisitor.prototype.visitText = function (ast, parent) { return this._nodeIndex++, null }, ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null }, ViewBinderVisitor.prototype.visitElement = function (ast, parent) { var _this = this, compileElement = this.view.nodes[this._nodeIndex++], hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, !0); return bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement), ast.directives.forEach(function (directiveAst, dirIndex) { var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference); bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement), bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry) }), templateVisitAll(this, ast.children, compileElement), ast.directives.forEach(function (directiveAst) { var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference), directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference); bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement) }), ast.providers.forEach(function (providerAst) { var providerInstance = compileElement.instances.get(tokenReference(providerAst.token)); bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement) }), null }, ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) { var compileElement = this.view.nodes[this._nodeIndex++]; return bindOutputs(ast.outputs, ast.directives, compileElement, !1), ast.directives.forEach(function (directiveAst, dirIndex) { var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference), directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference); bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement), bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement) }), ast.providers.forEach(function (providerAst) { var providerInstance = compileElement.instances.get(tokenReference(providerAst.token)); bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement) }), bindView(compileElement.embeddedView, ast.children, this._schemaRegistry), null }, ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null }, ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null }, ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) { return null }, ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null }, ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null }, ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null }, ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null }, ViewBinderVisitor }()), IMPLICIT_TEMPLATE_VAR = "$implicit", CLASS_ATTR$1 = "class", STYLE_ATTR = "style", NG_CONTAINER_TAG = "ng-container", parentRenderNodeVar = variable("parentRenderNode"), rootSelectorVar = variable("rootSelector"), ViewBuilderVisitor = function () { function ViewBuilderVisitor(view, targetDependencies) { this.view = view, this.targetDependencies = targetDependencies, this.nestedViewCount = 0 } return ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view }, ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) { var projectedNode = _getOuterContainerOrSelf(node), parent = projectedNode.parent, ngContentIndex = projectedNode.sourceAst.ngContentIndex, viewContainer = node instanceof CompileElement && node.hasViewContainer ? node.viewContainer : null; this._isRootNode(parent) ? this.view.viewType !== ViewType.COMPONENT && this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode)) : isPresent(parent.component) && isPresent(ngContentIndex) && parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode)) }, ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) { return parent = _getOuterContainerParentOrSelf(parent), this._isRootNode(parent) ? this.view.viewType === ViewType.COMPONENT ? parentRenderNodeVar : NULL_EXPR : isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode }, ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () { var view = this.view; if (0 === view.rootNodes.length || view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) { var fieldName = "_el_" + view.nodes.length; view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement))), view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createTemplateAnchor", [NULL_EXPR, NULL_EXPR])).toStmt()), view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName))) } return view.rootNodes[view.rootNodes.length - 1].expr }, ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) { return this._visitText(ast, "", parent) }, ViewBuilderVisitor.prototype.visitText = function (ast, parent) { return this._visitText(ast, ast.value, parent) }, ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) { var fieldName = "_text_" + this.view.nodes.length; this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText))); var renderNode = THIS_EXPR.prop(fieldName), compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast), createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createText", [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt(); return this.view.nodes.push(compileNode), this.view.createMethod.addStmt(createRenderNode), this._addRootNodeAndProject(compileNode), renderNode }, ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) { this.view.createMethod.resetDebugInfo(null, ast); var parentRenderNode = this._getParentRenderNode(parent); return parentRenderNode !== NULL_EXPR ? this.view.createMethod.addStmt(THIS_EXPR.callMethod("projectNodes", [parentRenderNode, literal(ast.index)]).toStmt()) : this._isRootNode(parent) ? this.view.viewType !== ViewType.COMPONENT && this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index)) : isPresent(parent.component) && isPresent(ast.ngContentIndex) && parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index)), null }, ViewBuilderVisitor.prototype.visitElement = function (ast, parent) { var createRenderNodeExpr, nodeIndex = this.view.nodes.length, debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast), directives = ast.directives.map(function (directiveAst) { return directiveAst.directive }), component = directives.find(function (directive) { return directive.isComponent }); if (ast.name === NG_CONTAINER_TAG) createRenderNodeExpr = ViewProperties.renderer.callMethod("createTemplateAnchor", [this._getParentRenderNode(parent), debugContextExpr]); else { var htmlAttrs = _readHtmlAttrs(ast.attrs), attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) { return literal(v) })); createRenderNodeExpr = 0 === nodeIndex && this.view.viewType === ViewType.HOST ? importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar, debugContextExpr]) : importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name), attrNameAndValues, debugContextExpr]) } var fieldName = "_el_" + nodeIndex; this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement))), this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt()); var renderNode = THIS_EXPR.prop(fieldName), compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, (!1), ast.references); this.view.nodes.push(compileElement); var compViewExpr = null; if (isPresent(component)) { var nestedComponentIdentifier = { reference: null }; this.targetDependencies.push(new ViewClassDependency(component.type, getViewClassName(component, 0), nestedComponentIdentifier)), compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex), this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)]))), this.view.viewChildren.push(compViewExpr), compileElement.setComponentView(compViewExpr), this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode])).toStmt()) } return compileElement.beforeChildren(), this._addRootNodeAndProject(compileElement), templateVisitAll(this, ast.children, compileElement), compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1), isPresent(compViewExpr) && this.view.createMethod.addStmt(compViewExpr.callMethod("create", [compileElement.getComponent()]).toStmt()), null }, ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) { var nodeIndex = this.view.nodes.length, fieldName = "_anchor_" + nodeIndex; this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment))), this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createTemplateAnchor", [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt()); var renderNode = THIS_EXPR.prop(fieldName), templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name] }), directives = ast.directives.map(function (directiveAst) { return directiveAst.directive }), compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, (!0), ast.references); this.view.nodes.push(compileElement), this.nestedViewCount++; var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies); return this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies), compileElement.beforeChildren(), this._addRootNodeAndProject(compileElement), compileElement.afterChildren(0), null }, ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null }, ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null }, ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) { return null }, ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null }, ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null }, ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null }, ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null }, ViewBuilderVisitor }(), __decorate$16 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$16 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, ViewCompileResult = function () {
        function ViewCompileResult(statements, viewClassVar, dependencies) { this.statements = statements, this.viewClassVar = viewClassVar, this.dependencies = dependencies } return ViewCompileResult
    }(), ViewCompiler = function () { function ViewCompiler(_genConfig, _schemaRegistry) { this._genConfig = _genConfig, this._schemaRegistry = _schemaRegistry } return ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) { var dependencies = [], view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies), statements = []; return buildView(view, template, dependencies), bindView(view, template, this._schemaRegistry), finishView(view, statements), new ViewCompileResult(statements, view.classExpr.name, dependencies) }, ViewCompiler = __decorate$16([CompilerInjectable(), __metadata$16("design:paramtypes", [CompilerConfig, ElementSchemaRegistry])], ViewCompiler) }(), AnimationEntryCompileResult = function () { function AnimationEntryCompileResult(name, statements, fnExp) { this.name = name, this.statements = statements, this.fnExp = fnExp } return AnimationEntryCompileResult }(), AnimationCompiler = function () { function AnimationCompiler() { } return AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) { return parsedAnimations.map(function (entry) { var factoryName = factoryNamePrefix + "_" + entry.name, visitor = new _AnimationBuilder(entry.name, factoryName); return visitor.build(entry) }) }, AnimationCompiler }(), _ANIMATION_FACTORY_ELEMENT_VAR = variable("element"), _ANIMATION_DEFAULT_STATE_VAR = variable("defaultStateStyles"), _ANIMATION_FACTORY_VIEW_VAR = variable("view"), _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop("animationContext"), _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop("renderer"), _ANIMATION_CURRENT_STATE_VAR = variable("currentState"), _ANIMATION_NEXT_STATE_VAR = variable("nextState"), _ANIMATION_PLAYER_VAR = variable("player"), _ANIMATION_TIME_VAR = variable("totalTime"), _ANIMATION_START_STATE_STYLES_VAR = variable("startStateStyles"), _ANIMATION_END_STATE_STYLES_VAR = variable("endStateStyles"), _ANIMATION_COLLECTED_STYLES = variable("collectedStyles"), _PREVIOUS_ANIMATION_PLAYERS = variable("previousPlayers"), _EMPTY_MAP = literalMap([]), _EMPTY_ARRAY = literalArr([]), _AnimationBuilder = function () { function _AnimationBuilder(animationName, factoryName) { this.animationName = animationName, this._fnVarName = factoryName + "_factory", this._statesMapVarName = factoryName + "_states", this._statesMapVar = variable(this._statesMapVarName) } return _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) { var stylesArr = []; return context.isExpectingFirstStyleStep && (stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR), context.isExpectingFirstStyleStep = !1), ast.styles.forEach(function (entry) { var entries = Object.keys(entry).map(function (key) { return [key, literal(entry[key])] }); stylesArr.push(literalMap(entries, null, !0)) }), importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]) }, _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) { return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([literal(ast.offset), ast.styles.visit(this, context)]) }, _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) { var _this = this; if (context.endStateAnimateStep === ast) return this._visitEndStateAnimation(ast, context); var startingStylesExpr = ast.startingStyles.visit(this, context), keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context) }); return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context) }, _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) { var _this = this, startingStylesExpr = ast.startingStyles.visit(this, context), keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context) }), keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]); return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context) }, _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) { var previousStylesValue = _EMPTY_ARRAY; return context.isExpectingFirstAnimateStep && (previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS, context.isExpectingFirstAnimateStep = !1), context.totalTransitionTime += ast.duration + ast.delay, _ANIMATION_FACTORY_RENDERER_VAR.callMethod("animate", [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing), previousStylesValue]) }, _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) { var _this = this, playerExprs = ast.steps.map(function (step) { return step.visit(_this, context) }); return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([literalArr(playerExprs)]) }, _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) { var _this = this, playerExprs = ast.steps.map(function (step) { return step.visit(_this, context) }); return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([literalArr(playerExprs)]) }, _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) { var flatStyles = {}; _getStylesArray(ast).forEach(function (entry) { Object.keys(entry).forEach(function (key) { flatStyles[key] = entry[key] }) }), context.stateMap.registerState(ast.stateName, flatStyles) }, _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) { var steps = ast.animation.steps, lastStep = steps[steps.length - 1]; _isEndStateAnimateStep(lastStep) && (context.endStateAnimateStep = lastStep), context.totalTransitionTime = 0, context.isExpectingFirstStyleStep = !0, context.isExpectingFirstAnimateStep = !0; var stateChangePreconditions = []; ast.stateChanges.forEach(function (stateChange) { stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState))), stateChange.fromState != ANY_STATE && context.stateMap.registerState(stateChange.fromState), stateChange.toState != ANY_STATE && context.stateMap.registerState(stateChange.toState) }); var animationPlayerExpr = ast.animation.visit(this, context), reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b) }), precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition), animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt(), totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt(); return new IfStmt(precondition, [animationStmt, totalTimeStmt]) }, _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) { var _this = this; ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context) }), context.stateMap.registerState(DEFAULT_STATE, {}); var statements = []; statements.push(_PREVIOUS_ANIMATION_PLAYERS.set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod("getAnimationPlayers", [_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_STATE)).conditional(NULL_EXPR, literal(this.animationName))])).toDeclStmt()), statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt()), statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt()), statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt()), statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt()), statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt()), statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()])), statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt()), statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()])); var RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles)); return ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)) }), statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()])), statements.push(_ANIMATION_PLAYER_VAR.callMethod("onDone", [fn([], [_ANIMATION_PLAYER_VAR.callMethod("destroy", []).toStmt(), RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt()), statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([_PREVIOUS_ANIMATION_PLAYERS]).callMethod("destroy", []).toStmt()), statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(createIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt()), statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod("queueAnimation", [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt()), statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([_ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR]))), fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements, importType(createIdentifier(Identifiers.AnimationTransition))) }, _AnimationBuilder.prototype.build = function (ast) { var context = new _AnimationBuilderContext, fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName), fnVariable = variable(this._fnVarName), lookupMap = []; Object.keys(context.stateMap.states).forEach(function (stateName) { var value = context.stateMap.states[stateName], variableValue = _EMPTY_MAP; if (isPresent(value)) { var styleMap_1 = []; Object.keys(value).forEach(function (key) { styleMap_1.push([key, literal(value[key])]) }), variableValue = literalMap(styleMap_1, null, !0) } lookupMap.push([stateName, variableValue]) }); var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap, null, !0)).toDeclStmt(), statements = [compiledStatesMapStmt, fnStatement]; return new AnimationEntryCompileResult(this.animationName, statements, fnVariable) }, _AnimationBuilder }(), _AnimationBuilderContext = function () { function _AnimationBuilderContext() { this.stateMap = new _AnimationBuilderStateMap, this.endStateAnimateStep = null, this.isExpectingFirstStyleStep = !1, this.isExpectingFirstAnimateStep = !1, this.totalTransitionTime = 0 } return _AnimationBuilderContext }(), _AnimationBuilderStateMap = function () { function _AnimationBuilderStateMap() { this._states = {} } return Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", { get: function () { return this._states }, enumerable: !0, configurable: !0 }), _AnimationBuilderStateMap.prototype.registerState = function (name, value) { void 0 === value && (value = null); var existingEntry = this._states[name]; existingEntry || (this._states[name] = value) }, _AnimationBuilderStateMap }(), GeneratedFile = function () { function GeneratedFile(srcFileUrl, genFileUrl, source) { this.srcFileUrl = srcFileUrl, this.genFileUrl = genFileUrl, this.source = source } return GeneratedFile }(), __extends$23 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/, Serializer = function (_super) { function Serializer(host) { _super.call(this), this.host = host, this.symbols = [], this.indexBySymbol = new Map, this.processedSummaryBySymbol = new Map, this.processedSummaries = [] } return __extends$23(Serializer, _super), Serializer.prototype.addOrMergeSummary = function (summary) { var symbolMeta = summary.metadata; symbolMeta && "class" === symbolMeta.__symbolic && (symbolMeta = { __symbolic: "class", statics: symbolMeta.statics }); var processedSummary = this.processedSummaryBySymbol.get(summary.symbol); processedSummary || (processedSummary = this.processValue({ symbol: summary.symbol }), this.processedSummaries.push(processedSummary), this.processedSummaryBySymbol.set(summary.symbol, processedSummary)), null == processedSummary.metadata && null != symbolMeta && (processedSummary.metadata = this.processValue(symbolMeta)), null == processedSummary.type && null != summary.type && (processedSummary.type = this.processValue(summary.type)) }, Serializer.prototype.serialize = function () { var _this = this; return JSON.stringify({ summaries: this.processedSummaries, symbols: this.symbols.map(function (symbol, index) { return { __symbol: index, name: symbol.name, filePath: _this.host.getOutputFileName(symbol.filePath) } }) }) }, Serializer.prototype.processValue = function (value) { return visitValue(value, this, null) }, Serializer.prototype.visitOther = function (value, context) { if (value instanceof StaticSymbol) { var index = this.indexBySymbol.get(value); return null == index && (index = this.indexBySymbol.size, this.indexBySymbol.set(value, index), this.symbols.push(value)), { __symbol: index } } }, Serializer }(ValueTransformer), Deserializer = function (_super) { function Deserializer(symbolCache) { _super.call(this), this.symbolCache = symbolCache } return __extends$23(Deserializer, _super), Deserializer.prototype.deserialize = function (json) { var _this = this, data = JSON.parse(json); return this.symbols = data.symbols.map(function (serializedSymbol) { return _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name) }), visitValue(data.summaries, this, null) }, Deserializer.prototype.visitStringMap = function (map, context) { return "__symbol" in map ? this.symbols[map.__symbol] : _super.prototype.visitStringMap.call(this, map, context) }, Deserializer }(ValueTransformer), AotCompiler = function () { function AotCompiler(_host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _symbolResolver) { this._host = _host, this._metadataResolver = _metadataResolver, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._dirWrapperCompiler = _dirWrapperCompiler, this._ngModuleCompiler = _ngModuleCompiler, this._outputEmitter = _outputEmitter, this._summaryResolver = _summaryResolver, this._localeId = _localeId, this._translationFormat = _translationFormat, this._animationParser = _animationParser, this._symbolResolver = _symbolResolver, this._animationCompiler = new AnimationCompiler } return AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache() }, AotCompiler.prototype.compileAll = function (rootFiles) { var _this = this, programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host), _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules; return Promise.all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, !1) })).then(function () { var sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables) }); return ListWrapper.flatten(sourceModules) }) }, AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) { var _this = this, fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1], statements = [], exportedVars = [], generatedFiles = []; if (generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables)), exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements) })), exportedVars.push.apply(exportedVars, directives.map(function (directiveType) { return _this._compileDirectiveWrapper(directiveType, statements) })), directives.forEach(function (dirType) { var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType); if (!compMeta.isComponent) return Promise.resolve(null); var ngModule = ngModuleByPipeOrDirective.get(dirType); if (!ngModule) throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!"); _assertComponent(compMeta); var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta); stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) { generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix)) }), exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements)) }), statements.length > 0) { var srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars); generatedFiles.unshift(srcModule) } return generatedFiles }, AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables) { var _this = this, symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl).map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol) }), typeSummaries = ngModules.map(function (ref) { return _this._metadataResolver.getNgModuleSummary(ref) }).concat(directives.map(function (ref) { return _this._metadataResolver.getDirectiveSummary(ref) }), pipes.map(function (ref) { return _this._metadataResolver.getPipeSummary(ref) }), injectables.map(function (ref) { return _this._metadataResolver.getInjectableSummary(ref) })), json = serializeSummaries(this._host, this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries); return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json) }, AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) { var _this = this, ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType), providers = []; this._localeId && providers.push({ token: createIdentifierToken(Identifiers.LOCALE_ID), useValue: this._localeId }), this._translationFormat && providers.push({ token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT), useValue: this._translationFormat }); var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers); return appCompileResult.dependencies.forEach(function (dep) { dep.placeholder.reference = _this._symbolResolver.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dep.comp)), _componentFactoryName(dep.comp)) }), targetStatements.push.apply(targetStatements, appCompileResult.statements), appCompileResult.ngModuleFactoryVar }, AotCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) { var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType), dirCompileResult = this._dirWrapperCompiler.compile(dirMeta); return targetStatements.push.apply(targetStatements, dirCompileResult.statements), dirCompileResult.dirWrapperClassVar }, AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) { var hostMeta = createHostComponentMeta(this._symbolResolver.getStaticSymbol(identifierModuleUrl(compMeta.type), identifierName(compMeta.type) + "_Host"), compMeta), hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements), compFactoryVar = _componentFactoryName(compMeta.type); return targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final])), compFactoryVar }, AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) { var _this = this, parsedAnimations = this._animationParser.parseComponent(compMeta), directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference) }), pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference) }), parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type)), stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]), compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations), viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations); return componentStyles && targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix)), compiledAnimations.forEach(function (entry) { return targetStatements.push.apply(targetStatements, entry.statements) }), targetStatements.push.apply(targetStatements, _resolveViewStatements(this._symbolResolver, viewResult)), viewResult.viewClassVar }, AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) { return _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix), this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]) }, AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) { return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars)) }, AotCompiler }(), StaticAndDynamicReflectionCapabilities = function () { function StaticAndDynamicReflectionCapabilities(staticDelegate) { this.staticDelegate = staticDelegate, this.dynamicDelegate = new ReflectionCapabilities } return StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) { reflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate)) }, StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return !0 }, StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type) }, StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) { return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) : this.dynamicDelegate.hasLifecycleHook(type, lcProperty) }, StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) { return isStaticType(type) ? this.staticDelegate.parameters(type) : this.dynamicDelegate.parameters(type) }, StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) { return isStaticType(type) ? this.staticDelegate.annotations(type) : this.dynamicDelegate.annotations(type) }, StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) { return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) : this.dynamicDelegate.propMetadata(typeOrFunc) }, StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name) }, StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name) }, StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name) }, StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return this.staticDelegate.importUri(type) }, StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return this.staticDelegate.resolveIdentifier(name, moduleUrl) }, StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return isStaticType(enumIdentifier) ? this.staticDelegate.resolveEnum(enumIdentifier, name) : null }, StaticAndDynamicReflectionCapabilities }(), __extends$24 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ANGULAR_IMPORT_LOCATIONS = { coreDecorators: "@angular/core/src/metadata", diDecorators: "@angular/core/src/di/metadata", diMetadata: "@angular/core/src/di/metadata", diOpaqueToken: "@angular/core/src/di/opaque_token", animationMetadata: "@angular/core/src/animation/metadata", provider: "@angular/core/src/di/provider" }, HIDDEN_KEY = /^\$.*\$$/, StaticReflector = function () {
        function StaticReflector(symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) { var _this = this; void 0 === knownMetadataClasses && (knownMetadataClasses = []), void 0 === knownMetadataFunctions && (knownMetadataFunctions = []), this.symbolResolver = symbolResolver, this.errorRecorder = errorRecorder, this.annotationCache = new Map, this.propertyCache = new Map, this.parameterCache = new Map, this.methodCache = new Map, this.conversionMap = new Map, this.initializeConversionMap(), knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor) }), knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn) }) } return StaticReflector.prototype.importUri = function (typeOrFunc) { var staticSymbol = this.findSymbolDeclaration(typeOrFunc); return staticSymbol ? staticSymbol.filePath : null }, StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl) { return this.findDeclaration(moduleUrl, name) }, StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) { return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile)) }, StaticReflector.prototype.findSymbolDeclaration = function (symbol) { var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol); return resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol ? this.findSymbolDeclaration(resolvedSymbol.metadata) : symbol }, StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) { var staticSymbol = enumIdentifier; return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, [name]) }, StaticReflector.prototype.annotations = function (type) { var annotations = this.annotationCache.get(type); if (!annotations) { annotations = []; var classMetadata = this.getTypeMetadata(type); if (classMetadata.extends) { var parentAnnotations = this.annotations(this.simplify(type, classMetadata.extends)); annotations.push.apply(annotations, parentAnnotations) } if (classMetadata.decorators) { var ownAnnotations = this.simplify(type, classMetadata.decorators); annotations.push.apply(annotations, ownAnnotations) } this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann })) } return annotations }, StaticReflector.prototype.propMetadata = function (type) { var _this = this, propMetadata = this.propertyCache.get(type); if (!propMetadata) { var classMetadata = this.getTypeMetadata(type); if (propMetadata = {}, classMetadata.extends) { var parentPropMetadata_1 = this.propMetadata(this.simplify(type, classMetadata.extends)); Object.keys(parentPropMetadata_1).forEach(function (parentProp) { propMetadata[parentProp] = parentPropMetadata_1[parentProp] }) } var members_1 = classMetadata.members || {}; Object.keys(members_1).forEach(function (propName) { var propData = members_1[propName], prop = propData.find(function (a) { return "property" == a.__symbolic || "method" == a.__symbolic }), decorators = []; propMetadata[propName] && decorators.push.apply(decorators, propMetadata[propName]), propMetadata[propName] = decorators, prop && prop.decorators && decorators.push.apply(decorators, _this.simplify(type, prop.decorators)) }), this.propertyCache.set(type, propMetadata) } return propMetadata }, StaticReflector.prototype.parameters = function (type) { if (!(type instanceof StaticSymbol)) return this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type), []; try { var parameters_1 = this.parameterCache.get(type); if (!parameters_1) { var classMetadata = this.getTypeMetadata(type), members = classMetadata ? classMetadata.members : null, ctorData = members ? members.__ctor__ : null; if (ctorData) { var ctor = ctorData.find(function (a) { return "constructor" == a.__symbolic }), parameterTypes = this.simplify(type, ctor.parameters || []), parameterDecorators_1 = this.simplify(type, ctor.parameterDecorators || []); parameters_1 = [], parameterTypes.forEach(function (paramType, index) { var nestedResult = []; paramType && nestedResult.push(paramType); var decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null; decorators && nestedResult.push.apply(nestedResult, decorators), parameters_1.push(nestedResult) }) } else classMetadata.extends && (parameters_1 = this.parameters(this.simplify(type, classMetadata.extends))); parameters_1 || (parameters_1 = []), this.parameterCache.set(type, parameters_1) } return parameters_1 } catch (e) { throw console.error("Failed on type " + JSON.stringify(type) + " with error " + e), e } }, StaticReflector.prototype._methodNames = function (type) { var methodNames = this.methodCache.get(type); if (!methodNames) { var classMetadata = this.getTypeMetadata(type); if (methodNames = {}, classMetadata.extends) { var parentMethodNames_1 = this._methodNames(this.simplify(type, classMetadata.extends)); Object.keys(parentMethodNames_1).forEach(function (parentProp) { methodNames[parentProp] = parentMethodNames_1[parentProp] }) } var members_2 = classMetadata.members || {}; Object.keys(members_2).forEach(function (propName) { var propData = members_2[propName], isMethod = propData.some(function (a) { return "method" == a.__symbolic }); methodNames[propName] = methodNames[propName] || isMethod }), this.methodCache.set(type, methodNames) } return methodNames }, StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) { type instanceof StaticSymbol || this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type); try { return !!this._methodNames(type)[lcProperty] } catch (e) { throw console.error("Failed on type " + JSON.stringify(type) + " with error " + e), e } }, StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) { this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args))) }) }, StaticReflector.prototype._registerFunction = function (type, fn) { this.conversionMap.set(type, function (context, args) { return fn.apply(void 0, args) }) }, StaticReflector.prototype.initializeConversionMap = function () {
            var coreDecorators = ANGULAR_IMPORT_LOCATIONS.coreDecorators, diDecorators = ANGULAR_IMPORT_LOCATIONS.diDecorators, diMetadata = ANGULAR_IMPORT_LOCATIONS.diMetadata, diOpaqueToken = ANGULAR_IMPORT_LOCATIONS.diOpaqueToken, animationMetadata = ANGULAR_IMPORT_LOCATIONS.animationMetadata; ANGULAR_IMPORT_LOCATIONS.provider; this.opaqueToken = this.findDeclaration(diOpaqueToken, "OpaqueToken"), this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, "Host"), _angular_core.Host), this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, "Injectable"), _angular_core.Injectable), this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, "Self"), _angular_core.Self), this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, "SkipSelf"), _angular_core.SkipSelf), this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, "Inject"), _angular_core.Inject), this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, "Optional"), _angular_core.Optional), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "Attribute"), _angular_core.Attribute), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "ContentChild"), _angular_core.ContentChild), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "ContentChildren"), _angular_core.ContentChildren), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "ViewChild"), _angular_core.ViewChild),
            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "ViewChildren"), _angular_core.ViewChildren), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "Input"), _angular_core.Input), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "Output"), _angular_core.Output), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "Pipe"), _angular_core.Pipe), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "HostBinding"), _angular_core.HostBinding), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "HostListener"), _angular_core.HostListener), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "Directive"), _angular_core.Directive), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "Component"), _angular_core.Component), this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, "NgModule"), _angular_core.NgModule), this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, "Host"), _angular_core.Host), this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, "Self"), _angular_core.Self), this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, "SkipSelf"), _angular_core.SkipSelf), this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, "Optional"), _angular_core.Optional), this._registerFunction(this.findDeclaration(animationMetadata, "trigger"), _angular_core.trigger), this._registerFunction(this.findDeclaration(animationMetadata, "state"), _angular_core.state), this._registerFunction(this.findDeclaration(animationMetadata, "transition"), _angular_core.transition), this._registerFunction(this.findDeclaration(animationMetadata, "style"), _angular_core.style), this._registerFunction(this.findDeclaration(animationMetadata, "animate"), _angular_core.animate), this._registerFunction(this.findDeclaration(animationMetadata, "keyframes"), _angular_core.keyframes), this._registerFunction(this.findDeclaration(animationMetadata, "sequence"), _angular_core.sequence), this._registerFunction(this.findDeclaration(animationMetadata, "group"), _angular_core.group)
        }, StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) { return this.symbolResolver.getStaticSymbol(declarationFile, name, members) }, StaticReflector.prototype.reportError = function (error, context, path) { if (!this.errorRecorder) throw error; this.errorRecorder(error, context && context.filePath || path) }, StaticReflector.prototype.simplify = function (context, value) { function simplifyInContext(context, value, depth) { function resolveReferenceValue(staticSymbol) { var resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol); return resolvedSymbol ? resolvedSymbol.metadata : null } function simplifyCall(functionSymbol, targetFunction, args) { if (targetFunction && "function" == targetFunction.__symbolic) { if (calling.get(functionSymbol)) throw new Error("Recursion not supported"); calling.set(functionSymbol, !0); try { var value_1 = targetFunction.value; if (value_1 && (0 != depth || "error" != value_1.__symbolic)) { var parameters = targetFunction.parameters, defaults = targetFunction.defaults; defaults && defaults.length > args.length && args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value) })); for (var functionScope = BindingScope.build(), i = 0; i < parameters.length; i++) functionScope.define(parameters[i], args[i]); var result_1, oldScope = scope; try { scope = functionScope.done(), result_1 = simplifyInContext(functionSymbol, value_1, depth + 1) } finally { scope = oldScope } return result_1 } } finally { calling.delete(functionSymbol) } } return 0 === depth ? { __symbolic: "ignore" } : simplify({ __symbolic: "error", message: "Function call not supported", context: functionSymbol }) } function simplify(expression) { if (isPrimitive$1(expression)) return expression; if (expression instanceof Array) { for (var result_2 = [], _i = 0, _a = expression; _i < _a.length; _i++) { var item = _a[_i]; if (item && "spread" === item.__symbolic) { var spreadArray = simplify(item.expression); if (Array.isArray(spreadArray)) { for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) { var spreadItem = spreadArray_1[_b]; result_2.push(spreadItem) } continue } } var value_2 = simplify(item); shouldIgnore(value_2) || result_2.push(value_2) } return result_2 } if (expression instanceof StaticSymbol) { if (expression === self.opaqueToken || self.conversionMap.has(expression)) return expression; var staticSymbol = expression, declarationValue = resolveReferenceValue(staticSymbol); return declarationValue ? simplifyInContext(staticSymbol, declarationValue, depth + 1) : staticSymbol } if (expression) { if (expression.__symbolic) { var staticSymbol = void 0; switch (expression.__symbolic) { case "binop": var left = simplify(expression.left); if (shouldIgnore(left)) return left; var right = simplify(expression.right); if (shouldIgnore(right)) return right; switch (expression.operator) { case "&&": return left && right; case "||": return left || right; case "|": return left | right; case "^": return left ^ right; case "&": return left & right; case "==": return left == right; case "!=": return left != right; case "===": return left === right; case "!==": return left !== right; case "<": return left < right; case ">": return left > right; case "<=": return left <= right; case ">=": return left >= right; case "<<": return left << right; case ">>": return left >> right; case "+": return left + right; case "-": return left - right; case "*": return left * right; case "/": return left / right; case "%": return left % right } return null; case "if": var condition = simplify(expression.condition); return simplify(condition ? expression.thenExpression : expression.elseExpression); case "pre": var operand = simplify(expression.operand); if (shouldIgnore(operand)) return operand; switch (expression.operator) { case "+": return operand; case "-": return -operand; case "!": return !operand; case "~": return ~operand } return null; case "index": var indexTarget = simplify(expression.expression), index = simplify(expression.index); return indexTarget && isPrimitive$1(index) ? indexTarget[index] : null; case "select": var member = expression.member, selectContext = context, selectTarget = simplify(expression.expression); if (selectTarget instanceof StaticSymbol) { var members = selectTarget.members.concat(member); selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members); var declarationValue = resolveReferenceValue(selectContext); return declarationValue ? simplifyInContext(selectContext, declarationValue, depth + 1) : selectContext } return selectTarget && isPrimitive$1(member) ? simplifyInContext(selectContext, selectTarget[member], depth + 1) : null; case "reference": var name_1 = expression.name, localValue = scope.resolve(name_1); if (localValue != BindingScope.missing) return localValue; break; case "class": return context; case "function": return context; case "new": case "call": if (staticSymbol = simplifyInContext(context, expression.expression, depth + 1), staticSymbol instanceof StaticSymbol) { if (staticSymbol === self.opaqueToken) return context; var argExpressions = expression.arguments || [], args = argExpressions.map(function (arg) { return simplifyInContext(context, arg, depth + 1) }), converter = self.conversionMap.get(staticSymbol); if (converter) return converter(context, args); var targetFunction = resolveReferenceValue(staticSymbol); return simplifyCall(staticSymbol, targetFunction, args) } break; case "error": var message = produceErrorMessage(expression); if (expression.line) throw message = message + " (position " + (expression.line + 1) + ":" + (expression.character + 1) + " in the original .ts file)", positionalError(message, context.filePath, expression.line, expression.character); throw new Error(message) } return null } return mapStringMap(expression, function (value, name) { return simplify(value) }) } return null } try { return simplify(value) } catch (e) { var members = context.members.length ? "." + context.members.join(".") : "", message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath; if (e.fileName) throw positionalError(message, e.fileName, e.line, e.column); throw new Error(message) } } var _this = this, self = this, scope = BindingScope.empty, calling = new Map, recordedSimplifyInContext = function (context, value, depth) { try { return simplifyInContext(context, value, depth) } catch (e) { _this.reportError(e, context) } }, result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) : simplifyInContext(context, value, 0); if (!shouldIgnore(result)) return result }, StaticReflector.prototype.getTypeMetadata = function (type) { var resolvedSymbol = this.symbolResolver.resolveSymbol(type); return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : { __symbolic: "class" } }, StaticReflector
    }(), BindingScope = function () { function BindingScope() { } return BindingScope.prototype.resolve = function (name) { }, BindingScope.build = function () { var current = new Map; return { define: function (name, value) { return current.set(name, value), this }, done: function () { return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty } } }, BindingScope.missing = {}, BindingScope.empty = { resolve: function (name) { return BindingScope.missing } }, BindingScope }(), PopulatedScope = function (_super) { function PopulatedScope(bindings) { _super.call(this), this.bindings = bindings } return __extends$24(PopulatedScope, _super), PopulatedScope.prototype.resolve = function (name) { return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing }, PopulatedScope }(BindingScope), __extends$25 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ResolvedStaticSymbol = function () { function ResolvedStaticSymbol(symbol, metadata) { this.symbol = symbol, this.metadata = metadata } return ResolvedStaticSymbol }(), SUPPORTED_SCHEMA_VERSION = 3, StaticSymbolResolver = function () { function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) { this.host = host, this.staticSymbolCache = staticSymbolCache, this.summaryResolver = summaryResolver, this.errorRecorder = errorRecorder, this.metadataCache = new Map, this.resolvedSymbols = new Map, this.resolvedFilePaths = new Set } return StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) { if (staticSymbol.members.length > 0) return this._resolveSymbolMembers(staticSymbol); var result = this._resolveSymbolFromSummary(staticSymbol); return result || (this._createSymbolsOf(staticSymbol.filePath), result = this.resolvedSymbols.get(staticSymbol)), result }, StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) { var members = staticSymbol.members, baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name)); if (!baseResolvedSymbol) return null; var baseMetadata = baseResolvedSymbol.metadata; if (baseMetadata instanceof StaticSymbol) return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members)); if (!baseMetadata || "class" !== baseMetadata.__symbolic) { for (var value = baseMetadata, i = 0; i < members.length && value; i++) value = value[members[i]]; return new ResolvedStaticSymbol(staticSymbol, value) } return baseMetadata.statics && 1 === members.length ? new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]) : null }, StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) { var summary = this.summaryResolver.resolveSummary(staticSymbol); return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null }, StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) { return this.staticSymbolCache.get(declarationFile, name, members) }, StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) { var symbols = new Set(this.summaryResolver.getSymbolsOf(filePath)); return this._createSymbolsOf(filePath), this.resolvedSymbols.forEach(function (resolvedSymbol) { resolvedSymbol.symbol.filePath === filePath && symbols.add(resolvedSymbol.symbol) }), Array.from(symbols) }, StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) { var _this = this; if (!this.resolvedFilePaths.has(filePath)) { this.resolvedFilePaths.add(filePath); var resolvedSymbols = [], metadata = this.getModuleMetadata(filePath); if (metadata.metadata && Object.keys(metadata.metadata).forEach(function (symbolName) { var symbolMeta = metadata.metadata[symbolName]; resolvedSymbols.push(_this.createResolvedSymbol(_this.getStaticSymbol(filePath, symbolName), symbolMeta)) }), metadata.exports) for (var _loop_1 = function (moduleExport) { if (moduleExport.export) moduleExport.export.forEach(function (exportSymbol) { var symbolName; symbolName = "string" == typeof exportSymbol ? exportSymbol : exportSymbol.as; var symName = symbolName; "string" != typeof exportSymbol && (symName = exportSymbol.name); var resolvedModule = _this.resolveModule(moduleExport.from, filePath); if (resolvedModule) { var targetSymbol = _this.getStaticSymbol(resolvedModule, symName), sourceSymbol = _this.getStaticSymbol(filePath, symbolName); resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol)) } }); else { var resolvedModule = this_1.resolveModule(moduleExport.from, filePath); if (resolvedModule) { var nestedExports = this_1.getSymbolsOf(resolvedModule); nestedExports.forEach(function (targetSymbol) { var sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name); resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol)) }) } } }, this_1 = this, _i = 0, _a = metadata.exports; _i < _a.length; _i++) { var moduleExport = _a[_i]; _loop_1(moduleExport) } resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol) }) } }, StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, metadata) { var self = this, ReferenceTransformer = function (_super) { function ReferenceTransformer() { _super.apply(this, arguments) } return __extends$25(ReferenceTransformer, _super), ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) { var symbolic = map.__symbolic; if ("function" === symbolic) { var oldLen = functionParams.length; functionParams.push.apply(functionParams, map.parameters || []); var result = _super.prototype.visitStringMap.call(this, map, functionParams); return functionParams.length = oldLen, result } if ("reference" === symbolic) { var module_1 = map.module, name_1 = map.name; if (!name_1) return null; var filePath = void 0; if (module_1) { if (filePath = self.resolveModule(module_1, sourceSymbol.filePath), !filePath) return { __symbolic: "error", message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "." } } else { var isFunctionParam = functionParams.indexOf(name_1) >= 0; isFunctionParam || (filePath = sourceSymbol.filePath) } return filePath ? self.getStaticSymbol(filePath, name_1) : { __symbolic: "reference", name: name_1 } } return _super.prototype.visitStringMap.call(this, map, functionParams) }, ReferenceTransformer }(ValueTransformer), transformedMeta = visitValue(metadata, new ReferenceTransformer, []); return new ResolvedStaticSymbol(sourceSymbol, transformedMeta) }, StaticSymbolResolver.prototype.reportError = function (error, context, path) { if (!this.errorRecorder) throw error; this.errorRecorder(error, context && context.filePath || path) }, StaticSymbolResolver.prototype.getModuleMetadata = function (module) { var moduleMetadata = this.metadataCache.get(module); if (!moduleMetadata) { var moduleMetadatas = this.host.getMetadataFor(module); if (moduleMetadatas) { var maxVersion_1 = -1; moduleMetadatas.forEach(function (md) { md.version > maxVersion_1 && (maxVersion_1 = md.version, moduleMetadata = md) }) } if (moduleMetadata || (moduleMetadata = { __symbolic: "module", version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} }), moduleMetadata.version != SUPPORTED_SCHEMA_VERSION) { var errorMessage = 2 == moduleMetadata.version ? "Unsupported metadata version " + moduleMetadata.version + " for module " + module + ". This module should be compiled with a newer version of ngc" : "Metadata version mismatch for module " + module + ", found version " + moduleMetadata.version + ", expected " + SUPPORTED_SCHEMA_VERSION; this.reportError(new Error(errorMessage), null) } this.metadataCache.set(module, moduleMetadata) } return moduleMetadata }, StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) { var filePath = this.resolveModule(module, containingFile); if (!filePath) throw new Error("Could not resolve module " + module + " relative to " + containingFile); return this.getStaticSymbol(filePath, symbolName) }, StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) { try { return this.host.moduleNameToFileName(module, containingFile) } catch (e) { console.error("Could not resolve module '" + module + "' relative to file " + containingFile), this.reportError(new e, null, containingFile) } }, StaticSymbolResolver }(), AotSummaryResolver = function () { function AotSummaryResolver(host, staticSymbolCache) { this.host = host, this.staticSymbolCache = staticSymbolCache, this.summaryCache = new Map, this.loadedFilePaths = new Set } return AotSummaryResolver.prototype._assertNoMembers = function (symbol) { if (symbol.members.length) throw new Error("Internal state: StaticSymbols in summaries can't have members! " + JSON.stringify(symbol)) }, AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) { this._assertNoMembers(staticSymbol); var summary = this.summaryCache.get(staticSymbol); return summary || (this._loadSummaryFile(staticSymbol.filePath), summary = this.summaryCache.get(staticSymbol)), summary }, AotSummaryResolver.prototype.getSymbolsOf = function (filePath) { return this._loadSummaryFile(filePath), Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath }) }, AotSummaryResolver.prototype._loadSummaryFile = function (filePath) { var _this = this; if (!this.loadedFilePaths.has(filePath) && (this.loadedFilePaths.add(filePath), !this.host.isSourceFile(filePath))) { var summaryFilePath = summaryFileName(filePath), json = void 0; try { json = this.host.loadSummary(summaryFilePath) } catch (e) { throw console.error("Error loading summary file " + summaryFilePath), e } if (json) { var readSummaries = deserializeSummaries(this.staticSymbolCache, json); readSummaries.forEach(function (summary) { _this.summaryCache.set(summary.symbol, summary) }) } } }, AotSummaryResolver }(), _ExecutionContext = function () { function _ExecutionContext(parent, instance, className, vars) { this.parent = parent, this.instance = instance, this.className = className, this.vars = vars } return _ExecutionContext.prototype.createChildWihtLocalVars = function () { return new _ExecutionContext(this, this.instance, this.className, new Map) }, _ExecutionContext }(), ReturnValue = function () { function ReturnValue(value) { this.value = value } return ReturnValue }(), StatementInterpreter = function () { function StatementInterpreter() { } return StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast) }, StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) { return ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx)), null }, StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) { for (var value = expr.value.visitExpression(this, ctx), currCtx = ctx; null != currCtx;) { if (currCtx.vars.has(expr.name)) return currCtx.vars.set(expr.name, value), value; currCtx = currCtx.parent } throw new Error("Not declared variable " + expr.name) }, StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) { var varName = ast.name; if (isPresent(ast.builtin)) switch (ast.builtin) { case BuiltinVar.Super: return ctx.instance.__proto__; case BuiltinVar.This: return ctx.instance; case BuiltinVar.CatchError: varName = CATCH_ERROR_VAR$2; break; case BuiltinVar.CatchStack: varName = CATCH_STACK_VAR$2; break; default: throw new Error("Unknown builtin variable " + ast.builtin) } for (var currCtx = ctx; null != currCtx;) { if (currCtx.vars.has(varName)) return currCtx.vars.get(varName); currCtx = currCtx.parent } throw new Error("Not declared variable " + varName) }, StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) { var receiver = expr.receiver.visitExpression(this, ctx), index = expr.index.visitExpression(this, ctx), value = expr.value.visitExpression(this, ctx); return receiver[index] = value, value }, StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) { var receiver = expr.receiver.visitExpression(this, ctx), value = expr.value.visitExpression(this, ctx); return receiver[expr.name] = value, value }, StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) { var result, receiver = expr.receiver.visitExpression(this, ctx), args = this.visitAllExpressions(expr.args, ctx); if (isPresent(expr.builtin)) switch (expr.builtin) { case BuiltinMethod.ConcatArray: result = receiver.concat.apply(receiver, args); break; case BuiltinMethod.SubscribeObservable: result = receiver.subscribe({ next: args[0] }); break; case BuiltinMethod.Bind: result = receiver.bind.apply(receiver, args); break; default: throw new Error("Unknown builtin method " + expr.builtin) } else result = receiver[expr.name].apply(receiver, args); return result }, StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) { var args = this.visitAllExpressions(stmt.args, ctx), fnExpr = stmt.fn; if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) return ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args), null; var fn = stmt.fn.visitExpression(this, ctx); return fn.apply(null, args) }, StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) { return new ReturnValue(stmt.value.visitExpression(this, ctx)) }, StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) { var clazz = createDynamicClass(stmt, ctx, this); return ctx.vars.set(stmt.name, clazz), null }, StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) { return stmt.expr.visitExpression(this, ctx) }, StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) { var condition = stmt.condition.visitExpression(this, ctx); return condition ? this.visitAllStatements(stmt.trueCase, ctx) : isPresent(stmt.falseCase) ? this.visitAllStatements(stmt.falseCase, ctx) : null }, StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) { try { return this.visitAllStatements(stmt.bodyStmts, ctx) } catch (e) { var childCtx = ctx.createChildWihtLocalVars(); return childCtx.vars.set(CATCH_ERROR_VAR$2, e), childCtx.vars.set(CATCH_STACK_VAR$2, e.stack), this.visitAllStatements(stmt.catchStmts, childCtx) } }, StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) { throw stmt.error.visitExpression(this, ctx) }, StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null }, StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) { var args = this.visitAllExpressions(ast.args, ctx), clazz = ast.classExpr.visitExpression(this, ctx); return new (clazz.bind.apply(clazz, [void 0].concat(args))) }, StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value }, StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) { return ast.value.reference }, StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) { return ast.condition.visitExpression(this, ctx) ? ast.trueCase.visitExpression(this, ctx) : isPresent(ast.falseCase) ? ast.falseCase.visitExpression(this, ctx) : null }, StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) { return !ast.condition.visitExpression(this, ctx) }, StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) { return ast.value.visitExpression(this, ctx) }, StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) { var paramNames = ast.params.map(function (param) { return param.name }); return _declareFn(paramNames, ast.statements, ctx, this) }, StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) { var paramNames = stmt.params.map(function (param) { return param.name }); return ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this)), null }, StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) { var _this = this, lhs = function () { return ast.lhs.visitExpression(_this, ctx) }, rhs = function () { return ast.rhs.visitExpression(_this, ctx) }; switch (ast.operator) { case BinaryOperator.Equals: return lhs() == rhs(); case BinaryOperator.Identical: return lhs() === rhs(); case BinaryOperator.NotEquals: return lhs() != rhs(); case BinaryOperator.NotIdentical: return lhs() !== rhs(); case BinaryOperator.And: return lhs() && rhs(); case BinaryOperator.Or: return lhs() || rhs(); case BinaryOperator.Plus: return lhs() + rhs(); case BinaryOperator.Minus: return lhs() - rhs(); case BinaryOperator.Divide: return lhs() / rhs(); case BinaryOperator.Multiply: return lhs() * rhs(); case BinaryOperator.Modulo: return lhs() % rhs(); case BinaryOperator.Lower: return lhs() < rhs(); case BinaryOperator.LowerEquals: return lhs() <= rhs(); case BinaryOperator.Bigger: return lhs() > rhs(); case BinaryOperator.BiggerEquals: return lhs() >= rhs(); default: throw new Error("Unknown operator " + ast.operator) } }, StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) { var result, receiver = ast.receiver.visitExpression(this, ctx); return result = receiver[ast.name] }, StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) { var receiver = ast.receiver.visitExpression(this, ctx), prop = ast.index.visitExpression(this, ctx); return receiver[prop] }, StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) { return this.visitAllExpressions(ast.entries, ctx) }, StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) { var _this = this, result = {}; return ast.entries.forEach(function (entry) { return result[entry.key] = entry.value.visitExpression(_this, ctx) }), result }, StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) { var _this = this; return expressions.map(function (expr) { return expr.visitExpression(_this, ctx) }) }, StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) { for (var i = 0; i < statements.length; i++) { var stmt = statements[i], val = stmt.visitStatement(this, ctx); if (val instanceof ReturnValue) return val } return null }, StatementInterpreter }(), CATCH_ERROR_VAR$2 = "error", CATCH_STACK_VAR$2 = "stack", __extends$27 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, AbstractJsEmitterVisitor = function (_super) { function AbstractJsEmitterVisitor() { _super.call(this, !1) } return __extends$27(AbstractJsEmitterVisitor, _super), AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { var _this = this; return ctx.pushClass(stmt), this._visitClassConstructor(stmt, ctx), isPresent(stmt.parent) && (ctx.print(stmt.name + ".prototype = Object.create("), stmt.parent.visitExpression(this, ctx), ctx.println(".prototype);")), stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx) }), stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx) }), ctx.popClass(), null }, AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) { ctx.print("function " + stmt.name + "("), isPresent(stmt.constructorMethod) && this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(") {"), ctx.incIndent(), isPresent(stmt.constructorMethod) && stmt.constructorMethod.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(stmt.constructorMethod.body, ctx)), ctx.decIndent(), ctx.println("}") }, AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) { ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {"), ctx.incIndent(), getter.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(getter.body, ctx)), ctx.decIndent(), ctx.println("}});") }, AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) { ctx.print(stmt.name + ".prototype." + method.name + " = function("), this._visitParams(method.params, ctx), ctx.println(") {"), ctx.incIndent(), method.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(method.body, ctx)), ctx.decIndent(), ctx.println("};") }, AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) { if (ast.builtin === BuiltinVar.This) ctx.print("self"); else { if (ast.builtin === BuiltinVar.Super) throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!"); _super.prototype.visitReadVarExpr.call(this, ast, ctx) } return null }, AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { return ctx.print("var " + stmt.name + " = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null }, AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) { return ast.value.visitExpression(this, ctx), null }, AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) { var fnExpr = expr.fn; return fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super ? (ctx.currentClass.parent.visitExpression(this, ctx), ctx.print(".call(this"), expr.args.length > 0 && (ctx.print(", "), this.visitAllExpressions(expr.args, ctx, ",")), ctx.print(")")) : _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx), null }, AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { return ctx.print("function("), this._visitParams(ast.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null }, AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) { return ctx.print("function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null }, AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {"), ctx.incIndent(); var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts); return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null }, AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) { this.visitAllObjects(function (param) { return ctx.print(param.name) }, params, ctx, ",") }, AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) { var name; switch (method) { case BuiltinMethod.ConcatArray: name = "concat"; break; case BuiltinMethod.SubscribeObservable: name = "subscribe"; break; case BuiltinMethod.Bind: name = "bind"; break; default: throw new Error("Unknown builtin method: " + method) } return name }, AbstractJsEmitterVisitor }(AbstractEmitterVisitor), __extends$26 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, JitEmitterVisitor = function (_super) { function JitEmitterVisitor() { _super.apply(this, arguments), this._evalArgNames = [], this._evalArgValues = [] } return __extends$26(JitEmitterVisitor, _super), JitEmitterVisitor.prototype.getArgs = function () { for (var result = {}, i = 0; i < this._evalArgNames.length; i++) result[this._evalArgNames[i]] = this._evalArgValues[i]; return result }, JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { var value = ast.value.reference, id = this._evalArgValues.indexOf(value); if (id === -1) { id = this._evalArgValues.length, this._evalArgValues.push(value); var name_1 = identifierName(ast.value) || "val"; this._evalArgNames.push("jit_" + name_1 + id) } return ctx.print(this._evalArgNames[id]), null }, JitEmitterVisitor }(AbstractJsEmitterVisitor), __decorate$17 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$17 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, JitCompiler = function () {
        function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
            this._injector = _injector, this._metadataResolver = _metadataResolver, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._ngModuleCompiler = _ngModuleCompiler, this._directiveWrapperCompiler = _directiveWrapperCompiler, this._compilerConfig = _compilerConfig, this._animationParser = _animationParser, this._compiledTemplateCache = new Map, this._compiledHostTemplateCache = new Map, this._compiledDirectiveWrapperCache = new Map, this._compiledNgModuleCache = new Map,
            this._animationCompiler = new AnimationCompiler
        } return Object.defineProperty(JitCompiler.prototype, "injector", { get: function () { return this._injector }, enumerable: !0, configurable: !0 }), JitCompiler.prototype.compileModuleSync = function (moduleType) { return this._compileModuleAndComponents(moduleType, !0).syncResult }, JitCompiler.prototype.compileModuleAsync = function (moduleType) { return this._compileModuleAndComponents(moduleType, !1).asyncResult }, JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) { return this._compileModuleAndAllComponents(moduleType, !0).syncResult }, JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) { return this._compileModuleAndAllComponents(moduleType, !1).asyncResult }, JitCompiler.prototype.getNgContentSelectors = function (component) { var template = this._compiledTemplateCache.get(component); if (!template) throw new Error("The component " + stringify(component) + " is not yet compiled!"); return template.compMeta.template.ngContentSelectors }, JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) { var _this = this, loadingPromise = this._loadModules(moduleType, isSync), createResult = function () { return _this._compileComponents(moduleType, null), _this._compileModule(moduleType) }; return isSync ? new SyncAsyncResult(createResult()) : new SyncAsyncResult(null, loadingPromise.then(createResult)) }, JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) { var _this = this, loadingPromise = this._loadModules(moduleType, isSync), createResult = function () { var componentFactories = []; return _this._compileComponents(moduleType, componentFactories), new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories) }; return isSync ? new SyncAsyncResult(createResult()) : new SyncAsyncResult(null, loadingPromise.then(createResult)) }, JitCompiler.prototype._loadModules = function (mainModule, isSync) { var _this = this, loadingPromises = [], ngModule = this._metadataResolver.getNgModuleMetadata(mainModule); return ngModule.transitiveModule.modules.forEach(function (localModuleMeta) { loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync)) }), Promise.all(loadingPromises) }, JitCompiler.prototype._compileModule = function (moduleType) { var _this = this, ngModuleFactory = this._compiledNgModuleCache.get(moduleType); if (!ngModuleFactory) { var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType), extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference) } }))], compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders); compileResult.dependencies.forEach(function (dep) { dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, !0).proxyComponentFactory }), ngModuleFactory = this._compilerConfig.useJit ? jitStatements("/" + identifierName(moduleMeta_1.type) + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar) : interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar), this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory) } return ngModuleFactory }, JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) { var _this = this, ngModule = this._metadataResolver.getNgModuleMetadata(mainModule), moduleByDirective = new Map, templates = new Set; ngModule.transitiveModule.modules.forEach(function (localModuleSummary) { var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference); localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) { moduleByDirective.set(dirIdentifier.reference, localModuleMeta); var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference); if (_this._compileDirectiveWrapper(dirMeta, localModuleMeta), dirMeta.isComponent && (templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta)), allComponentFactories)) { var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta); templates.add(template), allComponentFactories.push(template.proxyComponentFactory) } }) }), ngModule.transitiveModule.modules.forEach(function (localModuleSummary) { var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference); localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) { var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference); dirMeta.isComponent && dirMeta.entryComponents.forEach(function (entryComponentType) { var moduleMeta = moduleByDirective.get(entryComponentType.reference); templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta)) }) }), localModuleMeta.entryComponents.forEach(function (entryComponentType) { var moduleMeta = moduleByDirective.get(entryComponentType.reference); templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta)) }) }), templates.forEach(function (template) { return _this._compileTemplate(template) }) }, JitCompiler.prototype.clearCacheFor = function (type) { this._compiledNgModuleCache.delete(type), this._metadataResolver.clearCacheFor(type), this._compiledHostTemplateCache.delete(type); var compiledTemplate = this._compiledTemplateCache.get(type); compiledTemplate && this._compiledTemplateCache.delete(type) }, JitCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(), this._compiledTemplateCache.clear(), this._compiledHostTemplateCache.clear(), this._compiledNgModuleCache.clear() }, JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) { if (!ngModule) throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module."); var compiledTemplate = this._compiledHostTemplateCache.get(compType); if (!compiledTemplate) { var compMeta = this._metadataResolver.getDirectiveMetadata(compType); assertComponent(compMeta); var HostClass = function () { }; HostClass.overriddenName = identifierName(compMeta.type) + "_Host"; var hostMeta = createHostComponentMeta(HostClass, compMeta); compiledTemplate = new CompiledTemplate((!0), compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]), this._compiledHostTemplateCache.set(compType, compiledTemplate) } return compiledTemplate }, JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) { var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference); return compiledTemplate || (assertComponent(compMeta), compiledTemplate = new CompiledTemplate((!1), compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives), this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate)), compiledTemplate }, JitCompiler.prototype._assertComponentKnown = function (compType, isHost) { var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType); if (!compiledTemplate) throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!"); return compiledTemplate }, JitCompiler.prototype._assertDirectiveWrapper = function (dirType) { var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType); if (!dirWrapper) throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!"); return dirWrapper }, JitCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) { var directiveWrapperClass, compileResult = this._directiveWrapperCompiler.compile(dirMeta), statements = compileResult.statements; directiveWrapperClass = this._compilerConfig.useJit ? jitStatements("/" + identifierName(moduleMeta.type) + "/" + identifierName(dirMeta.type) + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar) : interpretStatements(statements, compileResult.dirWrapperClassVar), this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass) }, JitCompiler.prototype._compileTemplate = function (template) { var _this = this; if (!template.isCompiled) { var compMeta = template.compMeta, externalStylesheetsByModuleUrl = new Map, stylesCompileResult = this._styleCompiler.compileComponent(compMeta); stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r) }), this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl); var parsedAnimations = this._animationParser.parseComponent(compMeta), directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference) }), pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference) }), parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type)), compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations), compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations); compileResult.dependencies.forEach(function (dep) { var depTemplate; if (dep instanceof ViewClassDependency) { var vfd = dep; depTemplate = _this._assertComponentKnown(vfd.comp.reference, !1), vfd.placeholder.reference = depTemplate.proxyViewClass } else if (dep instanceof ComponentFactoryDependency$1) { var cfd = dep; depTemplate = _this._assertComponentKnown(cfd.comp.reference, !0), cfd.placeholder.reference = depTemplate.proxyComponentFactory } else if (dep instanceof DirectiveWrapperDependency) { var dwd = dep; dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference) } }); var viewClass, statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function (ca) { return ca.statements })).concat(compileResult.statements); viewClass = this._compilerConfig.useJit ? jitStatements("/" + identifierName(template.ngModule.type) + "/" + identifierName(template.compType) + "/" + (template.isHost ? "host" : "component") + ".ngfactory.js", statements, compileResult.viewClassVar) : interpretStatements(statements, compileResult.viewClassVar), template.compiled(viewClass); var _a } }, JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) { var _this = this; result.dependencies.forEach(function (dep, i) { var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl), nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl); dep.valuePlaceholder.reference = nestedStylesArr }) }, JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) { return this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl), this._compilerConfig.useJit ? jitStatements("/" + result.meta.moduleUrl + ".ngstyle.js", result.statements, result.stylesVar) : interpretStatements(result.statements, result.stylesVar) }, JitCompiler = __decorate$17([CompilerInjectable(), __metadata$17("design:paramtypes", [_angular_core.Injector, CompileMetadataResolver, TemplateParser, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, CompilerConfig, AnimationParser])], JitCompiler)
    }(), CompiledTemplate = function () { function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) { this.isHost = isHost, this.compType = compType, this.compMeta = compMeta, this.ngModule = ngModule, this.directives = directives, this._viewClass = null, this.isCompiled = !1; var self = this; this.proxyViewClass = function () { if (!self._viewClass) throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!"); return self._viewClass.apply(this, arguments) }, this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) : null } return CompiledTemplate.prototype.compiled = function (viewClass) { this._viewClass = viewClass, this.proxyViewClass.prototype = viewClass.prototype, this.isCompiled = !0 }, CompiledTemplate }(), ModuleBoundCompiler = function () { function ModuleBoundCompiler(_delegate, _ngModule) { this._delegate = _delegate, this._ngModule = _ngModule } return Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", { get: function () { return this._delegate.injector }, enumerable: !0, configurable: !0 }), ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) { return this._delegate.compileModuleSync(moduleType) }, ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) { return this._delegate.compileModuleAsync(moduleType) }, ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) { return this._delegate.compileModuleAndAllComponentsSync(moduleType) }, ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) { return this._delegate.compileModuleAndAllComponentsAsync(moduleType) }, ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) { return this._delegate.getNgContentSelectors(component) }, ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache() }, ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type) }, ModuleBoundCompiler }(), MessageBundle = function () { function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) { this._htmlParser = _htmlParser, this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs, this._messages = [] } return MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) { var htmlParserResult = this._htmlParser.parse(html, url, !0, interpolationConfig); if (htmlParserResult.errors.length) return htmlParserResult.errors; var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs); if (i18nParserResult.errors.length) return i18nParserResult.errors; (_a = this._messages).push.apply(_a, i18nParserResult.messages); var _a }, MessageBundle.prototype.getMessages = function () { return this._messages }, MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messages) }, MessageBundle }(), Extractor = function () { function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) { this.host = host, this.staticSymbolResolver = staticSymbolResolver, this.messageBundle = messageBundle, this.metadataResolver = metadataResolver } return Extractor.prototype.extract = function (rootFiles) { var _this = this, programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host), _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = (_a.ngModuleByPipeOrDirective, _a.files), ngModules = _a.ngModules; return Promise.all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, !1) })).then(function () { var errors = []; if (files.forEach(function (file) { var compMetas = []; file.directives.forEach(function (directiveType) { var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType); dirMeta && dirMeta.isComponent && compMetas.push(dirMeta) }), compMetas.forEach(function (compMeta) { var html = compMeta.template.template, interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation); errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig)) }) }), errors.length) throw new Error(errors.map(function (e) { return e.toString() }).join("\n")); return _this.messageBundle }) }, Extractor.create = function (host) { var htmlParser = new I18NHtmlParser(new HtmlParser), urlResolver = createOfflineCompileUrlResolver(), symbolCache = new StaticSymbolCache, summaryResolver = new AotSummaryResolver(host, symbolCache), staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver), staticReflector = new StaticReflector(staticSymbolResolver); StaticAndDynamicReflectionCapabilities.install(staticReflector); var config = new CompilerConfig({ genDebugInfo: !1, defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, logBindingUpdate: !1, useJit: !1 }), normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url) } }, urlResolver, htmlParser, config), elementSchemaRegistry = new DomElementSchemaRegistry, resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector), messageBundle = new MessageBundle(htmlParser, [], {}), extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver); return { extractor: extractor, staticReflector: staticReflector } }, Extractor }(), __decorate$18 = this && this.__decorate || function (decorators, target, key, desc) { var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r); return c > 3 && r && Object.defineProperty(target, key, r), r }, __metadata$18 = this && this.__metadata || function (k, v) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v) }, _NO_RESOURCE_LOADER = { get: function (url) { throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + '"') } }, COMPILER_PROVIDERS = [{ provide: Reflector, useValue: reflector }, { provide: ReflectorReader, useExisting: Reflector }, { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER }, SummaryResolver, Console, Lexer, Parser, HtmlParser, { provide: I18NHtmlParser, useFactory: function (parser, translations, format) { return new I18NHtmlParser(parser, translations, format) }, deps: [HtmlParser, [new _angular_core.Optional, new _angular_core.Inject(_angular_core.TRANSLATIONS)], [new _angular_core.Optional, new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)]] }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, { provide: CompilerConfig, useValue: new CompilerConfig }, JitCompiler, { provide: _angular_core.Compiler, useExisting: JitCompiler }, DomElementSchemaRegistry, { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver, AnimationParser], JitCompilerFactory = function () { function JitCompilerFactory(defaultOptions) { this._defaultOptions = [{ useDebug: _angular_core.isDevMode(), useJit: !0, defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated }].concat(defaultOptions) } return JitCompilerFactory.prototype.createCompiler = function (options) { void 0 === options && (options = []); var mergedOptions = _mergeOptions(this._defaultOptions.concat(options)), injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, { provide: CompilerConfig, useFactory: function () { return new CompilerConfig({ genDebugInfo: mergedOptions.useDebug, useJit: mergedOptions.useJit, defaultEncapsulation: mergedOptions.defaultEncapsulation, logBindingUpdate: mergedOptions.useDebug }) }, deps: [] }, mergedOptions.providers]); return injector.get(_angular_core.Compiler) }, JitCompilerFactory.ctorParameters = function () { return [{ type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS] }] }] }, JitCompilerFactory = __decorate$18([CompilerInjectable(), __metadata$18("design:paramtypes", [Array])], JitCompilerFactory) }(), platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, "coreDynamic", [{ provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: !0 }, { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory }, { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: !0 }]), ImportResolver = function () { function ImportResolver() { } return ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) { }, ImportResolver }(); exports.VERSION = VERSION, exports.TextAst = TextAst, exports.BoundTextAst = BoundTextAst, exports.AttrAst = AttrAst, exports.BoundElementPropertyAst = BoundElementPropertyAst, exports.BoundEventAst = BoundEventAst, exports.ReferenceAst = ReferenceAst, exports.VariableAst = VariableAst, exports.ElementAst = ElementAst, exports.EmbeddedTemplateAst = EmbeddedTemplateAst, exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst, exports.DirectiveAst = DirectiveAst, exports.ProviderAst = ProviderAst, exports.ProviderAstType = ProviderAstType, exports.NgContentAst = NgContentAst, exports.PropertyBindingType = PropertyBindingType, exports.templateVisitAll = templateVisitAll, exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS, exports.CompilerConfig = CompilerConfig, exports.RenderTypes = RenderTypes, exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata, exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata, exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata, exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata, exports.CompileAnimationMetadata = CompileAnimationMetadata, exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata, exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata, exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata, exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata, exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata, exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata, exports.identifierName = identifierName, exports.identifierModuleUrl = identifierModuleUrl, exports.CompileSummaryKind = CompileSummaryKind, exports.tokenName = tokenName, exports.tokenReference = tokenReference, exports.CompileStylesheetMetadata = CompileStylesheetMetadata, exports.CompileTemplateMetadata = CompileTemplateMetadata, exports.CompileDirectiveMetadata = CompileDirectiveMetadata, exports.createHostComponentMeta = createHostComponentMeta, exports.CompilePipeMetadata = CompilePipeMetadata, exports.CompileNgModuleMetadata = CompileNgModuleMetadata, exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata, exports.ProviderMeta = ProviderMeta, exports.createAotCompiler = createAotCompiler, exports.AotCompiler = AotCompiler, exports.analyzeNgModules = analyzeNgModules, exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules, exports.extractProgramSymbols = extractProgramSymbols, exports.StaticReflector = StaticReflector, exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities, exports.StaticSymbol = StaticSymbol, exports.StaticSymbolCache = StaticSymbolCache, exports.ResolvedStaticSymbol = ResolvedStaticSymbol, exports.StaticSymbolResolver = StaticSymbolResolver, exports.AotSummaryResolver = AotSummaryResolver, exports.SummaryResolver = SummaryResolver, exports.JitCompiler = JitCompiler, exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS, exports.JitCompilerFactory = JitCompilerFactory, exports.platformCoreDynamic = platformCoreDynamic, exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix, exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver, exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER, exports.UrlResolver = UrlResolver, exports.getUrlScheme = getUrlScheme, exports.ResourceLoader = ResourceLoader, exports.DirectiveResolver = DirectiveResolver, exports.PipeResolver = PipeResolver, exports.NgModuleResolver = NgModuleResolver, exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG, exports.InterpolationConfig = InterpolationConfig, exports.ElementSchemaRegistry = ElementSchemaRegistry, exports.Extractor = Extractor, exports.I18NHtmlParser = I18NHtmlParser, exports.MessageBundle = MessageBundle, exports.Xliff = Xliff, exports.Xmb = Xmb, exports.Xtb = Xtb, exports.DirectiveNormalizer = DirectiveNormalizer, exports.TokenType = TokenType, exports.Lexer = Lexer, exports.Token = Token, exports.EOF = EOF, exports.isIdentifier = isIdentifier, exports.isQuote = isQuote, exports.SplitInterpolation = SplitInterpolation, exports.TemplateBindingParseResult = TemplateBindingParseResult, exports.Parser = Parser, exports._ParseAST = _ParseAST, exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN, exports.CompileMetadataResolver = CompileMetadataResolver, exports.componentModuleUrl = componentModuleUrl, exports.ParseTreeResult = ParseTreeResult, exports.TreeError = TreeError, exports.HtmlParser = HtmlParser, exports.NgModuleCompiler = NgModuleCompiler, exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler, exports.ImportResolver = ImportResolver, exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript, exports.TypeScriptEmitter = TypeScriptEmitter, exports.ParseLocation = ParseLocation, exports.ParseSourceFile = ParseSourceFile, exports.ParseSourceSpan = ParseSourceSpan, exports.ParseErrorLevel = ParseErrorLevel, exports.ParseError = ParseError, exports.DomElementSchemaRegistry = DomElementSchemaRegistry, exports.CssSelector = CssSelector, exports.SelectorMatcher = SelectorMatcher, exports.SelectorListContext = SelectorListContext, exports.SelectorContext = SelectorContext, exports.StylesCompileDependency = StylesCompileDependency, exports.StylesCompileResult = StylesCompileResult, exports.CompiledStylesheet = CompiledStylesheet, exports.StyleCompiler = StyleCompiler, exports.TemplateParseError = TemplateParseError, exports.TemplateParseResult = TemplateParseResult, exports.TemplateParser = TemplateParser, exports.splitClasses = splitClasses, exports.createElementCssSelector = createElementCssSelector, exports.removeSummaryDuplicates = removeSummaryDuplicates, exports.ViewCompiler = ViewCompiler, exports.AnimationParser = AnimationParser, exports.SyntaxError = SyntaxError
});
/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/Observable"), require("@angular/platform-browser")) : "function" == typeof define && define.amd ? define(["exports", "@angular/core", "rxjs/Observable", "@angular/platform-browser"], factory) : factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser) }(this, function (exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
    "use strict"; function normalizeMethodName(method) { if ("string" != typeof method) return method; switch (method.toUpperCase()) { case "GET": return RequestMethod.Get; case "POST": return RequestMethod.Post; case "PUT": return RequestMethod.Put; case "DELETE": return RequestMethod.Delete; case "OPTIONS": return RequestMethod.Options; case "HEAD": return RequestMethod.Head; case "PATCH": return RequestMethod.Patch } throw new Error('Invalid request method. The method "' + method + '" is not supported.') } function getResponseURL(xhr) { return "responseURL" in xhr ? xhr.responseURL : /^X-Request-URL:/m.test(xhr.getAllResponseHeaders()) ? xhr.getResponseHeader("X-Request-URL") : void 0 } function stringToArrayBuffer(input) { for (var view = new Uint16Array(input.length), i = 0, strLen = input.length; i < strLen; i++) view[i] = input.charCodeAt(i); return view.buffer }/**
     * @license undefined
      * Copyright Google Inc. All Rights Reserved.
      * *
      * Use of this source code is governed by an MIT-style license that can be
      * found in the LICENSE file at https://angular.io/license
     * @param {?=} rawParams
     * @return {?}
     */
    function paramParser(rawParams) { void 0 === rawParams && (rawParams = ""); var map = new Map; if (rawParams.length > 0) { var params = rawParams.split("&"); params.forEach(function (param) { var eqIdx = param.indexOf("="), _a = eqIdx == -1 ? [param, ""] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1], list = map.get(key) || []; list.push(val), map.set(key, list) }) } return map } function standardEncoding(v) { return encodeURIComponent(v).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/gi, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%2B/gi, "+").replace(/%3D/gi, "=").replace(/%3F/gi, "?").replace(/%2F/gi, "/") } function _getJsonpConnections() { var w = "object" == typeof window ? window : {}; return null === _jsonpConnections && (_jsonpConnections = w[JSONP_HOME] = {}), _jsonpConnections } function httpRequest(backend, request) { return backend.createConnection(request).response } function mergeOptions(defaultOpts, providedOpts, method, url) { var newOptions = defaultOpts; return providedOpts ? newOptions.merge(new RequestOptions({ method: providedOpts.method || method, url: providedOpts.url || url, search: providedOpts.search, headers: providedOpts.headers, body: providedOpts.body, withCredentials: providedOpts.withCredentials, responseType: providedOpts.responseType })) : newOptions.merge(new RequestOptions({ method: method, url: url })) } function _createDefaultCookieXSRFStrategy() { return new CookieXSRFStrategy } function httpFactory(xhrBackend, requestOptions) { return new Http(xhrBackend, requestOptions) } function jsonpFactory(jsonpBackend, requestOptions) { return new Jsonp(jsonpBackend, requestOptions) } var BrowserXhr = function () { function BrowserXhr() { } return BrowserXhr.prototype.build = function () { return new XMLHttpRequest }, BrowserXhr.decorators = [{ type: _angular_core.Injectable }], BrowserXhr.ctorParameters = function () { return [] }, BrowserXhr }(), RequestMethod = {}; RequestMethod.Get = 0, RequestMethod.Post = 1, RequestMethod.Put = 2, RequestMethod.Delete = 3, RequestMethod.Options = 4, RequestMethod.Head = 5, RequestMethod.Patch = 6, RequestMethod[RequestMethod.Get] = "Get", RequestMethod[RequestMethod.Post] = "Post", RequestMethod[RequestMethod.Put] = "Put", RequestMethod[RequestMethod.Delete] = "Delete", RequestMethod[RequestMethod.Options] = "Options", RequestMethod[RequestMethod.Head] = "Head", RequestMethod[RequestMethod.Patch] = "Patch"; var ReadyState = {}; ReadyState.Unsent = 0, ReadyState.Open = 1, ReadyState.HeadersReceived = 2, ReadyState.Loading = 3, ReadyState.Done = 4, ReadyState.Cancelled = 5, ReadyState[ReadyState.Unsent] = "Unsent", ReadyState[ReadyState.Open] = "Open", ReadyState[ReadyState.HeadersReceived] = "HeadersReceived", ReadyState[ReadyState.Loading] = "Loading", ReadyState[ReadyState.Done] = "Done", ReadyState[ReadyState.Cancelled] = "Cancelled"; var ResponseType = {}; ResponseType.Basic = 0, ResponseType.Cors = 1, ResponseType.Default = 2, ResponseType.Error = 3, ResponseType.Opaque = 4, ResponseType[ResponseType.Basic] = "Basic", ResponseType[ResponseType.Cors] = "Cors", ResponseType[ResponseType.Default] = "Default", ResponseType[ResponseType.Error] = "Error", ResponseType[ResponseType.Opaque] = "Opaque"; var ContentType = {}; ContentType.NONE = 0, ContentType.JSON = 1, ContentType.FORM = 2, ContentType.FORM_DATA = 3, ContentType.TEXT = 4, ContentType.BLOB = 5, ContentType.ARRAY_BUFFER = 6, ContentType[ContentType.NONE] = "NONE", ContentType[ContentType.JSON] = "JSON", ContentType[ContentType.FORM] = "FORM", ContentType[ContentType.FORM_DATA] = "FORM_DATA", ContentType[ContentType.TEXT] = "TEXT", ContentType[ContentType.BLOB] = "BLOB", ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER"; var ResponseContentType = {}; ResponseContentType.Text = 0, ResponseContentType.Json = 1, ResponseContentType.ArrayBuffer = 2, ResponseContentType.Blob = 3, ResponseContentType[ResponseContentType.Text] = "Text", ResponseContentType[ResponseContentType.Json] = "Json", ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer", ResponseContentType[ResponseContentType.Blob] = "Blob"; var Headers = function () { function Headers(headers) { var _this = this; if (this._headers = new Map, this._normalizedNames = new Map, headers) return headers instanceof Headers ? void headers.forEach(function (values, name) { values.forEach(function (value) { return _this.append(name, value) }) }) : void Object.keys(headers).forEach(function (name) { var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]]; _this.delete(name), values.forEach(function (value) { return _this.append(name, value) }) }) } return Headers.fromResponseHeaderString = function (headersString) { var headers = new Headers; return headersString.split("\n").forEach(function (line) { var index = line.indexOf(":"); if (index > 0) { var name_1 = line.slice(0, index), value = line.slice(index + 1).trim(); headers.set(name_1, value) } }), headers }, Headers.prototype.append = function (name, value) { var values = this.getAll(name); null === values ? this.set(name, value) : values.push(value) }, Headers.prototype.delete = function (name) { var lcName = name.toLowerCase(); this._normalizedNames.delete(lcName), this._headers.delete(lcName) }, Headers.prototype.forEach = function (fn) { var _this = this; this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers) }) }, Headers.prototype.get = function (name) { var values = this.getAll(name); return null === values ? null : values.length > 0 ? values[0] : null }, Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()) }, Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()) }, Headers.prototype.set = function (name, value) { Array.isArray(value) ? value.length && this._headers.set(name.toLowerCase(), [value.join(",")]) : this._headers.set(name.toLowerCase(), [value]), this.mayBeSetNormalizedName(name) }, Headers.prototype.values = function () { return Array.from(this._headers.values()) }, Headers.prototype.toJSON = function () { var _this = this, serialized = {}; return this._headers.forEach(function (values, name) { var split = []; values.forEach(function (v) { return split.push.apply(split, v.split(",")) }), serialized[_this._normalizedNames.get(name)] = split }), serialized }, Headers.prototype.getAll = function (name) { return this.has(name) ? this._headers.get(name.toLowerCase()) : null }, Headers.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class') }, Headers.prototype.mayBeSetNormalizedName = function (name) { var lcName = name.toLowerCase(); this._normalizedNames.has(lcName) || this._normalizedNames.set(lcName, name) }, Headers }(), __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ResponseOptions = function () { function ResponseOptions(_a) { var _b = void 0 === _a ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url; this.body = null != body ? body : null, this.status = null != status ? status : null, this.headers = null != headers ? headers : null, this.statusText = null != statusText ? statusText : null, this.type = null != type ? type : null, this.url = null != url ? url : null } return ResponseOptions.prototype.merge = function (options) { return new ResponseOptions({ body: options && null != options.body ? options.body : this.body, status: options && null != options.status ? options.status : this.status, headers: options && null != options.headers ? options.headers : this.headers, statusText: options && null != options.statusText ? options.statusText : this.statusText, type: options && null != options.type ? options.type : this.type, url: options && null != options.url ? options.url : this.url }) }, ResponseOptions }(), BaseResponseOptions = function (_super) { function BaseResponseOptions() { _super.call(this, { status: 200, statusText: "Ok", type: ResponseType.Default, headers: new Headers }) } return __extends$1(BaseResponseOptions, _super), BaseResponseOptions.decorators = [{ type: _angular_core.Injectable }], BaseResponseOptions.ctorParameters = function () { return [] }, BaseResponseOptions }(ResponseOptions), ConnectionBackend = function () { function ConnectionBackend() { } return ConnectionBackend.prototype.createConnection = function (request) { }, ConnectionBackend }(), Connection = function () { function Connection() { } return Connection }(), XSRFStrategy = function () { function XSRFStrategy() { } return XSRFStrategy.prototype.configureRequest = function (req) { }, XSRFStrategy }(), isSuccess = function (status) { return status >= 200 && status < 300 }, QueryEncoder = function () { function QueryEncoder() { } return QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k) }, QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v) }, QueryEncoder }(), URLSearchParams = function () { function URLSearchParams(rawParams, queryEncoder) { void 0 === rawParams && (rawParams = ""), void 0 === queryEncoder && (queryEncoder = new QueryEncoder), this.rawParams = rawParams, this.queryEncoder = queryEncoder, this.paramsMap = paramParser(rawParams) } return URLSearchParams.prototype.clone = function () { var clone = new URLSearchParams("", this.queryEncoder); return clone.appendAll(this), clone }, URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param) }, URLSearchParams.prototype.get = function (param) { var storedParam = this.paramsMap.get(param); return Array.isArray(storedParam) ? storedParam[0] : null }, URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || [] }, URLSearchParams.prototype.set = function (param, val) { if (void 0 === val || null === val) return void this.delete(param); var list = this.paramsMap.get(param) || []; list.length = 0, list.push(val), this.paramsMap.set(param, list) }, URLSearchParams.prototype.setAll = function (searchParams) { var _this = this; searchParams.paramsMap.forEach(function (value, param) { var list = _this.paramsMap.get(param) || []; list.length = 0, list.push(value[0]), _this.paramsMap.set(param, list) }) }, URLSearchParams.prototype.append = function (param, val) { if (void 0 !== val && null !== val) { var list = this.paramsMap.get(param) || []; list.push(val), this.paramsMap.set(param, list) } }, URLSearchParams.prototype.appendAll = function (searchParams) { var _this = this; searchParams.paramsMap.forEach(function (value, param) { for (var list = _this.paramsMap.get(param) || [], i = 0; i < value.length; ++i) list.push(value[i]); _this.paramsMap.set(param, list) }) }, URLSearchParams.prototype.replaceAll = function (searchParams) { var _this = this; searchParams.paramsMap.forEach(function (value, param) { var list = _this.paramsMap.get(param) || []; list.length = 0; for (var i = 0; i < value.length; ++i) list.push(value[i]); _this.paramsMap.set(param, list) }) }, URLSearchParams.prototype.toString = function () { var _this = this, paramsList = []; return this.paramsMap.forEach(function (values, k) { values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + "=" + _this.queryEncoder.encodeValue(v)) }) }), paramsList.join("&") }, URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param) }, URLSearchParams }(), Body = function () { function Body() { } return Body.prototype.json = function () { return "string" == typeof this._body ? JSON.parse(this._body) : this._body instanceof ArrayBuffer ? JSON.parse(this.text()) : this._body }, Body.prototype.text = function () { return this._body instanceof URLSearchParams ? this._body.toString() : this._body instanceof ArrayBuffer ? String.fromCharCode.apply(null, new Uint16Array(this._body)) : null == this._body ? "" : "object" == typeof this._body ? JSON.stringify(this._body, null, 2) : this._body.toString() }, Body.prototype.arrayBuffer = function () { return this._body instanceof ArrayBuffer ? this._body : stringToArrayBuffer(this.text()) }, Body.prototype.blob = function () { if (this._body instanceof Blob) return this._body; if (this._body instanceof ArrayBuffer) return new Blob([this._body]); throw new Error("The request body isn't either a blob or an array buffer") }, Body }(), __extends$2 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, Response = function (_super) { function Response(responseOptions) { _super.call(this), this._body = responseOptions.body, this.status = responseOptions.status, this.ok = this.status >= 200 && this.status <= 299, this.statusText = responseOptions.statusText, this.headers = responseOptions.headers, this.type = responseOptions.type, this.url = responseOptions.url } return __extends$2(Response, _super), Response.prototype.toString = function () { return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url }, Response }(Body), _nextRequestId = 0, JSONP_HOME = "__ng_jsonp__", _jsonpConnections = null, BrowserJsonp = function () { function BrowserJsonp() { } return BrowserJsonp.prototype.build = function (url) { var node = document.createElement("script"); return node.src = url, node }, BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++ }, BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished" }, BrowserJsonp.prototype.exposeConnection = function (id, connection) { var connections = _getJsonpConnections(); connections[id] = connection }, BrowserJsonp.prototype.removeConnection = function (id) { var connections = _getJsonpConnections(); connections[id] = null }, BrowserJsonp.prototype.send = function (node) { document.body.appendChild(node) }, BrowserJsonp.prototype.cleanup = function (node) { node.parentNode && node.parentNode.removeChild(node) }, BrowserJsonp.decorators = [{ type: _angular_core.Injectable }], BrowserJsonp.ctorParameters = function () { return [] }, BrowserJsonp }(), __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.", JSONP_ERR_WRONG_METHOD = "JSONP requests must use GET request method.", JSONPConnection = function () { function JSONPConnection() { } return JSONPConnection.prototype.finished = function (data) { }, JSONPConnection }(), JSONPConnection_ = function (_super) { function JSONPConnection_(req, _dom, baseResponseOptions) { var _this = this; if (_super.call(this), this._dom = _dom, this.baseResponseOptions = baseResponseOptions, this._finished = !1, req.method !== RequestMethod.Get) throw new TypeError(JSONP_ERR_WRONG_METHOD); this.request = req, this.response = new rxjs_Observable.Observable(function (responseObserver) { _this.readyState = ReadyState.Loading; var id = _this._id = _dom.nextRequestID(); _dom.exposeConnection(id, _this); var callback = _dom.requestCallback(_this._id), url = req.url; url.indexOf("=JSONP_CALLBACK&") > -1 ? url = url.replace("=JSONP_CALLBACK&", "=" + callback + "&") : url.lastIndexOf("=JSONP_CALLBACK") === url.length - "=JSONP_CALLBACK".length && (url = url.substring(0, url.length - "=JSONP_CALLBACK".length) + ("=" + callback)); var script = _this._script = _dom.build(url), onLoad = function (event) { if (_this.readyState !== ReadyState.Cancelled) { if (_this.readyState = ReadyState.Done, _dom.cleanup(script), !_this._finished) { var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url }); return baseResponseOptions && (responseOptions_1 = baseResponseOptions.merge(responseOptions_1)), void responseObserver.error(new Response(responseOptions_1)) } var responseOptions = new ResponseOptions({ body: _this._responseData, url: url }); _this.baseResponseOptions && (responseOptions = _this.baseResponseOptions.merge(responseOptions)), responseObserver.next(new Response(responseOptions)), responseObserver.complete() } }, onError = function (error) { if (_this.readyState !== ReadyState.Cancelled) { _this.readyState = ReadyState.Done, _dom.cleanup(script); var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error }); baseResponseOptions && (responseOptions = baseResponseOptions.merge(responseOptions)), responseObserver.error(new Response(responseOptions)) } }; return script.addEventListener("load", onLoad), script.addEventListener("error", onError), _dom.send(script), function () { _this.readyState = ReadyState.Cancelled, script.removeEventListener("load", onLoad), script.removeEventListener("error", onError), _this._dom.cleanup(script) } }) } return __extends(JSONPConnection_, _super), JSONPConnection_.prototype.finished = function (data) { this._finished = !0, this._dom.removeConnection(this._id), this.readyState !== ReadyState.Cancelled && (this._responseData = data) }, JSONPConnection_ }(JSONPConnection), JSONPBackend = function (_super) { function JSONPBackend() { _super.apply(this, arguments) } return __extends(JSONPBackend, _super), JSONPBackend }(ConnectionBackend), JSONPBackend_ = function (_super) { function JSONPBackend_(_browserJSONP, _baseResponseOptions) { _super.call(this), this._browserJSONP = _browserJSONP, this._baseResponseOptions = _baseResponseOptions } return __extends(JSONPBackend_, _super), JSONPBackend_.prototype.createConnection = function (request) { return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions) }, JSONPBackend_.decorators = [{ type: _angular_core.Injectable }], JSONPBackend_.ctorParameters = function () { return [{ type: BrowserJsonp }, { type: ResponseOptions }] }, JSONPBackend_ }(JSONPBackend), XSSI_PREFIX = /^\)\]\}',?\n/, XHRConnection = function () { function XHRConnection(req, browserXHR, baseResponseOptions) { var _this = this; this.request = req, this.response = new rxjs_Observable.Observable(function (responseObserver) { var _xhr = browserXHR.build(); _xhr.open(RequestMethod[req.method].toUpperCase(), req.url), null != req.withCredentials && (_xhr.withCredentials = req.withCredentials); var onLoad = function () { var status = 1223 === _xhr.status ? 204 : _xhr.status, body = null; 204 !== status && (body = "undefined" == typeof _xhr.response ? _xhr.responseText : _xhr.response, "string" == typeof body && (body = body.replace(XSSI_PREFIX, ""))), 0 === status && (status = body ? 200 : 0); var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()), url = getResponseURL(_xhr) || req.url, statusText = _xhr.statusText || "OK", responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url }); null != baseResponseOptions && (responseOptions = baseResponseOptions.merge(responseOptions)); var response = new Response(responseOptions); return response.ok = isSuccess(status), response.ok ? (responseObserver.next(response), void responseObserver.complete()) : void responseObserver.error(response) }, onError = function (err) { var responseOptions = new ResponseOptions({ body: err, type: ResponseType.Error, status: _xhr.status, statusText: _xhr.statusText }); null != baseResponseOptions && (responseOptions = baseResponseOptions.merge(responseOptions)), responseObserver.error(new Response(responseOptions)) }; if (_this.setDetectedContentType(req, _xhr), null == req.headers && (req.headers = new Headers), req.headers.has("Accept") || req.headers.append("Accept", "application/json, text/plain, */*"), req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(",")) }), null != req.responseType && null != _xhr.responseType) switch (req.responseType) { case ResponseContentType.ArrayBuffer: _xhr.responseType = "arraybuffer"; break; case ResponseContentType.Json: _xhr.responseType = "json"; break; case ResponseContentType.Text: _xhr.responseType = "text"; break; case ResponseContentType.Blob: _xhr.responseType = "blob"; break; default: throw new Error("The selected responseType is not supported") } return _xhr.addEventListener("load", onLoad), _xhr.addEventListener("error", onError), _xhr.send(_this.request.getBody()), function () { _xhr.removeEventListener("load", onLoad), _xhr.removeEventListener("error", onError), _xhr.abort() } }) } return XHRConnection.prototype.setDetectedContentType = function (req, _xhr) { if (null == req.headers || null == req.headers.get("Content-Type")) switch (req.contentType) { case ContentType.NONE: break; case ContentType.JSON: _xhr.setRequestHeader("content-type", "application/json"); break; case ContentType.FORM: _xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=UTF-8"); break; case ContentType.TEXT: _xhr.setRequestHeader("content-type", "text/plain"); break; case ContentType.BLOB: var blob = req.blob(); blob.type && _xhr.setRequestHeader("content-type", blob.type) } }, XHRConnection }(), CookieXSRFStrategy = function () { function CookieXSRFStrategy(_cookieName, _headerName) { void 0 === _cookieName && (_cookieName = "XSRF-TOKEN"), void 0 === _headerName && (_headerName = "X-XSRF-TOKEN"), this._cookieName = _cookieName, this._headerName = _headerName } return CookieXSRFStrategy.prototype.configureRequest = function (req) { var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName); xsrfToken && req.headers.set(this._headerName, xsrfToken) }, CookieXSRFStrategy }(), XHRBackend = function () { function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) { this._browserXHR = _browserXHR, this._baseResponseOptions = _baseResponseOptions, this._xsrfStrategy = _xsrfStrategy } return XHRBackend.prototype.createConnection = function (request) { return this._xsrfStrategy.configureRequest(request), new XHRConnection(request, this._browserXHR, this._baseResponseOptions) }, XHRBackend.decorators = [{ type: _angular_core.Injectable }], XHRBackend.ctorParameters = function () { return [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }] }, XHRBackend }(), __extends$3 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, RequestOptions = function () { function RequestOptions(_a) { var _b = void 0 === _a ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType; this.method = null != method ? normalizeMethodName(method) : null, this.headers = null != headers ? headers : null, this.body = null != body ? body : null, this.url = null != url ? url : null, this.search = null != search ? "string" == typeof search ? new URLSearchParams(search) : search : null, this.withCredentials = null != withCredentials ? withCredentials : null, this.responseType = null != responseType ? responseType : null } return RequestOptions.prototype.merge = function (options) { return new RequestOptions({ method: options && null != options.method ? options.method : this.method, headers: options && null != options.headers ? options.headers : new Headers(this.headers), body: options && null != options.body ? options.body : this.body, url: options && null != options.url ? options.url : this.url, search: options && null != options.search ? "string" == typeof options.search ? new URLSearchParams(options.search) : options.search.clone() : this.search, withCredentials: options && null != options.withCredentials ? options.withCredentials : this.withCredentials, responseType: options && null != options.responseType ? options.responseType : this.responseType }) }, RequestOptions }(), BaseRequestOptions = function (_super) { function BaseRequestOptions() { _super.call(this, { method: RequestMethod.Get, headers: new Headers }) } return __extends$3(BaseRequestOptions, _super), BaseRequestOptions.decorators = [{ type: _angular_core.Injectable }], BaseRequestOptions.ctorParameters = function () { return [] }, BaseRequestOptions }(RequestOptions), __extends$5 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, Request = function (_super) { function Request(requestOptions) { _super.call(this); var url = requestOptions.url; if (this.url = requestOptions.url, requestOptions.search) { var search = requestOptions.search.toString(); if (search.length > 0) { var prefix = "?"; this.url.indexOf("?") != -1 && (prefix = "&" == this.url[this.url.length - 1] ? "" : "&"), this.url = url + prefix + search } } this._body = requestOptions.body, this.method = normalizeMethodName(requestOptions.method), this.headers = new Headers(requestOptions.headers), this.contentType = this.detectContentType(), this.withCredentials = requestOptions.withCredentials, this.responseType = requestOptions.responseType } return __extends$5(Request, _super), Request.prototype.detectContentType = function () { switch (this.headers.get("content-type")) { case "application/json": return ContentType.JSON; case "application/x-www-form-urlencoded": return ContentType.FORM; case "multipart/form-data": return ContentType.FORM_DATA; case "text/plain": case "text/html": return ContentType.TEXT; case "application/octet-stream": return ContentType.BLOB; default: return this.detectContentTypeFromBody() } }, Request.prototype.detectContentTypeFromBody = function () { return null == this._body ? ContentType.NONE : this._body instanceof URLSearchParams ? ContentType.FORM : this._body instanceof FormData ? ContentType.FORM_DATA : this._body instanceof Blob$1 ? ContentType.BLOB : this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : this._body && "object" == typeof this._body ? ContentType.JSON : ContentType.TEXT }, Request.prototype.getBody = function () { switch (this.contentType) { case ContentType.JSON: return this.text(); case ContentType.FORM: return this.text(); case ContentType.FORM_DATA: return this._body; case ContentType.TEXT: return this.text(); case ContentType.BLOB: return this.blob(); case ContentType.ARRAY_BUFFER: return this.arrayBuffer(); default: return null } }, Request }(Body), noop = function () { }, w = "object" == typeof window ? window : noop, FormData = w.FormData || noop, Blob$1 = w.Blob || noop, ArrayBuffer$1 = w.ArrayBuffer || noop, __extends$4 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, Http = function () { function Http(_backend, _defaultOptions) { this._backend = _backend, this._defaultOptions = _defaultOptions } return Http.prototype.request = function (url, options) { var responseObservable; if ("string" == typeof url) responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url))); else { if (!(url instanceof Request)) throw new Error("First argument must be a url string or Request instance."); responseObservable = httpRequest(this._backend, url) } return responseObservable }, Http.prototype.get = function (url, options) { return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url))) }, Http.prototype.post = function (url, body, options) { return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url))) }, Http.prototype.put = function (url, body, options) { return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url))) }, Http.prototype.delete = function (url, options) { return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url))) }, Http.prototype.patch = function (url, body, options) { return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url))) }, Http.prototype.head = function (url, options) { return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url))) }, Http.prototype.options = function (url, options) { return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url))) }, Http.decorators = [{ type: _angular_core.Injectable }], Http.ctorParameters = function () { return [{ type: ConnectionBackend }, { type: RequestOptions }] }, Http }(), Jsonp = function (_super) { function Jsonp(backend, defaultOptions) { _super.call(this, backend, defaultOptions) } return __extends$4(Jsonp, _super), Jsonp.prototype.request = function (url, options) { var responseObservable; if ("string" == typeof url && (url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url))), !(url instanceof Request)) throw new Error("First argument must be a url string or Request instance."); if (url.method !== RequestMethod.Get) throw new Error("JSONP requests must use GET request method."); return responseObservable = httpRequest(this._backend, url) }, Jsonp.decorators = [{ type: _angular_core.Injectable }], Jsonp.ctorParameters = function () { return [{ type: ConnectionBackend }, { type: RequestOptions }] }, Jsonp }(Http), HttpModule = function () { function HttpModule() { } return HttpModule.decorators = [{ type: _angular_core.NgModule, args: [{ providers: [{ provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] }, BrowserXhr, { provide: RequestOptions, useClass: BaseRequestOptions }, { provide: ResponseOptions, useClass: BaseResponseOptions }, XHRBackend, { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy }] }] }], HttpModule.ctorParameters = function () { return [] }, HttpModule }(), JsonpModule = function () { function JsonpModule() { } return JsonpModule.decorators = [{ type: _angular_core.NgModule, args: [{ providers: [{ provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] }, BrowserJsonp, { provide: RequestOptions, useClass: BaseRequestOptions }, { provide: ResponseOptions, useClass: BaseResponseOptions }, { provide: JSONPBackend, useClass: JSONPBackend_ }] }] }], JsonpModule.ctorParameters = function () { return [] }, JsonpModule }(), VERSION = new _angular_core.Version("2.4.1"); exports.BrowserXhr = BrowserXhr, exports.JSONPBackend = JSONPBackend, exports.JSONPConnection = JSONPConnection, exports.CookieXSRFStrategy = CookieXSRFStrategy, exports.XHRBackend = XHRBackend, exports.XHRConnection = XHRConnection, exports.BaseRequestOptions = BaseRequestOptions, exports.RequestOptions = RequestOptions, exports.BaseResponseOptions = BaseResponseOptions, exports.ResponseOptions = ResponseOptions, exports.ReadyState = ReadyState, exports.RequestMethod = RequestMethod, exports.ResponseContentType = ResponseContentType, exports.ResponseType = ResponseType, exports.Headers = Headers, exports.Http = Http, exports.Jsonp = Jsonp, exports.HttpModule = HttpModule, exports.JsonpModule = JsonpModule, exports.Connection = Connection, exports.ConnectionBackend = ConnectionBackend, exports.XSRFStrategy = XSRFStrategy, exports.Request = Request, exports.Response = Response, exports.QueryEncoder = QueryEncoder, exports.URLSearchParams = URLSearchParams, exports.VERSION = VERSION
});
/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/operator/toPromise"), require("rxjs/Subject"), require("rxjs/Observable"), require("rxjs/observable/fromPromise")) : "function" == typeof define && define.amd ? define(["exports", "@angular/core", "rxjs/operator/toPromise", "rxjs/Subject", "rxjs/Observable", "rxjs/observable/fromPromise"], factory) : factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable.prototype, global.Rx, global.Rx, global.Rx.Observable) }(this, function (exports, _angular_core, rxjs_operator_toPromise, rxjs_Subject, rxjs_Observable, rxjs_observable_fromPromise) {
    "use strict"; function isPresent(obj) { return null != obj } function isBlank(obj) { return null == obj } function looseIdentical(a, b) { return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b) } function isJsObject(o) { return null !== o && ("function" == typeof o || "object" == typeof o) } function isPrimitive(obj) { return !isJsObject(obj) } function isEmptyInputValue(value) { return null == value || "string" == typeof value && 0 === value.length } function _convertToPromise(obj) { return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj) } function _executeValidators(control, validators) { return validators.map(function (v) { return v(control) }) } function _executeAsyncValidators(control, validators) { return validators.map(function (v) { return v(control) }) } function _mergeErrors(arrayOfErrors) { var res = arrayOfErrors.reduce(function (res, errors) { return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res }, {}); return 0 === Object.keys(res).length ? null : res }/**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function normalizeValidator(validator) { return validator.validate ? function (c) { return validator.validate(c) } : validator } function normalizeAsyncValidator(validator) { return validator.validate ? function (c) { return validator.validate(c) } : validator } function unimplemented() { throw new Error("unimplemented") } function _buildValueString(id, value) { return null == id ? "" + value : (isPrimitive(value) || (value = "Object"), (id + ": " + value).slice(0, 50)) } function _extractId(valueString) { return valueString.split(":")[0] } function _buildValueString$1(id, value) { return null == id ? "" + value : ("string" == typeof value && (value = "'" + value + "'"), isPrimitive(value) || (value = "Object"), (id + ": " + value).slice(0, 50)) } function _extractId$1(valueString) { return valueString.split(":")[0] } function controlPath(name, parent) { return parent.path.concat([name]) } function setUpControl(control, dir) { control || _throwError(dir, "Cannot find control with"), dir.valueAccessor || _throwError(dir, "No value accessor for form control with"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]), dir.valueAccessor.writeValue(control.value), dir.valueAccessor.registerOnChange(function (newValue) { dir.viewToModelUpdate(newValue), control.markAsDirty(), control.setValue(newValue, { emitModelToViewChange: !1 }) }), dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched() }), control.registerOnChange(function (newValue, emitModelEvent) { dir.valueAccessor.writeValue(newValue), emitModelEvent && dir.viewToModelUpdate(newValue) }), dir.valueAccessor.setDisabledState && control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled) }), dir._rawValidators.forEach(function (validator) { validator.registerOnValidatorChange && validator.registerOnValidatorChange(function () { return control.updateValueAndValidity() }) }), dir._rawAsyncValidators.forEach(function (validator) { validator.registerOnValidatorChange && validator.registerOnValidatorChange(function () { return control.updateValueAndValidity() }) }) } function cleanUpControl(control, dir) { dir.valueAccessor.registerOnChange(function () { return _noControlError(dir) }), dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir) }), dir._rawValidators.forEach(function (validator) { validator.registerOnValidatorChange && validator.registerOnValidatorChange(null) }), dir._rawAsyncValidators.forEach(function (validator) { validator.registerOnValidatorChange && validator.registerOnValidatorChange(null) }), control && control._clearChangeFns() } function setUpFormContainer(control, dir) { isBlank(control) && _throwError(dir, "Cannot find control with"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]) } function _noControlError(dir) { return _throwError(dir, "There is no FormControl instance attached to form control element with") } function _throwError(dir, message) { var messageEnd; throw messageEnd = dir.path.length > 1 ? "path: '" + dir.path.join(" -> ") + "'" : dir.path[0] ? "name: '" + dir.path + "'" : "unspecified name attribute", new Error(message + " " + messageEnd) } function composeValidators(validators) { return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null } function composeAsyncValidators(validators) { return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null } function isPropertyUpdated(changes, viewModel) { if (!changes.hasOwnProperty("model")) return !1; var change = changes.model; return !!change.isFirstChange() || !looseIdentical(viewModel, change.currentValue) } function isBuiltInAccessor(valueAccessor) { return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a }) } function selectValueAccessor(dir, valueAccessors) { if (!valueAccessors) return null; var defaultAccessor, builtinAccessor, customAccessor; return valueAccessors.forEach(function (v) { v.constructor === DefaultValueAccessor ? defaultAccessor = v : isBuiltInAccessor(v) ? (builtinAccessor && _throwError(dir, "More than one built-in value accessor matches form control with"), builtinAccessor = v) : (customAccessor && _throwError(dir, "More than one custom value accessor matches form control with"), customAccessor = v) }), customAccessor ? customAccessor : builtinAccessor ? builtinAccessor : defaultAccessor ? defaultAccessor : (_throwError(dir, "No valid value accessor for form control with"), null) } function _find(control, path, delimiter) { return null == path ? null : (path instanceof Array || (path = path.split(delimiter)), path instanceof Array && 0 === path.length ? null : path.reduce(function (v, name) { return v instanceof FormGroup ? v.controls[name] || null : v instanceof FormArray ? v.at(name) || null : null }, control)) } function toObservable(r) { return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r } function coerceToValidator(validator) { return Array.isArray(validator) ? composeValidators(validator) : validator } function coerceToAsyncValidator(asyncValidator) { return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator } function _hasInvalidParent(parent) { return !(parent instanceof FormGroupName || parent instanceof FormGroupDirective || parent instanceof FormArrayName) }/**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var AbstractControlDirective = function () { function AbstractControlDirective() { } return Object.defineProperty(AbstractControlDirective.prototype, "control", { get: function () { throw new Error("unimplemented") }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "value", { get: function () { return this.control ? this.control.value : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "valid", { get: function () { return this.control ? this.control.valid : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "invalid", { get: function () { return this.control ? this.control.invalid : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "pending", { get: function () { return this.control ? this.control.pending : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "errors", { get: function () { return this.control ? this.control.errors : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "pristine", { get: function () { return this.control ? this.control.pristine : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "dirty", { get: function () { return this.control ? this.control.dirty : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "touched", { get: function () { return this.control ? this.control.touched : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "untouched", { get: function () { return this.control ? this.control.untouched : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "disabled", { get: function () { return this.control ? this.control.disabled : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "enabled", { get: function () { return this.control ? this.control.enabled : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", { get: function () { return this.control ? this.control.statusChanges : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", { get: function () { return this.control ? this.control.valueChanges : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "path", { get: function () { return null }, enumerable: !0, configurable: !0 }), AbstractControlDirective.prototype.reset = function (value) { void 0 === value && (value = void 0), this.control && this.control.reset(value) }, AbstractControlDirective.prototype.hasError = function (errorCode, path) { return void 0 === path && (path = null), !!this.control && this.control.hasError(errorCode, path) }, AbstractControlDirective.prototype.getError = function (errorCode, path) { return void 0 === path && (path = null), this.control ? this.control.getError(errorCode, path) : null }, AbstractControlDirective }(), __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ControlContainer = function (_super) { function ControlContainer() { _super.apply(this, arguments) } return __extends$1(ControlContainer, _super), Object.defineProperty(ControlContainer.prototype, "formDirective", { get: function () { return null }, enumerable: !0, configurable: !0 }), Object.defineProperty(ControlContainer.prototype, "path", { get: function () { return null }, enumerable: !0, configurable: !0 }), ControlContainer }(AbstractControlDirective), StringMapWrapper = function () { function StringMapWrapper() { } return StringMapWrapper.merge = function (m1, m2) { for (var m = {}, _i = 0, _a = Object.keys(m1) ; _i < _a.length; _i++) { var k = _a[_i]; m[k] = m1[k] } for (var _b = 0, _c = Object.keys(m2) ; _b < _c.length; _b++) { var k = _c[_b]; m[k] = m2[k] } return m }, StringMapWrapper.equals = function (m1, m2) { var k1 = Object.keys(m1), k2 = Object.keys(m2); if (k1.length != k2.length) return !1; for (var i = 0; i < k1.length; i++) { var key = k1[i]; if (m1[key] !== m2[key]) return !1 } return !0 }, StringMapWrapper }(), ListWrapper = function () { function ListWrapper() { } return ListWrapper.findLast = function (arr, condition) { for (var i = arr.length - 1; i >= 0; i--) if (condition(arr[i])) return arr[i]; return null }, ListWrapper.removeAll = function (list, items) { for (var i = 0; i < items.length; ++i) { var index = list.indexOf(items[i]); index > -1 && list.splice(index, 1) } }, ListWrapper.remove = function (list, el) { var index = list.indexOf(el); return index > -1 && (list.splice(index, 1), !0) }, ListWrapper.equals = function (a, b) { if (a.length != b.length) return !1; for (var i = 0; i < a.length; ++i) if (a[i] !== b[i]) return !1; return !0 }, ListWrapper.flatten = function (list) { return list.reduce(function (flat, item) { var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item; return flat.concat(flatItem) }, []) }, ListWrapper }(), isPromise = _angular_core.__core_private__.isPromise, NG_VALIDATORS = new _angular_core.OpaqueToken("NgValidators"), NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken("NgAsyncValidators"), Validators = function () { function Validators() { } return Validators.required = function (control) { return isEmptyInputValue(control.value) ? { required: !0 } : null }, Validators.requiredTrue = function (control) { return control.value === !0 ? null : { required: !0 } }, Validators.minLength = function (minLength) { return function (control) { if (isEmptyInputValue(control.value)) return null; var length = control.value ? control.value.length : 0; return length < minLength ? { minlength: { requiredLength: minLength, actualLength: length } } : null } }, Validators.maxLength = function (maxLength) { return function (control) { var length = control.value ? control.value.length : 0; return length > maxLength ? { maxlength: { requiredLength: maxLength, actualLength: length } } : null } }, Validators.pattern = function (pattern) { if (!pattern) return Validators.nullValidator; var regex, regexStr; return "string" == typeof pattern ? (regexStr = "^" + pattern + "$", regex = new RegExp(regexStr)) : (regexStr = pattern.toString(), regex = pattern), function (control) { if (isEmptyInputValue(control.value)) return null; var value = control.value; return regex.test(value) ? null : { pattern: { requiredPattern: regexStr, actualValue: value } } } }, Validators.nullValidator = function (c) { return null }, Validators.compose = function (validators) { if (!validators) return null; var presentValidators = validators.filter(isPresent); return 0 == presentValidators.length ? null : function (control) { return _mergeErrors(_executeValidators(control, presentValidators)) } }, Validators.composeAsync = function (validators) { if (!validators) return null; var presentValidators = validators.filter(isPresent); return 0 == presentValidators.length ? null : function (control) { var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise); return Promise.all(promises).then(_mergeErrors) } }, Validators }(), NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken("NgValueAccessor"), CHECKBOX_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor }), multi: !0 }, CheckboxControlValueAccessor = function () { function CheckboxControlValueAccessor(_renderer, _elementRef) { this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) { }, this.onTouched = function () { } } return CheckboxControlValueAccessor.prototype.writeValue = function (value) { this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value) }, CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn }, CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, CheckboxControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]", host: { "(change)": "onChange($event.target.checked)", "(blur)": "onTouched()" }, providers: [CHECKBOX_VALUE_ACCESSOR] }] }], CheckboxControlValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }] }, CheckboxControlValueAccessor }(), DEFAULT_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor }), multi: !0 }, DefaultValueAccessor = function () { function DefaultValueAccessor(_renderer, _elementRef) { this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) { }, this.onTouched = function () { } } return DefaultValueAccessor.prototype.writeValue = function (value) { var normalizedValue = null == value ? "" : value; this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue) }, DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn }, DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, DefaultValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]", host: { "(input)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [DEFAULT_VALUE_ACCESSOR] }] }], DefaultValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }] }, DefaultValueAccessor }(), NUMBER_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor }), multi: !0 }, NumberValueAccessor = function () { function NumberValueAccessor(_renderer, _elementRef) { this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) { }, this.onTouched = function () { } } return NumberValueAccessor.prototype.writeValue = function (value) { var normalizedValue = null == value ? "" : value; this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue) }, NumberValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = function (value) { fn("" == value ? null : parseFloat(value)) } }, NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, NumberValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, NumberValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]", host: { "(change)": "onChange($event.target.value)", "(input)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [NUMBER_VALUE_ACCESSOR] }] }], NumberValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }] }, NumberValueAccessor }(), __extends$2 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, NgControl = function (_super) { function NgControl() { _super.apply(this, arguments), this._parent = null, this.name = null, this.valueAccessor = null, this._rawValidators = [], this._rawAsyncValidators = [] } return __extends$2(NgControl, _super), Object.defineProperty(NgControl.prototype, "validator", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgControl.prototype, "asyncValidator", { get: function () { return unimplemented() }, enumerable: !0, configurable: !0 }), NgControl.prototype.viewToModelUpdate = function (newValue) { }, NgControl }(AbstractControlDirective), RADIO_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor }), multi: !0 }, RadioControlRegistry = function () { function RadioControlRegistry() { this._accessors = [] } return RadioControlRegistry.prototype.add = function (control, accessor) { this._accessors.push([control, accessor]) }, RadioControlRegistry.prototype.remove = function (accessor) { for (var i = this._accessors.length - 1; i >= 0; --i) if (this._accessors[i][1] === accessor) return void this._accessors.splice(i, 1) }, RadioControlRegistry.prototype.select = function (accessor) { var _this = this; this._accessors.forEach(function (c) { _this._isSameGroup(c, accessor) && c[1] !== accessor && c[1].fireUncheck(accessor.value) }) }, RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) { return !!controlPair[0].control && (controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name) }, RadioControlRegistry.decorators = [{ type: _angular_core.Injectable }], RadioControlRegistry.ctorParameters = function () { return [] }, RadioControlRegistry }(), RadioControlValueAccessor = function () { function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) { this._renderer = _renderer, this._elementRef = _elementRef, this._registry = _registry, this._injector = _injector, this.onChange = function () { }, this.onTouched = function () { } } return RadioControlValueAccessor.prototype.ngOnInit = function () { this._control = this._injector.get(NgControl), this._checkName(), this._registry.add(this._control, this) }, RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this) }, RadioControlValueAccessor.prototype.writeValue = function (value) { this._state = value === this.value, this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", this._state) }, RadioControlValueAccessor.prototype.registerOnChange = function (fn) { var _this = this; this._fn = fn, this.onChange = function () { fn(_this.value), _this._registry.select(_this) } }, RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value) }, RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, RadioControlValueAccessor.prototype._checkName = function () { this.name && this.formControlName && this.name !== this.formControlName && this._throwNameError(), !this.name && this.formControlName && (this.name = this.formControlName) }, RadioControlValueAccessor.prototype._throwNameError = function () { throw new Error('\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type="radio" formControlName="food" name="food">\n    ') }, RadioControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", host: { "(change)": "onChange()", "(blur)": "onTouched()" }, providers: [RADIO_VALUE_ACCESSOR] }] }], RadioControlValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }, { type: RadioControlRegistry }, { type: _angular_core.Injector }] }, RadioControlValueAccessor.propDecorators = { name: [{ type: _angular_core.Input }], formControlName: [{ type: _angular_core.Input }], value: [{ type: _angular_core.Input }] }, RadioControlValueAccessor }(), RANGE_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor }), multi: !0 }, RangeValueAccessor = function () { function RangeValueAccessor(_renderer, _elementRef) { this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) { }, this.onTouched = function () { } } return RangeValueAccessor.prototype.writeValue = function (value) { this._renderer.setElementProperty(this._elementRef.nativeElement, "value", parseFloat(value)) }, RangeValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = function (value) { fn("" == value ? null : parseFloat(value)) } }, RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, RangeValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, RangeValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]", host: { "(change)": "onChange($event.target.value)", "(input)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [RANGE_VALUE_ACCESSOR] }] }], RangeValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }] }, RangeValueAccessor }(), SELECT_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor }), multi: !0 }, SelectControlValueAccessor = function () { function SelectControlValueAccessor(_renderer, _elementRef) { this._renderer = _renderer, this._elementRef = _elementRef, this._optionMap = new Map, this._idCounter = 0, this.onChange = function (_) { }, this.onTouched = function () { } } return SelectControlValueAccessor.prototype.writeValue = function (value) { this.value = value; var valueString = _buildValueString(this._getOptionId(value), value); this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString) }, SelectControlValueAccessor.prototype.registerOnChange = function (fn) { var _this = this; this.onChange = function (valueString) { _this.value = valueString, fn(_this._getOptionValue(valueString)) } }, SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString() }, SelectControlValueAccessor.prototype._getOptionId = function (value) { for (var _i = 0, _a = Array.from(this._optionMap.keys()) ; _i < _a.length; _i++) { var id = _a[_i]; if (looseIdentical(this._optionMap.get(id), value)) return id } return null }, SelectControlValueAccessor.prototype._getOptionValue = function (valueString) { var id = _extractId(valueString); return this._optionMap.has(id) ? this._optionMap.get(id) : valueString }, SelectControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", host: { "(change)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [SELECT_VALUE_ACCESSOR] }] }], SelectControlValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }] }, SelectControlValueAccessor }(), NgSelectOption = function () { function NgSelectOption(_element, _renderer, _select) { this._element = _element, this._renderer = _renderer, this._select = _select, this._select && (this.id = this._select._registerOption()) } return Object.defineProperty(NgSelectOption.prototype, "ngValue", { set: function (value) { null != this._select && (this._select._optionMap.set(this.id, value), this._setElementValue(_buildValueString(this.id, value)), this._select.writeValue(this._select.value)) }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgSelectOption.prototype, "value", { set: function (value) { this._setElementValue(value), this._select && this._select.writeValue(this._select.value) }, enumerable: !0, configurable: !0 }), NgSelectOption.prototype._setElementValue = function (value) { this._renderer.setElementProperty(this._element.nativeElement, "value", value) }, NgSelectOption.prototype.ngOnDestroy = function () { this._select && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value)) }, NgSelectOption.decorators = [{ type: _angular_core.Directive, args: [{ selector: "option" }] }], NgSelectOption.ctorParameters = function () { return [{ type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }] }] }, NgSelectOption.propDecorators = { ngValue: [{ type: _angular_core.Input, args: ["ngValue"] }], value: [{ type: _angular_core.Input, args: ["value"] }] }, NgSelectOption }(), SELECT_MULTIPLE_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor }), multi: !0 }, SelectMultipleControlValueAccessor = function () { function SelectMultipleControlValueAccessor(_renderer, _elementRef) { this._renderer = _renderer, this._elementRef = _elementRef, this._optionMap = new Map, this._idCounter = 0, this.onChange = function (_) { }, this.onTouched = function () { } } return SelectMultipleControlValueAccessor.prototype.writeValue = function (value) { var _this = this; this.value = value; var optionSelectedStateSetter; if (Array.isArray(value)) { var ids_1 = value.map(function (v) { return _this._getOptionId(v) }); optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1) } } else optionSelectedStateSetter = function (opt, o) { opt._setSelected(!1) }; this._optionMap.forEach(optionSelectedStateSetter) }, SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) { var _this = this; this.onChange = function (_) { var selected = []; if (_.hasOwnProperty("selectedOptions")) for (var options = _.selectedOptions, i = 0; i < options.length; i++) { var opt = options.item(i), val = _this._getOptionValue(opt.value); selected.push(val) } else for (var options = _.options, i = 0; i < options.length; i++) { var opt = options.item(i); if (opt.selected) { var val = _this._getOptionValue(opt.value); selected.push(val) } } _this.value = selected, fn(selected) } }, SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn }, SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) { this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled) }, SelectMultipleControlValueAccessor.prototype._registerOption = function (value) { var id = (this._idCounter++).toString(); return this._optionMap.set(id, value), id }, SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) { for (var _i = 0, _a = Array.from(this._optionMap.keys()) ; _i < _a.length; _i++) { var id = _a[_i]; if (looseIdentical(this._optionMap.get(id)._value, value)) return id } return null }, SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) { var id = _extractId$1(valueString); return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString }, SelectMultipleControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", host: { "(change)": "onChange($event.target)", "(blur)": "onTouched()" }, providers: [SELECT_MULTIPLE_VALUE_ACCESSOR] }] }], SelectMultipleControlValueAccessor.ctorParameters = function () { return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }] }, SelectMultipleControlValueAccessor }(), NgSelectMultipleOption = function () { function NgSelectMultipleOption(_element, _renderer, _select) { this._element = _element, this._renderer = _renderer, this._select = _select, this._select && (this.id = this._select._registerOption(this)) } return Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", { set: function (value) { null != this._select && (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value)) }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgSelectMultipleOption.prototype, "value", { set: function (value) { this._select ? (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value)) : this._setElementValue(value) }, enumerable: !0, configurable: !0 }), NgSelectMultipleOption.prototype._setElementValue = function (value) { this._renderer.setElementProperty(this._element.nativeElement, "value", value) }, NgSelectMultipleOption.prototype._setSelected = function (selected) { this._renderer.setElementProperty(this._element.nativeElement, "selected", selected) }, NgSelectMultipleOption.prototype.ngOnDestroy = function () { this._select && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value)) }, NgSelectMultipleOption.decorators = [{ type: _angular_core.Directive, args: [{ selector: "option" }] }], NgSelectMultipleOption.ctorParameters = function () { return [{ type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }] }] }, NgSelectMultipleOption.propDecorators = { ngValue: [{ type: _angular_core.Input, args: ["ngValue"] }], value: [{ type: _angular_core.Input, args: ["value"] }] }, NgSelectMultipleOption }(), BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor], __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, AbstractFormGroupDirective = function (_super) { function AbstractFormGroupDirective() { _super.apply(this, arguments) } return __extends(AbstractFormGroupDirective, _super), AbstractFormGroupDirective.prototype.ngOnInit = function () { this._checkParentType(), this.formDirective.addFormGroup(this) }, AbstractFormGroupDirective.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeFormGroup(this) }, Object.defineProperty(AbstractFormGroupDirective.prototype, "control", { get: function () { return this.formDirective.getFormGroup(this) }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "path", { get: function () { return controlPath(this.name, this._parent) }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", { get: function () { return this._parent ? this._parent.formDirective : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", { get: function () { return composeValidators(this._validators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", { get: function () { return composeAsyncValidators(this._asyncValidators) }, enumerable: !0, configurable: !0 }), AbstractFormGroupDirective.prototype._checkParentType = function () { }, AbstractFormGroupDirective }(ControlContainer), __extends$3 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, AbstractControlStatus = function () { function AbstractControlStatus(cd) { this._cd = cd } return Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", { get: function () { return !!this._cd.control && this._cd.control.untouched }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", { get: function () { return !!this._cd.control && this._cd.control.touched }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", { get: function () { return !!this._cd.control && this._cd.control.pristine }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", { get: function () { return !!this._cd.control && this._cd.control.dirty }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", { get: function () { return !!this._cd.control && this._cd.control.valid }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", { get: function () { return !!this._cd.control && this._cd.control.invalid }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", { get: function () { return !!this._cd.control && this._cd.control.pending }, enumerable: !0, configurable: !0 }), AbstractControlStatus }(), ngControlStatusHost = { "[class.ng-untouched]": "ngClassUntouched", "[class.ng-touched]": "ngClassTouched", "[class.ng-pristine]": "ngClassPristine", "[class.ng-dirty]": "ngClassDirty", "[class.ng-valid]": "ngClassValid", "[class.ng-invalid]": "ngClassInvalid", "[class.ng-pending]": "ngClassPending" }, NgControlStatus = function (_super) { function NgControlStatus(cd) { _super.call(this, cd) } return __extends$3(NgControlStatus, _super), NgControlStatus.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formControlName],[ngModel],[formControl]", host: ngControlStatusHost }] }], NgControlStatus.ctorParameters = function () { return [{ type: NgControl, decorators: [{ type: _angular_core.Self }] }] }, NgControlStatus }(AbstractControlStatus), NgControlStatusGroup = function (_super) { function NgControlStatusGroup(cd) { _super.call(this, cd) } return __extends$3(NgControlStatusGroup, _super), NgControlStatusGroup.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]", host: ngControlStatusHost }] }], NgControlStatusGroup.ctorParameters = function () { return [{ type: ControlContainer, decorators: [{ type: _angular_core.Self }] }] }, NgControlStatusGroup }(AbstractControlStatus), __extends$5 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, EventEmitter = function (_super) { function EventEmitter(isAsync) { void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync } return __extends$5(EventEmitter, _super), EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value) }, EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) { var schedulerFn, errorFn = function (err) { return null }, completeFn = function () { return null }; return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext.next(value) }) } : function (value) { generatorOrNext.next(value) }, generatorOrNext.error && (errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err) }) } : function (err) { generatorOrNext.error(err) }), generatorOrNext.complete && (completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete() }) } : function () { generatorOrNext.complete() })) : (schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value) }) } : function (value) { generatorOrNext(value) }, error && (errorFn = this.__isAsync ? function (err) { setTimeout(function () { return error(err) }) } : function (err) { error(err) }), complete && (completeFn = this.__isAsync ? function () { setTimeout(function () { return complete() }) } : function () { complete() })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn) }, EventEmitter }(rxjs_Subject.Subject), __extends$6 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, VALID = "VALID", INVALID = "INVALID", PENDING = "PENDING", DISABLED = "DISABLED", AbstractControl = function () {
        function AbstractControl(validator, asyncValidator) { this.validator = validator, this.asyncValidator = asyncValidator, this._onCollectionChange = function () { }, this._pristine = !0, this._touched = !1, this._onDisabledChange = [] } return Object.defineProperty(AbstractControl.prototype, "value", { get: function () { return this._value }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "parent", { get: function () { return this._parent }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "status", { get: function () { return this._status }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "valid", { get: function () { return this._status === VALID }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "invalid", { get: function () { return this._status === INVALID }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "pending", { get: function () { return this._status == PENDING }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "disabled", { get: function () { return this._status === DISABLED }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "enabled", { get: function () { return this._status !== DISABLED }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "errors", { get: function () { return this._errors }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "pristine", {
            get: function () { return this._pristine }, enumerable: !0, configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "dirty", { get: function () { return !this.pristine }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "touched", { get: function () { return this._touched }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "untouched", { get: function () { return !this._touched }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "valueChanges", { get: function () { return this._valueChanges }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "statusChanges", { get: function () { return this._statusChanges }, enumerable: !0, configurable: !0 }), AbstractControl.prototype.setValidators = function (newValidator) { this.validator = coerceToValidator(newValidator) }, AbstractControl.prototype.setAsyncValidators = function (newValidator) { this.asyncValidator = coerceToAsyncValidator(newValidator) }, AbstractControl.prototype.clearValidators = function () { this.validator = null }, AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null }, AbstractControl.prototype.markAsTouched = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._touched = !0, this._parent && !onlySelf && this._parent.markAsTouched({ onlySelf: onlySelf }) }, AbstractControl.prototype.markAsUntouched = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._touched = !1, this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: !0 }) }), this._parent && !onlySelf && this._parent._updateTouched({ onlySelf: onlySelf }) }, AbstractControl.prototype.markAsDirty = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._pristine = !1, this._parent && !onlySelf && this._parent.markAsDirty({ onlySelf: onlySelf }) }, AbstractControl.prototype.markAsPristine = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._pristine = !0, this._forEachChild(function (control) { control.markAsPristine({ onlySelf: !0 }) }), this._parent && !onlySelf && this._parent._updatePristine({ onlySelf: onlySelf }) }, AbstractControl.prototype.markAsPending = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._status = PENDING, this._parent && !onlySelf && this._parent.markAsPending({ onlySelf: onlySelf }) }, AbstractControl.prototype.disable = function (_a) { var _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._status = DISABLED, this._errors = null, this._forEachChild(function (control) { control.disable({ onlySelf: !0 }) }), this._updateValue(), emitEvent !== !1 && (this._valueChanges.emit(this._value), this._statusChanges.emit(this._status)), this._updateAncestors(onlySelf), this._onDisabledChange.forEach(function (changeFn) { return changeFn(!0) }) }, AbstractControl.prototype.enable = function (_a) { var _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._status = VALID, this._forEachChild(function (control) { control.enable({ onlySelf: !0 }) }), this.updateValueAndValidity({ onlySelf: !0, emitEvent: emitEvent }), this._updateAncestors(onlySelf), this._onDisabledChange.forEach(function (changeFn) { return changeFn(!1) }) }, AbstractControl.prototype._updateAncestors = function (onlySelf) { this._parent && !onlySelf && (this._parent.updateValueAndValidity(), this._parent._updatePristine(), this._parent._updateTouched()) }, AbstractControl.prototype.setParent = function (parent) { this._parent = parent }, AbstractControl.prototype.setValue = function (value, options) { }, AbstractControl.prototype.patchValue = function (value, options) { }, AbstractControl.prototype.reset = function (value, options) { }, AbstractControl.prototype.updateValueAndValidity = function (_a) { var _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._setInitialStatus(), this._updateValue(), this.enabled && (this._errors = this._runValidator(), this._status = this._calculateStatus(), this._status !== VALID && this._status !== PENDING || this._runAsyncValidator(emitEvent)), emitEvent !== !1 && (this._valueChanges.emit(this._value), this._statusChanges.emit(this._status)), this._parent && !onlySelf && this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }) }, AbstractControl.prototype._updateTreeValidity = function (_a) { var emitEvent = (void 0 === _a ? { emitEvent: !0 } : _a).emitEvent; this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: !0, emitEvent: emitEvent }) }, AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID }, AbstractControl.prototype._runValidator = function () { return this.validator ? this.validator(this) : null }, AbstractControl.prototype._runAsyncValidator = function (emitEvent) { var _this = this; if (this.asyncValidator) { this._status = PENDING, this._cancelExistingSubscription(); var obs = toObservable(this.asyncValidator(this)); this._asyncValidationSubscription = obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }) } }) } }, AbstractControl.prototype._cancelExistingSubscription = function () { this._asyncValidationSubscription && this._asyncValidationSubscription.unsubscribe() }, AbstractControl.prototype.setErrors = function (errors, _a) { var emitEvent = (void 0 === _a ? {} : _a).emitEvent; this._errors = errors, this._updateControlsErrors(emitEvent !== !1) }, AbstractControl.prototype.get = function (path) { return _find(this, path, ".") }, AbstractControl.prototype.getError = function (errorCode, path) { void 0 === path && (path = null); var control = path ? this.get(path) : this; return control && control._errors ? control._errors[errorCode] : null }, AbstractControl.prototype.hasError = function (errorCode, path) { return void 0 === path && (path = null), !!this.getError(errorCode, path) }, Object.defineProperty(AbstractControl.prototype, "root", { get: function () { for (var x = this; x._parent;) x = x._parent; return x }, enumerable: !0, configurable: !0 }), AbstractControl.prototype._updateControlsErrors = function (emitEvent) { this._status = this._calculateStatus(), emitEvent && this._statusChanges.emit(this._status), this._parent && this._parent._updateControlsErrors(emitEvent) }, AbstractControl.prototype._initObservables = function () { this._valueChanges = new EventEmitter, this._statusChanges = new EventEmitter }, AbstractControl.prototype._calculateStatus = function () { return this._allControlsDisabled() ? DISABLED : this._errors ? INVALID : this._anyControlsHaveStatus(PENDING) ? PENDING : this._anyControlsHaveStatus(INVALID) ? INVALID : VALID }, AbstractControl.prototype._updateValue = function () { }, AbstractControl.prototype._forEachChild = function (cb) { }, AbstractControl.prototype._anyControls = function (condition) { }, AbstractControl.prototype._allControlsDisabled = function () { }, AbstractControl.prototype._anyControlsHaveStatus = function (status) { return this._anyControls(function (control) { return control.status === status }) }, AbstractControl.prototype._anyControlsDirty = function () { return this._anyControls(function (control) { return control.dirty }) }, AbstractControl.prototype._anyControlsTouched = function () { return this._anyControls(function (control) { return control.touched }) }, AbstractControl.prototype._updatePristine = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._pristine = !this._anyControlsDirty(), this._parent && !onlySelf && this._parent._updatePristine({ onlySelf: onlySelf }) }, AbstractControl.prototype._updateTouched = function (_a) { var onlySelf = (void 0 === _a ? {} : _a).onlySelf; this._touched = this._anyControlsTouched(), this._parent && !onlySelf && this._parent._updateTouched({ onlySelf: onlySelf }) }, AbstractControl.prototype._isBoxedValue = function (formState) { return "object" == typeof formState && null !== formState && 2 === Object.keys(formState).length && "value" in formState && "disabled" in formState }, AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn }, AbstractControl
    }(), FormControl = function (_super) { function FormControl(formState, validator, asyncValidator) { void 0 === formState && (formState = null), void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)), this._onChange = [], this._applyFormState(formState), this.updateValueAndValidity({ onlySelf: !0, emitEvent: !1 }), this._initObservables() } return __extends$6(FormControl, _super), FormControl.prototype.setValue = function (value, _a) { var _this = this, _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange; this._value = value, this._onChange.length && emitModelToViewChange !== !1 && this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== !1) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }) }, FormControl.prototype.patchValue = function (value, options) { void 0 === options && (options = {}), this.setValue(value, options) }, FormControl.prototype.reset = function (formState, _a) { void 0 === formState && (formState = null); var _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._applyFormState(formState), this.markAsPristine({ onlySelf: onlySelf }), this.markAsUntouched({ onlySelf: onlySelf }), this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent }) }, FormControl.prototype._updateValue = function () { }, FormControl.prototype._anyControls = function (condition) { return !1 }, FormControl.prototype._allControlsDisabled = function () { return this.disabled }, FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn) }, FormControl.prototype._clearChangeFns = function () { this._onChange = [], this._onDisabledChange = [], this._onCollectionChange = function () { } }, FormControl.prototype.registerOnDisabledChange = function (fn) { this._onDisabledChange.push(fn) }, FormControl.prototype._forEachChild = function (cb) { }, FormControl.prototype._applyFormState = function (formState) { this._isBoxedValue(formState) ? (this._value = formState.value, formState.disabled ? this.disable({ onlySelf: !0, emitEvent: !1 }) : this.enable({ onlySelf: !0, emitEvent: !1 })) : this._value = formState }, FormControl }(AbstractControl), FormGroup = function (_super) { function FormGroup(controls, validator, asyncValidator) { void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this.controls = controls, this._initObservables(), this._setUpControls(), this.updateValueAndValidity({ onlySelf: !0, emitEvent: !1 }) } return __extends$6(FormGroup, _super), FormGroup.prototype.registerControl = function (name, control) { return this.controls[name] ? this.controls[name] : (this.controls[name] = control, control.setParent(this), control._registerOnCollectionChange(this._onCollectionChange), control) }, FormGroup.prototype.addControl = function (name, control) { this.registerControl(name, control), this.updateValueAndValidity(), this._onCollectionChange() }, FormGroup.prototype.removeControl = function (name) { this.controls[name] && this.controls[name]._registerOnCollectionChange(function () { }), delete this.controls[name], this.updateValueAndValidity(), this._onCollectionChange() }, FormGroup.prototype.setControl = function (name, control) { this.controls[name] && this.controls[name]._registerOnCollectionChange(function () { }), delete this.controls[name], control && this.registerControl(name, control), this.updateValueAndValidity(), this._onCollectionChange() }, FormGroup.prototype.contains = function (controlName) { return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled }, FormGroup.prototype.setValue = function (value, _a) { var _this = this, _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._checkAllValuesPresent(value), Object.keys(value).forEach(function (name) { _this._throwIfControlMissing(name), _this.controls[name].setValue(value[name], { onlySelf: !0, emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }) }, FormGroup.prototype.patchValue = function (value, _a) { var _this = this, _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; Object.keys(value).forEach(function (name) { _this.controls[name] && _this.controls[name].patchValue(value[name], { onlySelf: !0, emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }) }, FormGroup.prototype.reset = function (value, _a) { void 0 === value && (value = {}); var _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._forEachChild(function (control, name) { control.reset(value[name], { onlySelf: !0, emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }), this._updatePristine({ onlySelf: onlySelf }), this._updateTouched({ onlySelf: onlySelf }) }, FormGroup.prototype.getRawValue = function () { return this._reduceChildren({}, function (acc, control, name) { return acc[name] = control.value, acc }) }, FormGroup.prototype._throwIfControlMissing = function (name) { if (!Object.keys(this.controls).length) throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      "); if (!this.controls[name]) throw new Error("Cannot find form control with name: " + name + ".") }, FormGroup.prototype._forEachChild = function (cb) { var _this = this; Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k) }) }, FormGroup.prototype._setUpControls = function () { var _this = this; this._forEachChild(function (control) { control.setParent(_this), control._registerOnCollectionChange(_this._onCollectionChange) }) }, FormGroup.prototype._updateValue = function () { this._value = this._reduceValue() }, FormGroup.prototype._anyControls = function (condition) { var _this = this, res = !1; return this._forEachChild(function (control, name) { res = res || _this.contains(name) && condition(control) }), res }, FormGroup.prototype._reduceValue = function () { var _this = this; return this._reduceChildren({}, function (acc, control, name) { return (control.enabled || _this.disabled) && (acc[name] = control.value), acc }) }, FormGroup.prototype._reduceChildren = function (initValue, fn) { var res = initValue; return this._forEachChild(function (control, name) { res = fn(res, control, name) }), res }, FormGroup.prototype._allControlsDisabled = function () { for (var _i = 0, _a = Object.keys(this.controls) ; _i < _a.length; _i++) { var controlName = _a[_i]; if (this.controls[controlName].enabled) return !1 } return Object.keys(this.controls).length > 0 || this.disabled }, FormGroup.prototype._checkAllValuesPresent = function (value) { this._forEachChild(function (control, name) { if (void 0 === value[name]) throw new Error("Must supply a value for form control with name: '" + name + "'.") }) }, FormGroup }(AbstractControl), FormArray = function (_super) { function FormArray(controls, validator, asyncValidator) { void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this.controls = controls, this._initObservables(), this._setUpControls(), this.updateValueAndValidity({ onlySelf: !0, emitEvent: !1 }) } return __extends$6(FormArray, _super), FormArray.prototype.at = function (index) { return this.controls[index] }, FormArray.prototype.push = function (control) { this.controls.push(control), this._registerControl(control), this.updateValueAndValidity(), this._onCollectionChange() }, FormArray.prototype.insert = function (index, control) { this.controls.splice(index, 0, control), this._registerControl(control), this.updateValueAndValidity(), this._onCollectionChange() }, FormArray.prototype.removeAt = function (index) { this.controls[index] && this.controls[index]._registerOnCollectionChange(function () { }), this.controls.splice(index, 1), this.updateValueAndValidity(), this._onCollectionChange() }, FormArray.prototype.setControl = function (index, control) { this.controls[index] && this.controls[index]._registerOnCollectionChange(function () { }), this.controls.splice(index, 1), control && (this.controls.splice(index, 0, control), this._registerControl(control)), this.updateValueAndValidity(), this._onCollectionChange() }, Object.defineProperty(FormArray.prototype, "length", { get: function () { return this.controls.length }, enumerable: !0, configurable: !0 }), FormArray.prototype.setValue = function (value, _a) { var _this = this, _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._checkAllValuesPresent(value), value.forEach(function (newValue, index) { _this._throwIfControlMissing(index), _this.at(index).setValue(newValue, { onlySelf: !0, emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }) }, FormArray.prototype.patchValue = function (value, _a) { var _this = this, _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; value.forEach(function (newValue, index) { _this.at(index) && _this.at(index).patchValue(newValue, { onlySelf: !0, emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }) }, FormArray.prototype.reset = function (value, _a) { void 0 === value && (value = []); var _b = void 0 === _a ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent; this._forEachChild(function (control, index) { control.reset(value[index], { onlySelf: !0, emitEvent: emitEvent }) }), this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent }), this._updatePristine({ onlySelf: onlySelf }), this._updateTouched({ onlySelf: onlySelf }) }, FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value }) }, FormArray.prototype._throwIfControlMissing = function (index) { if (!this.controls.length) throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      "); if (!this.at(index)) throw new Error("Cannot find form control at index " + index) }, FormArray.prototype._forEachChild = function (cb) { this.controls.forEach(function (control, index) { cb(control, index) }) }, FormArray.prototype._updateValue = function () { var _this = this; this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled }).map(function (control) { return control.value }) }, FormArray.prototype._anyControls = function (condition) { return this.controls.some(function (control) { return control.enabled && condition(control) }) }, FormArray.prototype._setUpControls = function () { var _this = this; this._forEachChild(function (control) { return _this._registerControl(control) }) }, FormArray.prototype._checkAllValuesPresent = function (value) { this._forEachChild(function (control, i) { if (void 0 === value[i]) throw new Error("Must supply a value for form control at index: " + i + ".") }) }, FormArray.prototype._allControlsDisabled = function () { for (var _i = 0, _a = this.controls; _i < _a.length; _i++) { var control = _a[_i]; if (control.enabled) return !1 } return this.controls.length > 0 || this.disabled }, FormArray.prototype._registerControl = function (control) { control.setParent(this), control._registerOnCollectionChange(this._onCollectionChange) }, FormArray }(AbstractControl), __extends$4 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, formDirectiveProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () { return NgForm }) }, resolvedPromise = Promise.resolve(null), NgForm = function (_super) { function NgForm(validators, asyncValidators) { _super.call(this), this._submitted = !1, this.ngSubmit = new EventEmitter, this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators)) } return __extends$4(NgForm, _super), Object.defineProperty(NgForm.prototype, "submitted", { get: function () { return this._submitted }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "formDirective", { get: function () { return this }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "control", { get: function () { return this.form }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "path", { get: function () { return [] }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "controls", { get: function () { return this.form.controls }, enumerable: !0, configurable: !0 }), NgForm.prototype.addControl = function (dir) { var _this = this; resolvedPromise.then(function () { var container = _this._findContainer(dir.path); dir._control = container.registerControl(dir.name, dir.control), setUpControl(dir.control, dir), dir.control.updateValueAndValidity({ emitEvent: !1 }) }) }, NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path) }, NgForm.prototype.removeControl = function (dir) { var _this = this; resolvedPromise.then(function () { var container = _this._findContainer(dir.path); container && container.removeControl(dir.name) }) }, NgForm.prototype.addFormGroup = function (dir) { var _this = this; resolvedPromise.then(function () { var container = _this._findContainer(dir.path), group = new FormGroup({}); setUpFormContainer(group, dir), container.registerControl(dir.name, group), group.updateValueAndValidity({ emitEvent: !1 }) }) }, NgForm.prototype.removeFormGroup = function (dir) { var _this = this; resolvedPromise.then(function () { var container = _this._findContainer(dir.path); container && container.removeControl(dir.name) }) }, NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path) }, NgForm.prototype.updateModel = function (dir, value) { var _this = this; resolvedPromise.then(function () { var ctrl = _this.form.get(dir.path); ctrl.setValue(value) }) }, NgForm.prototype.setValue = function (value) { this.control.setValue(value) }, NgForm.prototype.onSubmit = function ($event) { return this._submitted = !0, this.ngSubmit.emit($event), !1 }, NgForm.prototype.onReset = function () { this.resetForm() }, NgForm.prototype.resetForm = function (value) { void 0 === value && (value = void 0), this.form.reset(value), this._submitted = !1 }, NgForm.prototype._findContainer = function (path) { return path.pop(), path.length ? this.form.get(path) : this.form }, NgForm.decorators = [{ type: _angular_core.Directive, args: [{ selector: "form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]", providers: [formDirectiveProvider], host: { "(submit)": "onSubmit($event)", "(reset)": "onReset()" }, outputs: ["ngSubmit"], exportAs: "ngForm" }] }], NgForm.ctorParameters = function () { return [{ type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }] }, NgForm }(ControlContainer), Examples = { formControlName: '\n    <div [formGroup]="myGroup">\n      <input formControlName="firstName">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });', formGroupName: '\n    <div [formGroup]="myGroup">\n       <div formGroupName="person">\n          <input formControlName="firstName">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });', formArrayName: '\n    <div [formGroup]="myGroup">\n      <div formArrayName="cities">\n        <div *ngFor="let city of cityArray.controls; let i=index">\n          <input [formControlName]="i">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl(\'SF\')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });', ngModelGroup: '\n    <form>\n       <div ngModelGroup="person">\n          <input [(ngModel)]="person.name" name="firstName">\n       </div>\n    </form>', ngModelWithFormGroup: '\n    <div [formGroup]="myGroup">\n       <input formControlName="firstName">\n       <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">\n    </div>\n  ' }, TemplateDrivenErrors = function () { function TemplateDrivenErrors() { } return TemplateDrivenErrors.modelParentException = function () { throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup\'s partner directive "formControlName" instead.  Example:\n\n      ' + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup) }, TemplateDrivenErrors.formGroupNameException = function () { throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup) }, TemplateDrivenErrors.missingNameException = function () { throw new Error('If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as \'standalone\' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]="person.firstName" name="first">\n      Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">') }, TemplateDrivenErrors.modelGroupParentException = function () { throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup) }, TemplateDrivenErrors }(), __extends$8 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, modelGroupProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () { return NgModelGroup }) }, NgModelGroup = function (_super) { function NgModelGroup(parent, validators, asyncValidators) { _super.call(this), this._parent = parent, this._validators = validators, this._asyncValidators = asyncValidators } return __extends$8(NgModelGroup, _super), NgModelGroup.prototype._checkParentType = function () { this._parent instanceof NgModelGroup || this._parent instanceof NgForm || TemplateDrivenErrors.modelGroupParentException() }, NgModelGroup.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngModelGroup]", providers: [modelGroupProvider], exportAs: "ngModelGroup" }] }], NgModelGroup.ctorParameters = function () { return [{ type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }] }, NgModelGroup.propDecorators = { name: [{ type: _angular_core.Input, args: ["ngModelGroup"] }] }, NgModelGroup }(AbstractFormGroupDirective), __extends$7 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, formControlBinding = { provide: NgControl, useExisting: _angular_core.forwardRef(function () { return NgModel }) }, resolvedPromise$1 = Promise.resolve(null), NgModel = function (_super) { function NgModel(parent, validators, asyncValidators, valueAccessors) { _super.call(this), this._control = new FormControl, this._registered = !1, this.update = new EventEmitter, this._parent = parent, this._rawValidators = validators || [], this._rawAsyncValidators = asyncValidators || [], this.valueAccessor = selectValueAccessor(this, valueAccessors) } return __extends$7(NgModel, _super), NgModel.prototype.ngOnChanges = function (changes) { this._checkForErrors(), this._registered || this._setUpControl(), "isDisabled" in changes && this._updateDisabled(changes), isPropertyUpdated(changes, this.viewModel) && (this._updateValue(this.model), this.viewModel = this.model) }, NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this) }, Object.defineProperty(NgModel.prototype, "control", { get: function () { return this._control }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "path", { get: function () { return this._parent ? controlPath(this.name, this._parent) : [this.name] }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "formDirective", { get: function () { return this._parent ? this._parent.formDirective : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "validator", { get: function () { return composeValidators(this._rawValidators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "asyncValidator", { get: function () { return composeAsyncValidators(this._rawAsyncValidators) }, enumerable: !0, configurable: !0 }), NgModel.prototype.viewToModelUpdate = function (newValue) { this.viewModel = newValue, this.update.emit(newValue) }, NgModel.prototype._setUpControl = function () { this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this), this._registered = !0 }, NgModel.prototype._isStandalone = function () { return !this._parent || this.options && this.options.standalone }, NgModel.prototype._setUpStandalone = function () { setUpControl(this._control, this), this._control.updateValueAndValidity({ emitEvent: !1 }) }, NgModel.prototype._checkForErrors = function () { this._isStandalone() || this._checkParentType(), this._checkName() }, NgModel.prototype._checkParentType = function () { !(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective ? TemplateDrivenErrors.formGroupNameException() : this._parent instanceof NgModelGroup || this._parent instanceof NgForm || TemplateDrivenErrors.modelParentException() }, NgModel.prototype._checkName = function () { this.options && this.options.name && (this.name = this.options.name), this._isStandalone() || this.name || TemplateDrivenErrors.missingNameException() }, NgModel.prototype._updateValue = function (value) { var _this = this; resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: !1 }) }) }, NgModel.prototype._updateDisabled = function (changes) { var _this = this, disabledValue = changes.isDisabled.currentValue, isDisabled = "" === disabledValue || disabledValue && "false" !== disabledValue; resolvedPromise$1.then(function () { isDisabled && !_this.control.disabled ? _this.control.disable() : !isDisabled && _this.control.disabled && _this.control.enable() }) }, NgModel.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngModel]:not([formControlName]):not([formControl])", providers: [formControlBinding], exportAs: "ngModel" }] }], NgModel.ctorParameters = function () { return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR] }] }] }, NgModel.propDecorators = { name: [{ type: _angular_core.Input }], isDisabled: [{ type: _angular_core.Input, args: ["disabled"] }], model: [{ type: _angular_core.Input, args: ["ngModel"] }], options: [{ type: _angular_core.Input, args: ["ngModelOptions"] }], update: [{ type: _angular_core.Output, args: ["ngModelChange"] }] }, NgModel }(NgControl), ReactiveErrors = function () {
        function ReactiveErrors() { } return ReactiveErrors.controlParentException = function () { throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName) }, ReactiveErrors.ngModelGroupException = function () { throw new Error('formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a "form" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ' + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup) }, ReactiveErrors.missingFormException = function () { throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName) }, ReactiveErrors.groupParentException = function () {
            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
        }, ReactiveErrors.arrayParentException = function () { throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName) }, ReactiveErrors.disabledAttrWarning = function () { console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ") }, ReactiveErrors
    }(), __extends$9 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, formControlBinding$1 = { provide: NgControl, useExisting: _angular_core.forwardRef(function () { return FormControlDirective }) }, FormControlDirective = function (_super) { function FormControlDirective(validators, asyncValidators, valueAccessors) { _super.call(this), this.update = new EventEmitter, this._rawValidators = validators || [], this._rawAsyncValidators = asyncValidators || [], this.valueAccessor = selectValueAccessor(this, valueAccessors) } return __extends$9(FormControlDirective, _super), Object.defineProperty(FormControlDirective.prototype, "isDisabled", { set: function (isDisabled) { ReactiveErrors.disabledAttrWarning() }, enumerable: !0, configurable: !0 }), FormControlDirective.prototype.ngOnChanges = function (changes) { this._isControlChanged(changes) && (setUpControl(this.form, this), this.control.disabled && this.valueAccessor.setDisabledState && this.valueAccessor.setDisabledState(!0), this.form.updateValueAndValidity({ emitEvent: !1 })), isPropertyUpdated(changes, this.viewModel) && (this.form.setValue(this.model), this.viewModel = this.model) }, Object.defineProperty(FormControlDirective.prototype, "path", { get: function () { return [] }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlDirective.prototype, "validator", { get: function () { return composeValidators(this._rawValidators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlDirective.prototype, "asyncValidator", { get: function () { return composeAsyncValidators(this._rawAsyncValidators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlDirective.prototype, "control", { get: function () { return this.form }, enumerable: !0, configurable: !0 }), FormControlDirective.prototype.viewToModelUpdate = function (newValue) { this.viewModel = newValue, this.update.emit(newValue) }, FormControlDirective.prototype._isControlChanged = function (changes) { return changes.hasOwnProperty("form") }, FormControlDirective.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formControl]", providers: [formControlBinding$1], exportAs: "ngForm" }] }], FormControlDirective.ctorParameters = function () { return [{ type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR] }] }] }, FormControlDirective.propDecorators = { form: [{ type: _angular_core.Input, args: ["formControl"] }], model: [{ type: _angular_core.Input, args: ["ngModel"] }], update: [{ type: _angular_core.Output, args: ["ngModelChange"] }], isDisabled: [{ type: _angular_core.Input, args: ["disabled"] }] }, FormControlDirective }(NgControl), __extends$11 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, formDirectiveProvider$1 = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () { return FormGroupDirective }) }, FormGroupDirective = function (_super) { function FormGroupDirective(_validators, _asyncValidators) { _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._submitted = !1, this.directives = [], this.form = null, this.ngSubmit = new EventEmitter } return __extends$11(FormGroupDirective, _super), FormGroupDirective.prototype.ngOnChanges = function (changes) { this._checkFormPresent(), changes.hasOwnProperty("form") && (this._updateValidators(), this._updateDomValue(), this._updateRegistrations()) }, Object.defineProperty(FormGroupDirective.prototype, "submitted", { get: function () { return this._submitted }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormGroupDirective.prototype, "formDirective", { get: function () { return this }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormGroupDirective.prototype, "control", { get: function () { return this.form }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormGroupDirective.prototype, "path", { get: function () { return [] }, enumerable: !0, configurable: !0 }), FormGroupDirective.prototype.addControl = function (dir) { var ctrl = this.form.get(dir.path); return setUpControl(ctrl, dir), ctrl.updateValueAndValidity({ emitEvent: !1 }), this.directives.push(dir), ctrl }, FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path) }, FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir) }, FormGroupDirective.prototype.addFormGroup = function (dir) { var ctrl = this.form.get(dir.path); setUpFormContainer(ctrl, dir), ctrl.updateValueAndValidity({ emitEvent: !1 }) }, FormGroupDirective.prototype.removeFormGroup = function (dir) { }, FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path) }, FormGroupDirective.prototype.addFormArray = function (dir) { var ctrl = this.form.get(dir.path); setUpFormContainer(ctrl, dir), ctrl.updateValueAndValidity({ emitEvent: !1 }) }, FormGroupDirective.prototype.removeFormArray = function (dir) { }, FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path) }, FormGroupDirective.prototype.updateModel = function (dir, value) { var ctrl = this.form.get(dir.path); ctrl.setValue(value) }, FormGroupDirective.prototype.onSubmit = function ($event) { return this._submitted = !0, this.ngSubmit.emit($event), !1 }, FormGroupDirective.prototype.onReset = function () { this.resetForm() }, FormGroupDirective.prototype.resetForm = function (value) { void 0 === value && (value = void 0), this.form.reset(value), this._submitted = !1 }, FormGroupDirective.prototype._updateDomValue = function () { var _this = this; this.directives.forEach(function (dir) { var newCtrl = _this.form.get(dir.path); dir._control !== newCtrl && (cleanUpControl(dir._control, dir), newCtrl && setUpControl(newCtrl, dir), dir._control = newCtrl) }), this.form._updateTreeValidity({ emitEvent: !1 }) }, FormGroupDirective.prototype._updateRegistrations = function () { var _this = this; this.form._registerOnCollectionChange(function () { return _this._updateDomValue() }), this._oldForm && this._oldForm._registerOnCollectionChange(function () { }), this._oldForm = this.form }, FormGroupDirective.prototype._updateValidators = function () { var sync = composeValidators(this._validators); this.form.validator = Validators.compose([this.form.validator, sync]); var async = composeAsyncValidators(this._asyncValidators); this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]) }, FormGroupDirective.prototype._checkFormPresent = function () { this.form || ReactiveErrors.missingFormException() }, FormGroupDirective.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formGroup]", providers: [formDirectiveProvider$1], host: { "(submit)": "onSubmit($event)", "(reset)": "onReset()" }, exportAs: "ngForm" }] }], FormGroupDirective.ctorParameters = function () { return [{ type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }] }, FormGroupDirective.propDecorators = { form: [{ type: _angular_core.Input, args: ["formGroup"] }], ngSubmit: [{ type: _angular_core.Output }] }, FormGroupDirective }(ControlContainer), __extends$12 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, formGroupNameProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () { return FormGroupName }) }, FormGroupName = function (_super) { function FormGroupName(parent, validators, asyncValidators) { _super.call(this), this._parent = parent, this._validators = validators, this._asyncValidators = asyncValidators } return __extends$12(FormGroupName, _super), FormGroupName.prototype._checkParentType = function () { _hasInvalidParent(this._parent) && ReactiveErrors.groupParentException() }, FormGroupName.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formGroupName]", providers: [formGroupNameProvider] }] }], FormGroupName.ctorParameters = function () { return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }] }, FormGroupName.propDecorators = { name: [{ type: _angular_core.Input, args: ["formGroupName"] }] }, FormGroupName }(AbstractFormGroupDirective), formArrayNameProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () { return FormArrayName }) }, FormArrayName = function (_super) { function FormArrayName(parent, validators, asyncValidators) { _super.call(this), this._parent = parent, this._validators = validators, this._asyncValidators = asyncValidators } return __extends$12(FormArrayName, _super), FormArrayName.prototype.ngOnInit = function () { this._checkParentType(), this.formDirective.addFormArray(this) }, FormArrayName.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeFormArray(this) }, Object.defineProperty(FormArrayName.prototype, "control", { get: function () { return this.formDirective.getFormArray(this) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "formDirective", { get: function () { return this._parent ? this._parent.formDirective : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "path", { get: function () { return controlPath(this.name, this._parent) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "validator", { get: function () { return composeValidators(this._validators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "asyncValidator", { get: function () { return composeAsyncValidators(this._asyncValidators) }, enumerable: !0, configurable: !0 }), FormArrayName.prototype._checkParentType = function () { _hasInvalidParent(this._parent) && ReactiveErrors.arrayParentException() }, FormArrayName.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formArrayName]", providers: [formArrayNameProvider] }] }], FormArrayName.ctorParameters = function () { return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }] }, FormArrayName.propDecorators = { name: [{ type: _angular_core.Input, args: ["formArrayName"] }] }, FormArrayName }(ControlContainer), __extends$10 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, controlNameBinding = { provide: NgControl, useExisting: _angular_core.forwardRef(function () { return FormControlName }) }, FormControlName = function (_super) { function FormControlName(parent, validators, asyncValidators, valueAccessors) { _super.call(this), this._added = !1, this.update = new EventEmitter, this._parent = parent, this._rawValidators = validators || [], this._rawAsyncValidators = asyncValidators || [], this.valueAccessor = selectValueAccessor(this, valueAccessors) } return __extends$10(FormControlName, _super), Object.defineProperty(FormControlName.prototype, "isDisabled", { set: function (isDisabled) { ReactiveErrors.disabledAttrWarning() }, enumerable: !0, configurable: !0 }), FormControlName.prototype.ngOnChanges = function (changes) { this._added || this._setUpControl(), isPropertyUpdated(changes, this.viewModel) && (this.viewModel = this.model, this.formDirective.updateModel(this, this.model)) }, FormControlName.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this) }, FormControlName.prototype.viewToModelUpdate = function (newValue) { this.viewModel = newValue, this.update.emit(newValue) }, Object.defineProperty(FormControlName.prototype, "path", { get: function () { return controlPath(this.name, this._parent) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "formDirective", { get: function () { return this._parent ? this._parent.formDirective : null }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "validator", { get: function () { return composeValidators(this._rawValidators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "asyncValidator", { get: function () { return composeAsyncValidators(this._rawAsyncValidators) }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "control", { get: function () { return this._control }, enumerable: !0, configurable: !0 }), FormControlName.prototype._checkParentType = function () { !(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective ? ReactiveErrors.ngModelGroupException() : this._parent instanceof FormGroupName || this._parent instanceof FormGroupDirective || this._parent instanceof FormArrayName || ReactiveErrors.controlParentException() }, FormControlName.prototype._setUpControl = function () { this._checkParentType(), this._control = this.formDirective.addControl(this), this.control.disabled && this.valueAccessor.setDisabledState && this.valueAccessor.setDisabledState(!0), this._added = !0 }, FormControlName.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formControlName]", providers: [controlNameBinding] }] }], FormControlName.ctorParameters = function () { return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR] }] }] }, FormControlName.propDecorators = { name: [{ type: _angular_core.Input, args: ["formControlName"] }], model: [{ type: _angular_core.Input, args: ["ngModel"] }], update: [{ type: _angular_core.Output, args: ["ngModelChange"] }], isDisabled: [{ type: _angular_core.Input, args: ["disabled"] }] }, FormControlName }(NgControl), __extends$13 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, REQUIRED_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () { return RequiredValidator }), multi: !0 }, CHECKBOX_REQUIRED_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator }), multi: !0 }, RequiredValidator = function () { function RequiredValidator() { } return Object.defineProperty(RequiredValidator.prototype, "required", { get: function () { return this._required }, set: function (value) { this._required = null != value && value !== !1 && "" + value != "false", this._onChange && this._onChange() }, enumerable: !0, configurable: !0 }), RequiredValidator.prototype.validate = function (c) { return this.required ? Validators.required(c) : null }, RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn }, RequiredValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", providers: [REQUIRED_VALIDATOR], host: { "[attr.required]": 'required ? "" : null' } }] }], RequiredValidator.ctorParameters = function () { return [] }, RequiredValidator.propDecorators = { required: [{ type: _angular_core.Input }] }, RequiredValidator }(), CheckboxRequiredValidator = function (_super) { function CheckboxRequiredValidator() { _super.apply(this, arguments) } return __extends$13(CheckboxRequiredValidator, _super), CheckboxRequiredValidator.prototype.validate = function (c) { return this.required ? Validators.requiredTrue(c) : null }, CheckboxRequiredValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]", providers: [CHECKBOX_REQUIRED_VALIDATOR], host: { "[attr.required]": 'required ? "" : null' } }] }], CheckboxRequiredValidator.ctorParameters = function () { return [] }, CheckboxRequiredValidator }(RequiredValidator), MIN_LENGTH_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () { return MinLengthValidator }), multi: !0 }, MinLengthValidator = function () { function MinLengthValidator() { } return MinLengthValidator.prototype.ngOnChanges = function (changes) { "minlength" in changes && (this._createValidator(), this._onChange && this._onChange()) }, MinLengthValidator.prototype.validate = function (c) { return null == this.minlength ? null : this._validator(c) }, MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn }, MinLengthValidator.prototype._createValidator = function () { this._validator = Validators.minLength(parseInt(this.minlength, 10)) }, MinLengthValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", providers: [MIN_LENGTH_VALIDATOR], host: { "[attr.minlength]": "minlength ? minlength : null" } }] }], MinLengthValidator.ctorParameters = function () { return [] }, MinLengthValidator.propDecorators = { minlength: [{ type: _angular_core.Input }] }, MinLengthValidator }(), MAX_LENGTH_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator }), multi: !0 }, MaxLengthValidator = function () { function MaxLengthValidator() { } return MaxLengthValidator.prototype.ngOnChanges = function (changes) { "maxlength" in changes && (this._createValidator(), this._onChange && this._onChange()) }, MaxLengthValidator.prototype.validate = function (c) { return null != this.maxlength ? this._validator(c) : null }, MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn }, MaxLengthValidator.prototype._createValidator = function () { this._validator = Validators.maxLength(parseInt(this.maxlength, 10)) }, MaxLengthValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", providers: [MAX_LENGTH_VALIDATOR], host: { "[attr.maxlength]": "maxlength ? maxlength : null" } }] }], MaxLengthValidator.ctorParameters = function () { return [] }, MaxLengthValidator.propDecorators = { maxlength: [{ type: _angular_core.Input }] }, MaxLengthValidator }(), PATTERN_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () { return PatternValidator }), multi: !0 }, PatternValidator = function () { function PatternValidator() { } return PatternValidator.prototype.ngOnChanges = function (changes) { "pattern" in changes && (this._createValidator(), this._onChange && this._onChange()) }, PatternValidator.prototype.validate = function (c) { return this._validator(c) }, PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn }, PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern) }, PatternValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", providers: [PATTERN_VALIDATOR], host: { "[attr.pattern]": "pattern ? pattern : null" } }] }], PatternValidator.ctorParameters = function () { return [] }, PatternValidator.propDecorators = { pattern: [{ type: _angular_core.Input }] }, PatternValidator }(), FormBuilder = function () { function FormBuilder() { } return FormBuilder.prototype.group = function (controlsConfig, extra) { void 0 === extra && (extra = null); var controls = this._reduceControls(controlsConfig), validator = isPresent(extra) ? extra.validator : null, asyncValidator = isPresent(extra) ? extra.asyncValidator : null; return new FormGroup(controls, validator, asyncValidator) }, FormBuilder.prototype.control = function (formState, validator, asyncValidator) { return void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), new FormControl(formState, validator, asyncValidator) }, FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) { var _this = this; void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null); var controls = controlsConfig.map(function (c) { return _this._createControl(c) }); return new FormArray(controls, validator, asyncValidator) }, FormBuilder.prototype._reduceControls = function (controlsConfig) { var _this = this, controls = {}; return Object.keys(controlsConfig).forEach(function (controlName) { controls[controlName] = _this._createControl(controlsConfig[controlName]) }), controls }, FormBuilder.prototype._createControl = function (controlConfig) { if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) return controlConfig; if (Array.isArray(controlConfig)) { var value = controlConfig[0], validator = controlConfig.length > 1 ? controlConfig[1] : null, asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null; return this.control(value, validator, asyncValidator) } return this.control(controlConfig) }, FormBuilder.decorators = [{ type: _angular_core.Injectable }], FormBuilder.ctorParameters = function () { return [] }, FormBuilder }(), VERSION = new _angular_core.Version("2.4.1"), SHARED_FORM_DIRECTIVES = [NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator], TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm], REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], InternalFormsSharedModule = function () { function InternalFormsSharedModule() { } return InternalFormsSharedModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES }] }], InternalFormsSharedModule.ctorParameters = function () { return [] }, InternalFormsSharedModule }(), FormsModule = function () { function FormsModule() { } return FormsModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: TEMPLATE_DRIVEN_DIRECTIVES, providers: [RadioControlRegistry], exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES] }] }], FormsModule.ctorParameters = function () { return [] }, FormsModule }(), ReactiveFormsModule = function () { function ReactiveFormsModule() { } return ReactiveFormsModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: [REACTIVE_DRIVEN_DIRECTIVES], providers: [FormBuilder, RadioControlRegistry], exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES] }] }], ReactiveFormsModule.ctorParameters = function () { return [] }, ReactiveFormsModule }(); exports.AbstractControlDirective = AbstractControlDirective, exports.AbstractFormGroupDirective = AbstractFormGroupDirective, exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor, exports.ControlContainer = ControlContainer, exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR, exports.DefaultValueAccessor = DefaultValueAccessor, exports.NgControl = NgControl, exports.NgControlStatus = NgControlStatus, exports.NgControlStatusGroup = NgControlStatusGroup, exports.NgForm = NgForm, exports.NgModel = NgModel, exports.NgModelGroup = NgModelGroup, exports.RadioControlValueAccessor = RadioControlValueAccessor, exports.FormControlDirective = FormControlDirective, exports.FormControlName = FormControlName, exports.FormGroupDirective = FormGroupDirective, exports.FormArrayName = FormArrayName, exports.FormGroupName = FormGroupName, exports.NgSelectOption = NgSelectOption, exports.SelectControlValueAccessor = SelectControlValueAccessor, exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor, exports.CheckboxRequiredValidator = CheckboxRequiredValidator, exports.MaxLengthValidator = MaxLengthValidator, exports.MinLengthValidator = MinLengthValidator, exports.PatternValidator = PatternValidator, exports.RequiredValidator = RequiredValidator, exports.FormBuilder = FormBuilder, exports.AbstractControl = AbstractControl, exports.FormArray = FormArray, exports.FormControl = FormControl, exports.FormGroup = FormGroup, exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS, exports.NG_VALIDATORS = NG_VALIDATORS, exports.Validators = Validators, exports.VERSION = VERSION, exports.FormsModule = FormsModule, exports.ReactiveFormsModule = ReactiveFormsModule
});
/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/common"), require("@angular/core")) : "function" == typeof define && define.amd ? define(["exports", "@angular/common", "@angular/core"], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core) }(this, function (exports, _angular_common, core) {
    "use strict"; function isPresent(obj) { return null != obj } function isBlank(obj) { return null == obj } function stringify(token) { if ("string" == typeof token) return token; if (null == token) return "" + token; if (token.overriddenName) return "" + token.overriddenName; if (token.name) return "" + token.name; var res = token.toString(), newLineIndex = res.indexOf("\n"); return newLineIndex === -1 ? res : res.substring(0, newLineIndex) } function setValueOnPath(global, path, value) { for (var parts = path.split("."), obj = global; parts.length > 1;) { var name_1 = parts.shift(); obj = obj.hasOwnProperty(name_1) && null != obj[name_1] ? obj[name_1] : obj[name_1] = {} } void 0 !== obj && null !== obj || (obj = {}), obj[parts.shift()] = value } function getDOM() { return _DOM } function setRootDomAdapter(adapter) { _DOM || (_DOM = adapter) } function _computeStyle(element, prop) { return getDOM().getComputedStyle(element)[prop] } function _copyKeyframeStyles(styles) { var newStyles = {}; return Object.keys(styles).forEach(function (prop) { "offset" != prop && (newStyles[prop] = styles[prop]) }), newStyles } function findStartingKeyframe(keyframes) { for (var startingKeyframe = keyframes[0], i = 1; i < keyframes.length; i++) { var kf = keyframes[i], offset = kf.offset; if (0 !== offset) break; startingKeyframe = kf } return startingKeyframe } function _populateStyles(styles, defaultStyles) { var data = {}; return styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop] }) }), Object.keys(defaultStyles).forEach(function (prop) { isPresent(data[prop]) || (data[prop] = defaultStyles[prop]) }), data } function filterWebAnimationPlayerFn(player) { return player instanceof WebAnimationsPlayer } function getBaseElementHref() { return baseElement || (baseElement = document.querySelector("base")) ? baseElement.getAttribute("href") : null } function relativePath(url) { return urlParsingNode || (urlParsingNode = document.createElement("a")), urlParsingNode.setAttribute("href", url), "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname } function parseCookieValue(cookieStr, name) { name = encodeURIComponent(name); for (var _i = 0, _a = cookieStr.split(";") ; _i < _a.length; _i++) { var cookie = _a[_i], eqIndex = cookie.indexOf("="), _b = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1]; if (cookieName.trim() === name) return decodeURIComponent(cookieValue) } return null }/**
   * @license undefined
    * Copyright Google Inc. All Rights Reserved.
    * *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
   * @return {?}
   */
    function supportsState() { return !!window.history.pushState } function moveNodesAfterSibling(sibling, nodes) { var parent = sibling.parentNode; if (nodes.length > 0 && parent) { var nextSibling = sibling.nextSibling; if (nextSibling) for (var i = 0; i < nodes.length; i++) parent.insertBefore(nodes[i], nextSibling); else for (var i = 0; i < nodes.length; i++) parent.appendChild(nodes[i]) } } function appendNodes(parent, nodes) { for (var i = 0; i < nodes.length; i++) parent.appendChild(nodes[i]) } function decoratePreventDefault(eventHandler) { return function (event) { var allowDefaultBehavior = eventHandler(event); allowDefaultBehavior === !1 && (event.preventDefault(), event.returnValue = !1) } } function shimContentAttribute(componentShortId) { return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId) } function shimHostAttribute(componentShortId) { return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId) } function flattenStyles(compId, styles, target) { for (var i = 0; i < styles.length; i++) { var style = styles[i]; Array.isArray(style) ? flattenStyles(compId, style, target) : (style = style.replace(COMPONENT_REGEX, compId), target.push(style)) } return target } function isNamespaced(name) { return ":" === name[0] } function splitNamespace(name) { var match = name.match(NS_PREFIX_RE); return [match[1], match[2]] } function inspectNativeElement(element) { return core.getDebugNode(element) } function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) { return core.isDevMode() ? _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) : rootRenderer } function _createRootRenderer(rootRenderer, extraTokens) { return getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement), getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || []))), new DebugDomRootRenderer(rootRenderer) } function _ngProbeTokensToMap(tokens) { return tokens.reduce(function (prev, t) { return prev[t.name] = t.token, prev }, {}) } function sanitizeUrl(url) { return url = String(url), url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN) ? url : (core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)"), "unsafe:" + url) } function sanitizeSrcset(srcset) { return srcset = String(srcset), srcset.split(",").map(function (srcset) { return sanitizeUrl(srcset.trim()) }).join(", ") } function getInertElement() { if (inertElement) return inertElement; DOM = getDOM(); var templateEl = DOM.createElement("template"); if ("content" in templateEl) return templateEl; var doc = DOM.createHtmlDocument(); if (inertElement = DOM.querySelector(doc, "body"), null == inertElement) { var html = DOM.createElement("html", doc); inertElement = DOM.createElement("body", doc), DOM.appendChild(html, inertElement), DOM.appendChild(doc, html) } return inertElement } function tagSet(tags) { for (var res = {}, _i = 0, _a = tags.split(",") ; _i < _a.length; _i++) { var t = _a[_i]; res[t] = !0 } return res } function merge() { for (var sets = [], _i = 0; _i < arguments.length; _i++) sets[_i - 0] = arguments[_i]; for (var res = {}, _a = 0, sets_1 = sets; _a < sets_1.length; _a++) { var s = sets_1[_a]; for (var v in s) s.hasOwnProperty(v) && (res[v] = !0) } return res } function encodeEntities(value) { return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function (match) { var hi = match.charCodeAt(0), low = match.charCodeAt(1); return "&#" + (1024 * (hi - 55296) + (low - 56320) + 65536) + ";" }).replace(NON_ALPHANUMERIC_REGEXP, function (match) { return "&#" + match.charCodeAt(0) + ";" }).replace(/</g, "&lt;").replace(/>/g, "&gt;") } function stripCustomNsAttrs(el) { DOM.attributeMap(el).forEach(function (_, attrName) { "xmlns:ns1" !== attrName && 0 !== attrName.indexOf("ns1:") || DOM.removeAttribute(el, attrName) }); for (var _i = 0, _a = DOM.childNodesAsList(el) ; _i < _a.length; _i++) { var n = _a[_i]; DOM.isElementNode(n) && stripCustomNsAttrs(n) } } function sanitizeHtml(unsafeHtmlInput) { try { var containerEl = getInertElement(), unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "", mXSSAttempts = 5, parsedHtml = unsafeHtml; do { if (0 === mXSSAttempts) throw new Error("Failed to sanitize html because the input is unstable"); mXSSAttempts--, unsafeHtml = parsedHtml, DOM.setInnerHTML(containerEl, unsafeHtml), DOM.defaultDoc().documentMode && stripCustomNsAttrs(containerEl), parsedHtml = DOM.getInnerHTML(containerEl) } while (unsafeHtml !== parsedHtml); for (var sanitizer = new SanitizingHtmlSerializer, safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl), parent_1 = DOM.getTemplateContent(containerEl) || containerEl, _i = 0, _a = DOM.childNodesAsList(parent_1) ; _i < _a.length; _i++) { var child = _a[_i]; DOM.removeChild(parent_1, child) } return core.isDevMode() && sanitizer.sanitizedSomething && DOM.log("WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss)."), safeHtml } catch (e) { throw inertElement = null, e } } function hasBalancedQuotes(value) { for (var outsideSingle = !0, outsideDouble = !0, i = 0; i < value.length; i++) { var c = value.charAt(i); "'" === c && outsideDouble ? outsideSingle = !outsideSingle : '"' === c && outsideSingle && (outsideDouble = !outsideDouble) } return outsideSingle && outsideDouble } function sanitizeStyle(value) { if (value = String(value).trim(), !value) return ""; var urlMatch = value.match(URL_RE); return urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value) ? value : (core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss)."), "unsafe") } function initDomAdapter() { BrowserDomAdapter.makeCurrent(), BrowserGetTestability.init() } function errorHandler() { return new core.ErrorHandler } function _document() { return getDOM().defaultDoc() } function _resolveDefaultAnimationDriver() { return getDOM().supportsWebAnimation() ? new WebAnimationsDriver : AnimationDriver.NOOP } function enableDebugTools(ref) { return Object.assign(context.ng, new AngularTools(ref)), ref } function disableDebugTools() { context.ng && delete context.ng.profiler } var globalScope, DebugDomRootRenderer = core.__core_private__.DebugDomRootRenderer, NoOpAnimationPlayer = core.__core_private__.NoOpAnimationPlayer, NoOpAnimationDriver = function () { function NoOpAnimationDriver() { } return NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { return void 0 === previousPlayers && (previousPlayers = []), new NoOpAnimationPlayer }, NoOpAnimationDriver }(), AnimationDriver = function () { function AnimationDriver() { } return AnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { }, AnimationDriver.NOOP = new NoOpAnimationDriver, AnimationDriver }(); globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window; var global$1 = globalScope; global$1.assert = function (condition) { };/**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
    var urlParsingNode, _DOM = null, DomAdapter = function () { function DomAdapter() { this.resourceLoaderType = null } return DomAdapter.prototype.hasProperty = function (element, name) { }, DomAdapter.prototype.setProperty = function (el, name, value) { }, DomAdapter.prototype.getProperty = function (el, name) { }, DomAdapter.prototype.invoke = function (el, methodName, args) { }, DomAdapter.prototype.logError = function (error) { }, DomAdapter.prototype.log = function (error) { }, DomAdapter.prototype.logGroup = function (error) { }, DomAdapter.prototype.logGroupEnd = function () { }, Object.defineProperty(DomAdapter.prototype, "attrToPropMap", { get: function () { return this._attrToPropMap }, set: function (value) { this._attrToPropMap = value }, enumerable: !0, configurable: !0 }), DomAdapter.prototype.parse = function (templateHtml) { }, DomAdapter.prototype.query = function (selector) { }, DomAdapter.prototype.querySelector = function (el, selector) { }, DomAdapter.prototype.querySelectorAll = function (el, selector) { }, DomAdapter.prototype.on = function (el, evt, listener) { }, DomAdapter.prototype.onAndCancel = function (el, evt, listener) { }, DomAdapter.prototype.dispatchEvent = function (el, evt) { }, DomAdapter.prototype.createMouseEvent = function (eventType) { }, DomAdapter.prototype.createEvent = function (eventType) { }, DomAdapter.prototype.preventDefault = function (evt) { }, DomAdapter.prototype.isPrevented = function (evt) { }, DomAdapter.prototype.getInnerHTML = function (el) { }, DomAdapter.prototype.getTemplateContent = function (el) { }, DomAdapter.prototype.getOuterHTML = function (el) { }, DomAdapter.prototype.nodeName = function (node) { }, DomAdapter.prototype.nodeValue = function (node) { }, DomAdapter.prototype.type = function (node) { }, DomAdapter.prototype.content = function (node) { }, DomAdapter.prototype.firstChild = function (el) { }, DomAdapter.prototype.nextSibling = function (el) { }, DomAdapter.prototype.parentElement = function (el) { }, DomAdapter.prototype.childNodes = function (el) { }, DomAdapter.prototype.childNodesAsList = function (el) { }, DomAdapter.prototype.clearNodes = function (el) { }, DomAdapter.prototype.appendChild = function (el, node) { }, DomAdapter.prototype.removeChild = function (el, node) { }, DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { }, DomAdapter.prototype.remove = function (el) { }, DomAdapter.prototype.insertBefore = function (el, node) { }, DomAdapter.prototype.insertAllBefore = function (el, nodes) { }, DomAdapter.prototype.insertAfter = function (el, node) { }, DomAdapter.prototype.setInnerHTML = function (el, value) { }, DomAdapter.prototype.getText = function (el) { }, DomAdapter.prototype.setText = function (el, value) { }, DomAdapter.prototype.getValue = function (el) { }, DomAdapter.prototype.setValue = function (el, value) { }, DomAdapter.prototype.getChecked = function (el) { }, DomAdapter.prototype.setChecked = function (el, value) { }, DomAdapter.prototype.createComment = function (text) { }, DomAdapter.prototype.createTemplate = function (html) { }, DomAdapter.prototype.createElement = function (tagName, doc) { }, DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { }, DomAdapter.prototype.createTextNode = function (text, doc) { }, DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { }, DomAdapter.prototype.createStyleElement = function (css, doc) { }, DomAdapter.prototype.createShadowRoot = function (el) { }, DomAdapter.prototype.getShadowRoot = function (el) { }, DomAdapter.prototype.getHost = function (el) { }, DomAdapter.prototype.getDistributedNodes = function (el) { }, DomAdapter.prototype.clone = function (node) { }, DomAdapter.prototype.getElementsByClassName = function (element, name) { }, DomAdapter.prototype.getElementsByTagName = function (element, name) { }, DomAdapter.prototype.classList = function (element) { }, DomAdapter.prototype.addClass = function (element, className) { }, DomAdapter.prototype.removeClass = function (element, className) { }, DomAdapter.prototype.hasClass = function (element, className) { }, DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { }, DomAdapter.prototype.removeStyle = function (element, styleName) { }, DomAdapter.prototype.getStyle = function (element, styleName) { }, DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { }, DomAdapter.prototype.tagName = function (element) { }, DomAdapter.prototype.attributeMap = function (element) { }, DomAdapter.prototype.hasAttribute = function (element, attribute) { }, DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { }, DomAdapter.prototype.getAttribute = function (element, attribute) { }, DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { }, DomAdapter.prototype.setAttribute = function (element, name, value) { }, DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { }, DomAdapter.prototype.removeAttribute = function (element, attribute) { }, DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { }, DomAdapter.prototype.templateAwareRoot = function (el) { }, DomAdapter.prototype.createHtmlDocument = function () { }, DomAdapter.prototype.defaultDoc = function () { }, DomAdapter.prototype.getBoundingClientRect = function (el) { }, DomAdapter.prototype.getTitle = function () { }, DomAdapter.prototype.setTitle = function (newTitle) { }, DomAdapter.prototype.elementMatches = function (n, selector) { }, DomAdapter.prototype.isTemplateElement = function (el) { }, DomAdapter.prototype.isTextNode = function (node) { }, DomAdapter.prototype.isCommentNode = function (node) { }, DomAdapter.prototype.isElementNode = function (node) { }, DomAdapter.prototype.hasShadowRoot = function (node) { }, DomAdapter.prototype.isShadowRoot = function (node) { }, DomAdapter.prototype.importIntoDoc = function (node) { }, DomAdapter.prototype.adoptNode = function (node) { }, DomAdapter.prototype.getHref = function (element) { }, DomAdapter.prototype.getEventKey = function (event) { }, DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { }, DomAdapter.prototype.supportsDOMEvents = function () { }, DomAdapter.prototype.supportsNativeShadowDOM = function () { }, DomAdapter.prototype.getGlobalEventTarget = function (target) { }, DomAdapter.prototype.getHistory = function () { }, DomAdapter.prototype.getLocation = function () { }, DomAdapter.prototype.getBaseHref = function () { }, DomAdapter.prototype.resetBaseElement = function () { }, DomAdapter.prototype.getUserAgent = function () { }, DomAdapter.prototype.setData = function (element, name, value) { }, DomAdapter.prototype.getComputedStyle = function (element) { }, DomAdapter.prototype.getData = function (element, name) { }, DomAdapter.prototype.setGlobalVar = function (name, value) { }, DomAdapter.prototype.supportsWebAnimation = function () { }, DomAdapter.prototype.performanceNow = function () { }, DomAdapter.prototype.getAnimationPrefix = function () { }, DomAdapter.prototype.getTransitionEnd = function () { }, DomAdapter.prototype.supportsAnimation = function () { }, DomAdapter.prototype.supportsCookies = function () { }, DomAdapter.prototype.getCookie = function (name) { }, DomAdapter.prototype.setCookie = function (name, value) { }, DomAdapter }(), WebAnimationsPlayer = function () { function WebAnimationsPlayer(element, keyframes, options, previousPlayers) { var _this = this; void 0 === previousPlayers && (previousPlayers = []), this.element = element, this.keyframes = keyframes, this.options = options, this._onDoneFns = [], this._onStartFns = [], this._initialized = !1, this._finished = !1, this._started = !1, this._destroyed = !1, this.parentPlayer = null, this._duration = options.duration, this.previousStyles = {}, previousPlayers.forEach(function (player) { var styles = player._captureStyles(); Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop] }) }) } return WebAnimationsPlayer.prototype._onFinish = function () { this._finished || (this._finished = !0, this._onDoneFns.forEach(function (fn) { return fn() }), this._onDoneFns = []) }, WebAnimationsPlayer.prototype.init = function () { var _this = this; if (!this._initialized) { this._initialized = !0; var keyframes = this.keyframes.map(function (styles) { var formattedKeyframe = {}; return Object.keys(styles).forEach(function (prop, index) { var value = styles[prop]; value == core.AUTO_STYLE && (value = _computeStyle(_this.element, prop)), void 0 != value && (formattedKeyframe[prop] = value) }), formattedKeyframe }), previousStyleProps = Object.keys(this.previousStyles); if (previousStyleProps.length) { var startingKeyframe_1 = findStartingKeyframe(keyframes); previousStyleProps.forEach(function (prop) { isPresent(startingKeyframe_1[prop]) && (startingKeyframe_1[prop] = _this.previousStyles[prop]) }) } this._player = this._triggerWebAnimation(this.element, keyframes, this.options), this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]), this._resetDomPlayerState(), this._player.addEventListener("finish", function () { return _this._onFinish() }) } }, WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) { return element.animate(keyframes, options) }, Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", { get: function () { return this._player }, enumerable: !0, configurable: !0 }), WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn) }, WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn) }, WebAnimationsPlayer.prototype.play = function () { this.init(), this.hasStarted() || (this._onStartFns.forEach(function (fn) { return fn() }), this._onStartFns = [], this._started = !0), this._player.play() }, WebAnimationsPlayer.prototype.pause = function () { this.init(), this._player.pause() }, WebAnimationsPlayer.prototype.finish = function () { this.init(), this._onFinish(), this._player.finish() }, WebAnimationsPlayer.prototype.reset = function () { this._resetDomPlayerState(), this._destroyed = !1, this._finished = !1, this._started = !1 }, WebAnimationsPlayer.prototype._resetDomPlayerState = function () { this._player && this._player.cancel() }, WebAnimationsPlayer.prototype.restart = function () { this.reset(), this.play() }, WebAnimationsPlayer.prototype.hasStarted = function () { return this._started }, WebAnimationsPlayer.prototype.destroy = function () { this._destroyed || (this._resetDomPlayerState(), this._onFinish(), this._destroyed = !0) }, Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", { get: function () { return this._duration }, enumerable: !0, configurable: !0 }), WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime }, WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime }, WebAnimationsPlayer.prototype._captureStyles = function () { var _this = this, styles = {}; return this.hasStarted() && Object.keys(this._finalKeyframe).forEach(function (prop) { "offset" != prop && (styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop)) }), styles }, WebAnimationsPlayer }(), WebAnimationsDriver = function () { function WebAnimationsDriver() { } return WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { void 0 === previousPlayers && (previousPlayers = []); var formattedSteps = [], startingStyleLookup = {}; if (isPresent(startingStyles) && startingStyles.styles.length > 0 && (startingStyleLookup = _populateStyles(startingStyles, {}), startingStyleLookup.offset = 0, formattedSteps.push(startingStyleLookup)), keyframes.forEach(function (keyframe) { var data = _populateStyles(keyframe.styles, startingStyleLookup); data.offset = Math.max(0, Math.min(1, keyframe.offset)), formattedSteps.push(data) }), 1 == formattedSteps.length) { var start = formattedSteps[0]; start.offset = null, formattedSteps = [start, start] } var playerOptions = { duration: duration, delay: delay, fill: "both" }; return easing && (playerOptions.easing = easing), previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn), new WebAnimationsPlayer(element, formattedSteps, playerOptions, previousPlayers) }, WebAnimationsDriver }(), __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, GenericBrowserDomAdapter = function (_super) { function GenericBrowserDomAdapter() { var _this = this; _super.call(this), this._animationPrefix = null, this._transitionEnd = null; try { var element_1 = this.createElement("div", this.defaultDoc()); if (isPresent(this.getStyle(element_1, "animationName"))) this._animationPrefix = ""; else for (var domPrefixes = ["Webkit", "Moz", "O", "ms"], i = 0; i < domPrefixes.length; i++) if (isPresent(this.getStyle(element_1, domPrefixes[i] + "AnimationName"))) { this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-"; break } var transEndEventNames_1 = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" }; Object.keys(transEndEventNames_1).forEach(function (key) { isPresent(_this.getStyle(element_1, key)) && (_this._transitionEnd = transEndEventNames_1[key]) }) } catch (e) { this._animationPrefix = null, this._transitionEnd = null } } return __extends$1(GenericBrowserDomAdapter, _super), GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes() }, GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) { el.href = null == href ? baseUrl : baseUrl + "/../" + href }, GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return !0 }, GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () { return "function" == typeof this.defaultDoc().body.createShadowRoot }, GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : "" }, GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : "" }, GenericBrowserDomAdapter.prototype.supportsAnimation = function () { return isPresent(this._animationPrefix) && isPresent(this._transitionEnd) }, GenericBrowserDomAdapter }(DomAdapter), __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, _attrToPropMap = { class: "className", innerHtml: "innerHTML", readonly: "readOnly", tabindex: "tabIndex" }, DOM_KEY_LOCATION_NUMPAD = 3, _keyMap = { "\b": "Backspace", "\t": "Tab", "": "Delete", "": "Escape", Del: "Delete", Esc: "Escape", Left: "ArrowLeft", Right: "ArrowRight", Up: "ArrowUp", Down: "ArrowDown", Menu: "ContextMenu", Scroll: "ScrollLock", Win: "OS" }, _chromeNumKeyPadMap = { A: "1", B: "2", C: "3", D: "4", E: "5", F: "6", G: "7", H: "8", I: "9", J: "*", K: "+", M: "-", N: ".", O: "/", "`": "0", "": "NumLock" }, BrowserDomAdapter = function (_super) { function BrowserDomAdapter() { _super.apply(this, arguments) } return __extends(BrowserDomAdapter, _super), BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error("parse not implemented") }, BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter) }, BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element }, BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value }, BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name] }, BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = el)[methodName].apply(_a, args); var _a }, BrowserDomAdapter.prototype.logError = function (error) { window.console && (console.error ? console.error(error) : console.log(error)) }, BrowserDomAdapter.prototype.log = function (error) { window.console && window.console.log && window.console.log(error) }, BrowserDomAdapter.prototype.logGroup = function (error) { window.console && window.console.group && window.console.group(error) }, BrowserDomAdapter.prototype.logGroupEnd = function () { window.console && window.console.groupEnd && window.console.groupEnd() }, Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", { get: function () { return _attrToPropMap }, enumerable: !0, configurable: !0 }), BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector) }, BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector) }, BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector) }, BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, !1) }, BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) { return el.addEventListener(evt, listener, !1), function () { el.removeEventListener(evt, listener, !1) } }, BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt) }, BrowserDomAdapter.prototype.createMouseEvent = function (eventType) { var evt = document.createEvent("MouseEvent"); return evt.initEvent(eventType, !0, !0), evt }, BrowserDomAdapter.prototype.createEvent = function (eventType) { var evt = document.createEvent("Event"); return evt.initEvent(eventType, !0, !0), evt }, BrowserDomAdapter.prototype.preventDefault = function (evt) { evt.preventDefault(), evt.returnValue = !1 }, BrowserDomAdapter.prototype.isPrevented = function (evt) { return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue }, BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML }, BrowserDomAdapter.prototype.getTemplateContent = function (el) { return "content" in el && el instanceof HTMLTemplateElement ? el.content : null }, BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML }, BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName }, BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue }, BrowserDomAdapter.prototype.type = function (node) { return node.type }, BrowserDomAdapter.prototype.content = function (node) { return this.hasProperty(node, "content") ? node.content : node }, BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild }, BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling }, BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode }, BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes }, BrowserDomAdapter.prototype.childNodesAsList = function (el) { for (var childNodes = el.childNodes, res = new Array(childNodes.length), i = 0; i < childNodes.length; i++) res[i] = childNodes[i]; return res }, BrowserDomAdapter.prototype.clearNodes = function (el) { for (; el.firstChild;) el.removeChild(el.firstChild) }, BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node) }, BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node) }, BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild) }, BrowserDomAdapter.prototype.remove = function (node) { return node.parentNode && node.parentNode.removeChild(node), node }, BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el) }, BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) { nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el) }) }, BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling) }, BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value }, BrowserDomAdapter.prototype.getText = function (el) { return el.textContent }, BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value }, BrowserDomAdapter.prototype.getValue = function (el) { return el.value }, BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value }, BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked }, BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value }, BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text) }, BrowserDomAdapter.prototype.createTemplate = function (html) { var t = document.createElement("template"); return t.innerHTML = html, t }, BrowserDomAdapter.prototype.createElement = function (tagName, doc) { return void 0 === doc && (doc = document), doc.createElement(tagName) }, BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) { return void 0 === doc && (doc = document), doc.createElementNS(ns, tagName) }, BrowserDomAdapter.prototype.createTextNode = function (text, doc) { return void 0 === doc && (doc = document), doc.createTextNode(text) }, BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { void 0 === doc && (doc = document); var el = doc.createElement("SCRIPT"); return el.setAttribute(attrName, attrValue), el }, BrowserDomAdapter.prototype.createStyleElement = function (css, doc) { void 0 === doc && (doc = document); var style = doc.createElement("style"); return this.appendChild(style, this.createTextNode(css)), style }, BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot() }, BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot }, BrowserDomAdapter.prototype.getHost = function (el) { return el.host }, BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(!0) }, BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) { return element.getElementsByClassName(name) }, BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) { return element.getElementsByTagName(name) }, BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0) }, BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className) }, BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className) }, BrowserDomAdapter.prototype.hasClass = function (element, className) { return element.classList.contains(className) }, BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) { element.style[styleName] = styleValue }, BrowserDomAdapter.prototype.removeStyle = function (element, stylename) { element.style[stylename] = "" }, BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename] }, BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { void 0 === styleValue && (styleValue = null); var value = this.getStyle(element, styleName) || ""; return styleValue ? value == styleValue : value.length > 0 }, BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName }, BrowserDomAdapter.prototype.attributeMap = function (element) { for (var res = new Map, elAttrs = element.attributes, i = 0; i < elAttrs.length; i++) { var attrib = elAttrs[i]; res.set(attrib.name, attrib.value) } return res }, BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) { return element.hasAttribute(attribute) }, BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { return element.hasAttributeNS(ns, attribute) }, BrowserDomAdapter.prototype.getAttribute = function (element, attribute) { return element.getAttribute(attribute) }, BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) { return element.getAttributeNS(ns, name) }, BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value) }, BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { element.setAttributeNS(ns, name, value) }, BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute) }, BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) { element.removeAttributeNS(ns, name) }, BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el }, BrowserDomAdapter.prototype.createHtmlDocument = function () { return document.implementation.createHTMLDocument("fakeTitle") }, BrowserDomAdapter.prototype.defaultDoc = function () { return document }, BrowserDomAdapter.prototype.getBoundingClientRect = function (el) { try { return el.getBoundingClientRect() } catch (e) { return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 } } }, BrowserDomAdapter.prototype.getTitle = function () { return document.title }, BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || "" }, BrowserDomAdapter.prototype.elementMatches = function (n, selector) { return n instanceof HTMLElement && (n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector)) }, BrowserDomAdapter.prototype.isTemplateElement = function (el) { return el instanceof HTMLElement && "TEMPLATE" == el.nodeName }, BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE }, BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE }, BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE }, BrowserDomAdapter.prototype.hasShadowRoot = function (node) { return isPresent(node.shadowRoot) && node instanceof HTMLElement }, BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment }, BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), !0) }, BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node) }, BrowserDomAdapter.prototype.getHref = function (el) { return el.href }, BrowserDomAdapter.prototype.getEventKey = function (event) { var key = event.key; if (isBlank(key)) { if (key = event.keyIdentifier, isBlank(key)) return "Unidentified"; key.startsWith("U+") && (key = String.fromCharCode(parseInt(key.substring(2), 16)), event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key) && (key = _chromeNumKeyPadMap[key])) } return _keyMap[key] || key }, BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) { return "window" === target ? window : "document" === target ? document : "body" === target ? document.body : void 0 }, BrowserDomAdapter.prototype.getHistory = function () { return window.history }, BrowserDomAdapter.prototype.getLocation = function () { return window.location }, BrowserDomAdapter.prototype.getBaseHref = function () { var href = getBaseElementHref(); return isBlank(href) ? null : relativePath(href) }, BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null }, BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent }, BrowserDomAdapter.prototype.setData = function (element, name, value) { this.setAttribute(element, "data-" + name, value) }, BrowserDomAdapter.prototype.getData = function (element, name) { return this.getAttribute(element, "data-" + name) }, BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element) }, BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value) }, BrowserDomAdapter.prototype.supportsWebAnimation = function () { return "function" == typeof Element.prototype.animate }, BrowserDomAdapter.prototype.performanceNow = function () { return window.performance && window.performance.now ? window.performance.now() : (new Date).getTime() }, BrowserDomAdapter.prototype.supportsCookies = function () { return !0 }, BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name) }, BrowserDomAdapter.prototype.setCookie = function (name, value) { document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) }, BrowserDomAdapter }(GenericBrowserDomAdapter), baseElement = null, __extends$2 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, BrowserPlatformLocation = function (_super) { function BrowserPlatformLocation() { _super.call(this), this._init() } return __extends$2(BrowserPlatformLocation, _super), BrowserPlatformLocation.prototype._init = function () { this._location = getDOM().getLocation(), this._history = getDOM().getHistory() }, Object.defineProperty(BrowserPlatformLocation.prototype, "location", { get: function () { return this._location }, enumerable: !0, configurable: !0 }), BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref() }, BrowserPlatformLocation.prototype.onPopState = function (fn) { getDOM().getGlobalEventTarget("window").addEventListener("popstate", fn, !1) }, BrowserPlatformLocation.prototype.onHashChange = function (fn) { getDOM().getGlobalEventTarget("window").addEventListener("hashchange", fn, !1) }, Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", { get: function () { return this._location.pathname }, set: function (newPath) { this._location.pathname = newPath }, enumerable: !0, configurable: !0 }), Object.defineProperty(BrowserPlatformLocation.prototype, "search", { get: function () { return this._location.search }, enumerable: !0, configurable: !0 }), Object.defineProperty(BrowserPlatformLocation.prototype, "hash", { get: function () { return this._location.hash }, enumerable: !0, configurable: !0 }), BrowserPlatformLocation.prototype.pushState = function (state, title, url) { supportsState() ? this._history.pushState(state, title, url) : this._location.hash = url }, BrowserPlatformLocation.prototype.replaceState = function (state, title, url) { supportsState() ? this._history.replaceState(state, title, url) : this._location.hash = url }, BrowserPlatformLocation.prototype.forward = function () { this._history.forward() }, BrowserPlatformLocation.prototype.back = function () { this._history.back() }, BrowserPlatformLocation.decorators = [{ type: core.Injectable }], BrowserPlatformLocation.ctorParameters = function () { return [] }, BrowserPlatformLocation }(_angular_common.PlatformLocation), BrowserGetTestability = function () { function BrowserGetTestability() { } return BrowserGetTestability.init = function () { core.setTestabilityGetter(new BrowserGetTestability) }, BrowserGetTestability.prototype.addToWindow = function (registry) { global$1.getAngularTestability = function (elem, findInAncestors) { void 0 === findInAncestors && (findInAncestors = !0); var testability = registry.findTestabilityInTree(elem, findInAncestors); if (null == testability) throw new Error("Could not find testability for element."); return testability }, global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities() }, global$1.getAllAngularRootElements = function () { return registry.getAllRootElements() }; var whenAllStable = function (callback) { var testabilities = global$1.getAllAngularTestabilities(), count = testabilities.length, didWork = !1, decrement = function (didWork_) { didWork = didWork || didWork_, count--, 0 == count && callback(didWork) }; testabilities.forEach(function (testability) { testability.whenStable(decrement) }) }; global$1.frameworkStabilizers || (global$1.frameworkStabilizers = []), global$1.frameworkStabilizers.push(whenAllStable) }, BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) { if (null == elem) return null; var t = registry.getTestability(elem); return isPresent(t) ? t : findInAncestors ? getDOM().isShadowRoot(elem) ? this.findTestabilityInTree(registry, getDOM().getHost(elem), !0) : this.findTestabilityInTree(registry, getDOM().parentElement(elem), !0) : null }, BrowserGetTestability }(), Title = function () { function Title() { } return Title.prototype.getTitle = function () { return getDOM().getTitle() }, Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle) }, Title }(), StringMapWrapper = function () { function StringMapWrapper() { } return StringMapWrapper.merge = function (m1, m2) { for (var m = {}, _i = 0, _a = Object.keys(m1) ; _i < _a.length; _i++) { var k = _a[_i]; m[k] = m1[k] } for (var _b = 0, _c = Object.keys(m2) ; _b < _c.length; _b++) { var k = _c[_b]; m[k] = m2[k] } return m }, StringMapWrapper.equals = function (m1, m2) { var k1 = Object.keys(m1), k2 = Object.keys(m2); if (k1.length != k2.length) return !1; for (var i = 0; i < k1.length; i++) { var key = k1[i]; if (m1[key] !== m2[key]) return !1 } return !0 }, StringMapWrapper }(), DOCUMENT = new core.OpaqueToken("DocumentToken"), EVENT_MANAGER_PLUGINS = new core.OpaqueToken("EventManagerPlugins"), EventManager = function () { function EventManager(plugins, _zone) { var _this = this; this._zone = _zone, this._eventNameToPlugin = new Map, plugins.forEach(function (p) { return p.manager = _this }), this._plugins = plugins.slice().reverse() } return EventManager.prototype.addEventListener = function (element, eventName, handler) { var plugin = this._findPluginFor(eventName); return plugin.addEventListener(element, eventName, handler) }, EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) { var plugin = this._findPluginFor(eventName); return plugin.addGlobalEventListener(target, eventName, handler) }, EventManager.prototype.getZone = function () { return this._zone }, EventManager.prototype._findPluginFor = function (eventName) { var plugin = this._eventNameToPlugin.get(eventName); if (plugin) return plugin; for (var plugins = this._plugins, i = 0; i < plugins.length; i++) { var plugin_1 = plugins[i]; if (plugin_1.supports(eventName)) return this._eventNameToPlugin.set(eventName, plugin_1), plugin_1 } throw new Error("No event manager plugin found for event " + eventName) }, EventManager.decorators = [{ type: core.Injectable }], EventManager.ctorParameters = function () { return [{ type: Array, decorators: [{ type: core.Inject, args: [EVENT_MANAGER_PLUGINS] }] }, { type: core.NgZone }] }, EventManager }(), EventManagerPlugin = function () {
        function EventManagerPlugin() { } return EventManagerPlugin.prototype.supports = function (eventName) { }, EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { },
        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) { var target = getDOM().getGlobalEventTarget(element); if (!target) throw new Error("Unsupported event target " + target + " for event " + eventName); return this.addEventListener(target, eventName, handler) }, EventManagerPlugin
    }(), __extends$4 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, SharedStylesHost = function () { function SharedStylesHost() { this._styles = [], this._stylesSet = new Set } return SharedStylesHost.prototype.addStyles = function (styles) { var _this = this, additions = []; styles.forEach(function (style) { _this._stylesSet.has(style) || (_this._stylesSet.add(style), _this._styles.push(style), additions.push(style)) }), this.onStylesAdded(additions) }, SharedStylesHost.prototype.onStylesAdded = function (additions) { }, SharedStylesHost.prototype.getAllStyles = function () { return this._styles }, SharedStylesHost.decorators = [{ type: core.Injectable }], SharedStylesHost.ctorParameters = function () { return [] }, SharedStylesHost }(), DomSharedStylesHost = function (_super) { function DomSharedStylesHost(doc) { _super.call(this), this._hostNodes = new Set, this._hostNodes.add(doc.head) } return __extends$4(DomSharedStylesHost, _super), DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) { for (var i = 0; i < styles.length; i++) { var styleEl = document.createElement("style"); styleEl.textContent = styles[i], host.appendChild(styleEl) } }, DomSharedStylesHost.prototype.addHost = function (hostNode) { this._addStylesToHost(this._styles, hostNode), this._hostNodes.add(hostNode) }, DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode) }, DomSharedStylesHost.prototype.onStylesAdded = function (additions) { var _this = this; this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode) }) }, DomSharedStylesHost.decorators = [{ type: core.Injectable }], DomSharedStylesHost.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: core.Inject, args: [DOCUMENT] }] }] }, DomSharedStylesHost }(SharedStylesHost), __extends$3 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, NAMESPACE_URIS = { xlink: "http://www.w3.org/1999/xlink", svg: "http://www.w3.org/2000/svg", xhtml: "http://www.w3.org/1999/xhtml" }, TEMPLATE_COMMENT_TEXT = "template bindings={}", TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/, DomRootRenderer = function () { function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) { this.document = document, this.eventManager = eventManager, this.sharedStylesHost = sharedStylesHost, this.animationDriver = animationDriver, this.appId = appId, this.registeredComponents = new Map } return DomRootRenderer.prototype.renderComponent = function (componentProto) { var renderer = this.registeredComponents.get(componentProto.id); return renderer || (renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id), this.registeredComponents.set(componentProto.id, renderer)), renderer }, DomRootRenderer }(), DomRootRenderer_ = function (_super) { function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) { _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId) } return __extends$3(DomRootRenderer_, _super), DomRootRenderer_.decorators = [{ type: core.Injectable }], DomRootRenderer_.ctorParameters = function () { return [{ type: void 0, decorators: [{ type: core.Inject, args: [DOCUMENT] }] }, { type: EventManager }, { type: DomSharedStylesHost }, { type: AnimationDriver }, { type: void 0, decorators: [{ type: core.Inject, args: [core.APP_ID] }] }] }, DomRootRenderer_ }(DomRootRenderer), DIRECT_DOM_RENDERER = { remove: function (node) { node.parentNode && node.parentNode.removeChild(node) }, appendChild: function (node, parent) { parent.appendChild(node) }, insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode) }, nextSibling: function (node) { return node.nextSibling }, parentElement: function (node) { return node.parentNode } }, DomRenderer = function () { function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) { this._rootRenderer = _rootRenderer, this.componentProto = componentProto, this._animationDriver = _animationDriver, this.directRenderer = DIRECT_DOM_RENDERER, this._styles = flattenStyles(styleShimId, componentProto.styles, []), componentProto.encapsulation !== core.ViewEncapsulation.Native && this._rootRenderer.sharedStylesHost.addStyles(this._styles), this.componentProto.encapsulation === core.ViewEncapsulation.Emulated ? (this._contentAttr = shimContentAttribute(styleShimId), this._hostAttr = shimHostAttribute(styleShimId)) : (this._contentAttr = null, this._hostAttr = null) } return DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { var el; if ("string" == typeof selectorOrNode) { if (el = this._rootRenderer.document.querySelector(selectorOrNode), !el) throw new Error('The selector "' + selectorOrNode + '" did not match any elements') } else el = selectorOrNode; for (; el.firstChild;) el.removeChild(el.firstChild); return el }, DomRenderer.prototype.createElement = function (parent, name, debugInfo) { var el; if (isNamespaced(name)) { var nsAndName = splitNamespace(name); el = document.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) } else el = document.createElement(name); return this._contentAttr && el.setAttribute(this._contentAttr, ""), parent && parent.appendChild(el), el }, DomRenderer.prototype.createViewRoot = function (hostElement) { var nodesParent; if (this.componentProto.encapsulation === core.ViewEncapsulation.Native) { nodesParent = hostElement.createShadowRoot(), this._rootRenderer.sharedStylesHost.addHost(nodesParent); for (var i = 0; i < this._styles.length; i++) { var styleEl = document.createElement("style"); styleEl.textContent = this._styles[i], nodesParent.appendChild(styleEl) } } else this._hostAttr && hostElement.setAttribute(this._hostAttr, ""), nodesParent = hostElement; return nodesParent }, DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { var comment = document.createComment(TEMPLATE_COMMENT_TEXT); return parentElement && parentElement.appendChild(comment), comment }, DomRenderer.prototype.createText = function (parentElement, value, debugInfo) { var node = document.createTextNode(value); return parentElement && parentElement.appendChild(node), node }, DomRenderer.prototype.projectNodes = function (parentElement, nodes) { parentElement && appendNodes(parentElement, nodes) }, DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes) }, DomRenderer.prototype.detachView = function (viewRootNodes) { for (var i = 0; i < viewRootNodes.length; i++) { var node = viewRootNodes[i]; node.parentNode && node.parentNode.removeChild(node) } }, DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) { this.componentProto.encapsulation === core.ViewEncapsulation.Native && hostElement && this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot) }, DomRenderer.prototype.listen = function (renderElement, name, callback) { return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback)) }, DomRenderer.prototype.listenGlobal = function (target, name, callback) { return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback)) }, DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { renderElement[propertyName] = propertyValue }, DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { var attrNs, attrNameWithoutNs = attributeName; if (isNamespaced(attributeName)) { var nsAndName = splitNamespace(attributeName); attrNameWithoutNs = nsAndName[1], attributeName = nsAndName[0] + ":" + nsAndName[1], attrNs = NAMESPACE_URIS[nsAndName[0]] } isPresent(attributeValue) ? attrNs ? renderElement.setAttributeNS(attrNs, attributeName, attributeValue) : renderElement.setAttribute(attributeName, attributeValue) : isPresent(attrNs) ? renderElement.removeAttributeNS(attrNs, attrNameWithoutNs) : renderElement.removeAttribute(attributeName) }, DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { if (renderElement.nodeType === Node.COMMENT_NODE) { var existingBindings = renderElement.nodeValue.replace(/\n/g, "").match(TEMPLATE_BINDINGS_EXP), parsedBindings = JSON.parse(existingBindings[1]); parsedBindings[propertyName] = propertyValue, renderElement.nodeValue = TEMPLATE_COMMENT_TEXT.replace("{}", JSON.stringify(parsedBindings, null, 2)) } else this.setElementAttribute(renderElement, propertyName, propertyValue) }, DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) { isAdd ? renderElement.classList.add(className) : renderElement.classList.remove(className) }, DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { isPresent(styleValue) ? renderElement.style[styleName] = stringify(styleValue) : renderElement.style[styleName] = "" }, DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { renderElement[methodName].apply(renderElement, args) }, DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text }, DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { void 0 === previousPlayers && (previousPlayers = []); try { return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) } catch (e) { return new NoOpAnimationPlayer } }, DomRenderer }(), COMPONENT_REGEX = /%COMP%/g, COMPONENT_VARIABLE = "%COMP%", HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE, CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE, NS_PREFIX_RE = /^:([^:]+):(.+)$/, CORE_TOKENS = { ApplicationRef: core.ApplicationRef, NgZone: core.NgZone }, INSPECT_GLOBAL_NAME = "ng.probe", CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens", NgProbeToken = function () { function NgProbeToken(name, token) { this.name = name, this.token = token } return NgProbeToken }(), ELEMENT_PROBE_PROVIDERS = [{ provide: core.RootRenderer, useFactory: _createConditionalRootRenderer, deps: [DomRootRenderer, [NgProbeToken, new core.Optional], [core.NgProbeToken, new core.Optional]] }], __extends$5 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, DomEventsPlugin = function (_super) { function DomEventsPlugin() { _super.apply(this, arguments) } return __extends$5(DomEventsPlugin, _super), DomEventsPlugin.prototype.supports = function (eventName) { return !0 }, DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) { return element.addEventListener(eventName, handler, !1), function () { return element.removeEventListener(eventName, handler, !1) } }, DomEventsPlugin.decorators = [{ type: core.Injectable }], DomEventsPlugin.ctorParameters = function () { return [] }, DomEventsPlugin }(EventManagerPlugin), __extends$6 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, EVENT_NAMES = { pan: !0, panstart: !0, panmove: !0, panend: !0, pancancel: !0, panleft: !0, panright: !0, panup: !0, pandown: !0, pinch: !0, pinchstart: !0, pinchmove: !0, pinchend: !0, pinchcancel: !0, pinchin: !0, pinchout: !0, press: !0, pressup: !0, rotate: !0, rotatestart: !0, rotatemove: !0, rotateend: !0, rotatecancel: !0, swipe: !0, swipeleft: !0, swiperight: !0, swipeup: !0, swipedown: !0, tap: !0 }, HAMMER_GESTURE_CONFIG = new core.OpaqueToken("HammerGestureConfig"), HammerGestureConfig = function () { function HammerGestureConfig() { this.events = [], this.overrides = {} } return HammerGestureConfig.prototype.buildHammer = function (element) { var mc = new Hammer(element); mc.get("pinch").set({ enable: !0 }), mc.get("rotate").set({ enable: !0 }); for (var eventName in this.overrides) mc.get(eventName).set(this.overrides[eventName]); return mc }, HammerGestureConfig.decorators = [{ type: core.Injectable }], HammerGestureConfig.ctorParameters = function () { return [] }, HammerGestureConfig }(), HammerGesturesPlugin = function (_super) { function HammerGesturesPlugin(_config) { _super.call(this), this._config = _config } return __extends$6(HammerGesturesPlugin, _super), HammerGesturesPlugin.prototype.supports = function (eventName) { if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) return !1; if (!window.Hammer) throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event"); return !0 }, HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) { var _this = this, zone = this.manager.getZone(); return eventName = eventName.toLowerCase(), zone.runOutsideAngular(function () { var mc = _this._config.buildHammer(element), callback = function (eventObj) { zone.runGuarded(function () { handler(eventObj) }) }; return mc.on(eventName, callback), function () { return mc.off(eventName, callback) } }) }, HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1 }, HammerGesturesPlugin.decorators = [{ type: core.Injectable }], HammerGesturesPlugin.ctorParameters = function () { return [{ type: HammerGestureConfig, decorators: [{ type: core.Inject, args: [HAMMER_GESTURE_CONFIG] }] }] }, HammerGesturesPlugin }(EventManagerPlugin), __extends$7 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, MODIFIER_KEYS = ["alt", "control", "meta", "shift"], MODIFIER_KEY_GETTERS = { alt: function (event) { return event.altKey }, control: function (event) { return event.ctrlKey }, meta: function (event) { return event.metaKey }, shift: function (event) { return event.shiftKey } }, KeyEventsPlugin = function (_super) { function KeyEventsPlugin() { _super.call(this) } return __extends$7(KeyEventsPlugin, _super), KeyEventsPlugin.prototype.supports = function (eventName) { return null != KeyEventsPlugin.parseEventName(eventName) }, KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) { var parsedEvent = KeyEventsPlugin.parseEventName(eventName), outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent.fullKey, handler, this.manager.getZone()); return this.manager.getZone().runOutsideAngular(function () { return getDOM().onAndCancel(element, parsedEvent.domEventName, outsideHandler) }) }, KeyEventsPlugin.parseEventName = function (eventName) { var parts = eventName.toLowerCase().split("."), domEventName = parts.shift(); if (0 === parts.length || "keydown" !== domEventName && "keyup" !== domEventName) return null; var key = KeyEventsPlugin._normalizeKey(parts.pop()), fullKey = ""; if (MODIFIER_KEYS.forEach(function (modifierName) { var index = parts.indexOf(modifierName); index > -1 && (parts.splice(index, 1), fullKey += modifierName + ".") }), fullKey += key, 0 != parts.length || 0 === key.length) return null; var result = {}; return result.domEventName = domEventName, result.fullKey = fullKey, result }, KeyEventsPlugin.getEventFullKey = function (event) { var fullKey = "", key = getDOM().getEventKey(event); return key = key.toLowerCase(), " " === key ? key = "space" : "." === key && (key = "dot"), MODIFIER_KEYS.forEach(function (modifierName) { if (modifierName != key) { var modifierGetter = MODIFIER_KEY_GETTERS[modifierName]; modifierGetter(event) && (fullKey += modifierName + ".") } }), fullKey += key }, KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) { return function (event) { KeyEventsPlugin.getEventFullKey(event) === fullKey && zone.runGuarded(function () { return handler(event) }) } }, KeyEventsPlugin._normalizeKey = function (keyName) { switch (keyName) { case "esc": return "escape"; default: return keyName } }, KeyEventsPlugin.decorators = [{ type: core.Injectable }], KeyEventsPlugin.ctorParameters = function () { return [] }, KeyEventsPlugin }(EventManagerPlugin), SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi, DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i, inertElement = null, DOM = null, VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr"), OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"), OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt"), OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS), BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")), INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")), VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS), URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href"), SRCSET_ATTRS = tagSet("srcset"), HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"), VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS), SanitizingHtmlSerializer = function () { function SanitizingHtmlSerializer() { this.sanitizedSomething = !1, this.buf = [] } return SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) { for (var current = el.firstChild; current;) if (DOM.isElementNode(current) ? this.startElement(current) : DOM.isTextNode(current) ? this.chars(DOM.nodeValue(current)) : this.sanitizedSomething = !0, DOM.firstChild(current)) current = DOM.firstChild(current); else for (; current;) { if (DOM.isElementNode(current) && this.endElement(current), DOM.nextSibling(current)) { current = DOM.nextSibling(current); break } current = DOM.parentElement(current) } return this.buf.join("") }, SanitizingHtmlSerializer.prototype.startElement = function (element) { var _this = this, tagName = DOM.nodeName(element).toLowerCase(); return VALID_ELEMENTS.hasOwnProperty(tagName) ? (this.buf.push("<"), this.buf.push(tagName), DOM.attributeMap(element).forEach(function (value, attrName) { var lower = attrName.toLowerCase(); return VALID_ATTRS.hasOwnProperty(lower) ? (URI_ATTRS[lower] && (value = sanitizeUrl(value)), SRCSET_ATTRS[lower] && (value = sanitizeSrcset(value)), _this.buf.push(" "), _this.buf.push(attrName), _this.buf.push('="'), _this.buf.push(encodeEntities(value)), void _this.buf.push('"')) : void (_this.sanitizedSomething = !0) }), void this.buf.push(">")) : void (this.sanitizedSomething = !0) }, SanitizingHtmlSerializer.prototype.endElement = function (current) { var tagName = DOM.nodeName(current).toLowerCase(); VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName) && (this.buf.push("</"), this.buf.push(tagName), this.buf.push(">")) }, SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)) }, SanitizingHtmlSerializer }(), SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g, VALUES = "[-,.\"'%_!# a-zA-Z0-9]+", TRANSFORMATION_FNS = "(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?", COLOR_FNS = "(?:rgb|hsl)a?", FN_ARGS = "\\([-0-9.%, a-zA-Z]+\\)", SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", "g"), URL_RE = /^url\(([^)]+)\)$/, __extends$8 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, DomSanitizer = function () { function DomSanitizer() { } return DomSanitizer.prototype.sanitize = function (context, value) { }, DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { }, DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { }, DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { }, DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { }, DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { }, DomSanitizer }(), DomSanitizerImpl = function (_super) { function DomSanitizerImpl() { _super.apply(this, arguments) } return __extends$8(DomSanitizerImpl, _super), DomSanitizerImpl.prototype.sanitize = function (ctx, value) { if (null == value) return null; switch (ctx) { case core.SecurityContext.NONE: return value; case core.SecurityContext.HTML: return value instanceof SafeHtmlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "HTML"), sanitizeHtml(String(value))); case core.SecurityContext.STYLE: return value instanceof SafeStyleImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "Style"), sanitizeStyle(value)); case core.SecurityContext.SCRIPT: if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity; throw this.checkNotSafeValue(value, "Script"), new Error("unsafe value used in a script context"); case core.SecurityContext.URL: return value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "URL"), sanitizeUrl(String(value))); case core.SecurityContext.RESOURCE_URL: if (value instanceof SafeResourceUrlImpl) return value.changingThisBreaksApplicationSecurity; throw this.checkNotSafeValue(value, "ResourceURL"), new Error("unsafe value used in a resource URL context (see http://g.co/ng/security#xss)"); default: throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)") } }, DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) { if (value instanceof SafeValueImpl) throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " (see http://g.co/ng/security#xss)") }, DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value) }, DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value) }, DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value) }, DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value) }, DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) { return new SafeResourceUrlImpl(value) }, DomSanitizerImpl.decorators = [{ type: core.Injectable }], DomSanitizerImpl.ctorParameters = function () { return [] }, DomSanitizerImpl }(DomSanitizer), SafeValueImpl = function () { function SafeValueImpl(changingThisBreaksApplicationSecurity) { this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity } return SafeValueImpl.prototype.getTypeName = function () { }, SafeValueImpl.prototype.toString = function () { return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)" }, SafeValueImpl }(), SafeHtmlImpl = function (_super) { function SafeHtmlImpl() { _super.apply(this, arguments) } return __extends$8(SafeHtmlImpl, _super), SafeHtmlImpl.prototype.getTypeName = function () { return "HTML" }, SafeHtmlImpl }(SafeValueImpl), SafeStyleImpl = function (_super) { function SafeStyleImpl() { _super.apply(this, arguments) } return __extends$8(SafeStyleImpl, _super), SafeStyleImpl.prototype.getTypeName = function () { return "Style" }, SafeStyleImpl }(SafeValueImpl), SafeScriptImpl = function (_super) { function SafeScriptImpl() { _super.apply(this, arguments) } return __extends$8(SafeScriptImpl, _super), SafeScriptImpl.prototype.getTypeName = function () { return "Script" }, SafeScriptImpl }(SafeValueImpl), SafeUrlImpl = function (_super) { function SafeUrlImpl() { _super.apply(this, arguments) } return __extends$8(SafeUrlImpl, _super), SafeUrlImpl.prototype.getTypeName = function () { return "URL" }, SafeUrlImpl }(SafeValueImpl), SafeResourceUrlImpl = function (_super) { function SafeResourceUrlImpl() { _super.apply(this, arguments) } return __extends$8(SafeResourceUrlImpl, _super), SafeResourceUrlImpl.prototype.getTypeName = function () { return "ResourceURL" }, SafeResourceUrlImpl }(SafeValueImpl), INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{ provide: core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: !0 }, { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }], BROWSER_SANITIZATION_PROVIDERS = [{ provide: core.Sanitizer, useExisting: DomSanitizer }, { provide: DomSanitizer, useClass: DomSanitizerImpl }], platformBrowser = core.createPlatformFactory(core.platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS), BrowserModule = function () { function BrowserModule(parentModule) { if (parentModule) throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.") } return BrowserModule.decorators = [{ type: core.NgModule, args: [{ providers: [BROWSER_SANITIZATION_PROVIDERS, { provide: core.ErrorHandler, useFactory: errorHandler, deps: [] }, { provide: DOCUMENT, useFactory: _document, deps: [] }, { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: !0 }, { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: !0 }, { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: !0 }, { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig }, { provide: DomRootRenderer, useClass: DomRootRenderer_ }, { provide: core.RootRenderer, useExisting: DomRootRenderer }, { provide: SharedStylesHost, useExisting: DomSharedStylesHost }, { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost, core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title], exports: [_angular_common.CommonModule, core.ApplicationModule] }] }], BrowserModule.ctorParameters = function () { return [{ type: BrowserModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }] }, BrowserModule }(), win = "undefined" != typeof window && window || {}, ChangeDetectionPerfRecord = function () { function ChangeDetectionPerfRecord(msPerTick, numTicks) { this.msPerTick = msPerTick, this.numTicks = numTicks } return ChangeDetectionPerfRecord }(), AngularTools = function () { function AngularTools(ref) { this.profiler = new AngularProfiler(ref) } return AngularTools }(), AngularProfiler = function () { function AngularProfiler(ref) { this.appRef = ref.injector.get(core.ApplicationRef) } return AngularProfiler.prototype.timeChangeDetection = function (config) { var record = config && config.record, profileName = "Change Detection", isProfilerAvailable = isPresent(win.console.profile); record && isProfilerAvailable && win.console.profile(profileName); for (var start = getDOM().performanceNow(), numTicks = 0; numTicks < 5 || getDOM().performanceNow() - start < 500;) this.appRef.tick(), numTicks++; var end = getDOM().performanceNow(); record && isProfilerAvailable && win.console.profileEnd(profileName); var msPerTick = (end - start) / numTicks; return win.console.log("ran " + numTicks + " change detection cycles"), win.console.log(msPerTick.toFixed(2) + " ms per check"), new ChangeDetectionPerfRecord(msPerTick, numTicks) }, AngularProfiler }(), context = global$1, By = function () { function By() { } return By.all = function () { return function (debugElement) { return !0 } }, By.css = function (selector) { return function (debugElement) { return !!isPresent(debugElement.nativeElement) && getDOM().elementMatches(debugElement.nativeElement, selector) } }, By.directive = function (type) { return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1 } }, By }(), __platform_browser_private__ = { BrowserPlatformLocation: BrowserPlatformLocation, DomAdapter: DomAdapter, BrowserDomAdapter: BrowserDomAdapter, BrowserGetTestability: BrowserGetTestability, getDOM: getDOM, setRootDomAdapter: setRootDomAdapter, DomRootRenderer_: DomRootRenderer_, DomRootRenderer: DomRootRenderer, NAMESPACE_URIS: NAMESPACE_URIS, shimContentAttribute: shimContentAttribute, shimHostAttribute: shimHostAttribute, flattenStyles: flattenStyles, splitNamespace: splitNamespace, isNamespaced: isNamespaced, DomSharedStylesHost: DomSharedStylesHost, SharedStylesHost: SharedStylesHost, ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS, DomEventsPlugin: DomEventsPlugin, KeyEventsPlugin: KeyEventsPlugin, HammerGesturesPlugin: HammerGesturesPlugin, initDomAdapter: initDomAdapter, INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS, BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS, WebAnimationsDriver: WebAnimationsDriver }, VERSION = new core.Version("2.4.1"); exports.BrowserModule = BrowserModule, exports.platformBrowser = platformBrowser, exports.Title = Title, exports.disableDebugTools = disableDebugTools, exports.enableDebugTools = enableDebugTools, exports.AnimationDriver = AnimationDriver, exports.By = By, exports.NgProbeToken = NgProbeToken, exports.DOCUMENT = DOCUMENT, exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS, exports.EventManager = EventManager, exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG, exports.HammerGestureConfig = HammerGestureConfig, exports.DomSanitizer = DomSanitizer, exports.VERSION = VERSION, exports.__platform_browser_private__ = __platform_browser_private__
});
/**
 * @license Angular v2.4.1
 * (c) 2010-2016 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) { "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/compiler"), require("@angular/core"), require("@angular/platform-browser")) : "function" == typeof define && define.amd ? define(["exports", "@angular/compiler", "@angular/core", "@angular/platform-browser"], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser) }(this, function (exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
    "use strict"; var globalScope, INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS, __extends = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, ResourceLoaderImpl = function (_super) { function ResourceLoaderImpl() { _super.apply(this, arguments) } return __extends(ResourceLoaderImpl, _super), ResourceLoaderImpl.prototype.get = function (url) { var resolve, reject, promise = new Promise(function (res, rej) { resolve = res, reject = rej }), xhr = new XMLHttpRequest; return xhr.open("GET", url, !0), xhr.responseType = "text", xhr.onload = function () { var response = xhr.response || xhr.responseText, status = 1223 === xhr.status ? 204 : xhr.status; 0 === status && (status = response ? 200 : 0), 200 <= status && status <= 300 ? resolve(response) : reject("Failed to load " + url) }, xhr.onerror = function () { reject("Failed to load " + url) }, xhr.send(), promise }, ResourceLoaderImpl.decorators = [{ type: _angular_core.Injectable }], ResourceLoaderImpl.ctorParameters = function () { return [] }, ResourceLoaderImpl }(_angular_compiler.ResourceLoader), INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, { provide: _angular_core.COMPILER_OPTIONS, useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] }, multi: !0 }]; globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window; var _global = globalScope; _global.assert = function (condition) { };/**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var __extends$1 = this && this.__extends || function (d, b) { function __() { this.constructor = d } for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]); d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }, CachedResourceLoader = function (_super) { function CachedResourceLoader() { if (_super.call(this), this._cache = _global.$templateCache, null == this._cache) throw new Error("CachedResourceLoader: Template cache was not found in $templateCache.") } return __extends$1(CachedResourceLoader, _super), CachedResourceLoader.prototype.get = function (url) { return this._cache.hasOwnProperty(url) ? Promise.resolve(this._cache[url]) : Promise.reject("CachedResourceLoader: Did not find cached template for " + url) }, CachedResourceLoader }(_angular_compiler.ResourceLoader), __platform_browser_dynamic_private__ = { INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, ResourceLoaderImpl: ResourceLoaderImpl }, VERSION = new _angular_core.Version("2.4.1"), RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }], platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS); exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER, exports.platformBrowserDynamic = platformBrowserDynamic, exports.VERSION = VERSION, exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__
});